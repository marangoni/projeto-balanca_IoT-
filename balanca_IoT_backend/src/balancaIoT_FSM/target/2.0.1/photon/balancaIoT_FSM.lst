
c:/dev/balancaIoT/balancaIoT_FSM/target/2.0.1/photon/balancaIoT_FSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000046d4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a46f0  080a46f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a46f8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  080a46fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000578  20000078  20000078  00040078  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a4770  080a4770  00034770  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a4798  080a4798  00034798  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00149651  00000000  00000000  0003479c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00017193  00000000  00000000  0017dded  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001fd36  00000000  00000000  00194f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000025f8  00000000  00000000  001b4cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005f90  00000000  00000000  001b72ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00029c51  00000000  00000000  001bd23e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003301d  00000000  00000000  001e6e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000ba1c4  00000000  00000000  00219eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00006864  00000000  00000000  002d4070  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 ff7d 	bl	80a3f2c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 ff9f 	bl	80a3f7c <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a46fc 	.word	0x080a46fc
 80a004c:	20000074 	.word	0x20000074
 80a0050:	20000078 	.word	0x20000078
 80a0054:	200005f0 	.word	0x200005f0
 80a0058:	200005f0 	.word	0x200005f0

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f995 	bl	80a238c <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a46c8 	.word	0x080a46c8
 80a0080:	080a46e8 	.word	0x080a46e8

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b9a8 	b.w	80a03d8 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f8c5 	bl	80a0218 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f002 b93d 	b.w	80a2310 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f000 beb1 	b.w	80a0dfc <malloc>

080a009a <_Znaj>:
 80a009a:	f000 beaf 	b.w	80a0dfc <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f000 beb5 	b.w	80a0e0c <free>
	...

080a00a4 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a4:	2100      	movs	r1, #0
 80a00a6:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00aa:	4a02      	ldr	r2, [pc, #8]	; (80a00b4 <__cxa_pure_virtual+0x10>)
 80a00ac:	f000 fdea 	bl	80a0c84 <panic_>
  while (1);
 80a00b0:	e7fe      	b.n	80a00b0 <__cxa_pure_virtual+0xc>
 80a00b2:	bf00      	nop
 80a00b4:	080a0a11 	.word	0x080a0a11

080a00b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b8:	7800      	ldrb	r0, [r0, #0]
 80a00ba:	fab0 f080 	clz	r0, r0
 80a00be:	0940      	lsrs	r0, r0, #5
 80a00c0:	4770      	bx	lr

080a00c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c2:	2301      	movs	r3, #1
 80a00c4:	7003      	strb	r3, [r0, #0]
 80a00c6:	4770      	bx	lr

080a00c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 80a00c8:	4770      	bx	lr

080a00ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80a00ca:	6a00      	ldr	r0, [r0, #32]
 80a00cc:	6803      	ldr	r3, [r0, #0]
 80a00ce:	68db      	ldr	r3, [r3, #12]
 80a00d0:	4718      	bx	r3

080a00d2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle6detail10FutureImplIbNS1_13FutureContextEEESaIS4_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
	      std::forward<_Args>(__args)...); // might throw
	}

      ~_Sp_counted_ptr_inplace() noexcept { }
 80a00d2:	4770      	bx	lr

080a00d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle6detail10FutureImplIbNS1_13FutureContextEEESaIS4_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 80a00d4:	b510      	push	{r4, lr}
 80a00d6:	4604      	mov	r4, r0
 80a00d8:	2120      	movs	r1, #32
 80a00da:	f002 ff78 	bl	80a2fce <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}
	...

080a00e4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle6detail10FutureImplIbNS1_13FutureContextEEESaIS4_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      friend class __shared_count<_Lp>; // To be able to call _M_ptr().

      // No longer used, but code compiled against old libstdc++ headers
      // might still call it from __shared_ptr ctor to get the pointer out.
      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a00e4:	b510      	push	{r4, lr}
 80a00e6:	4604      	mov	r4, r0
	// Check for the fake type_info first, so we don't try to access it
	// as a real type_info object. Otherwise, check if it's the real
	// type_info for this class. With RTTI enabled we can check directly,
	// or call a library function to do it.
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
	    ||
 80a00e8:	4b06      	ldr	r3, [pc, #24]	; (80a0104 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle6detail10FutureImplIbNS1_13FutureContextEEESaIS4_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a00ea:	4608      	mov	r0, r1
	    ||
 80a00ec:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a00ee:	f104 040c 	add.w	r4, r4, #12
 80a00f2:	d004      	beq.n	80a00fe <_ZNSt23_Sp_counted_ptr_inplaceIN8particle6detail10FutureImplIbNS1_13FutureContextEEESaIS4_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
#if __cpp_rtti
	    __ti == typeid(_Sp_make_shared_tag)
#else
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a00f4:	f002 ff72 	bl	80a2fdc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80a00f8:	2800      	cmp	r0, #0
#endif
	   )
	  return __ptr;
	return nullptr;
 80a00fa:	bf08      	it	eq
 80a00fc:	2400      	moveq	r4, #0
      }
 80a00fe:	4620      	mov	r0, r4
 80a0100:	bd10      	pop	{r4, pc}
 80a0102:	bf00      	nop
 80a0104:	080a4274 	.word	0x080a4274

080a0108 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle6detail10FutureImplIbNS1_13FutureContextEEESaIS4_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80a0108:	f7ff bfc9 	b.w	80a009e <_ZdlPv>

080a010c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a010c:	b510      	push	{r4, lr}
 80a010e:	4604      	mov	r4, r0
          _M_dispose();
 80a0110:	6803      	ldr	r3, [r0, #0]
 80a0112:	689b      	ldr	r3, [r3, #8]
 80a0114:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0116:	68a3      	ldr	r3, [r4, #8]
 80a0118:	3b01      	subs	r3, #1
 80a011a:	60a3      	str	r3, [r4, #8]
 80a011c:	b92b      	cbnz	r3, 80a012a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80a011e:	6823      	ldr	r3, [r4, #0]
 80a0120:	4620      	mov	r0, r4
    }
 80a0122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80a0126:	68db      	ldr	r3, [r3, #12]
 80a0128:	4718      	bx	r3
    }
 80a012a:	bd10      	pop	{r4, pc}

080a012c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a012c:	b510      	push	{r4, lr}
 80a012e:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0130:	6800      	ldr	r0, [r0, #0]
 80a0132:	b108      	cbz	r0, 80a0138 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80a0134:	f000 fe6a 	bl	80a0e0c <free>
class SystemClass {
 80a0138:	4620      	mov	r0, r4
 80a013a:	bd10      	pop	{r4, pc}

080a013c <_ZN5spark17Serial1LogHandlerD1Ev>:
            StreamLogHandler(Serial1, level, filters) {
        Serial1.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~Serial1LogHandler() {
 80a013c:	b510      	push	{r4, lr}
 80a013e:	4604      	mov	r4, r0
 80a0140:	4b09      	ldr	r3, [pc, #36]	; (80a0168 <_ZN5spark17Serial1LogHandlerD1Ev+0x2c>)
 80a0142:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 80a0144:	f001 f9ea 	bl	80a151c <_ZN5spark10LogManager8instanceEv>
 80a0148:	4621      	mov	r1, r4
 80a014a:	f001 fc19 	bl	80a1980 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial1.end();
 80a014e:	f002 fb09 	bl	80a2764 <_Z22__fetch_global_Serial1v>
 80a0152:	f002 fb04 	bl	80a275e <_ZN11USARTSerial3endEv>
    virtual ~LogHandler() = default;
 80a0156:	4620      	mov	r0, r4
 80a0158:	4b04      	ldr	r3, [pc, #16]	; (80a016c <_ZN5spark17Serial1LogHandlerD1Ev+0x30>)
 80a015a:	f840 3b04 	str.w	r3, [r0], #4
 80a015e:	f001 fafd 	bl	80a175c <_ZN5spark6detail9LogFilterD1Ev>
    }
 80a0162:	4620      	mov	r0, r4
 80a0164:	bd10      	pop	{r4, pc}
 80a0166:	bf00      	nop
 80a0168:	080a4248 	.word	0x080a4248
 80a016c:	080a4230 	.word	0x080a4230

080a0170 <_ZN5spark17Serial1LogHandlerD0Ev>:
    virtual ~Serial1LogHandler() {
 80a0170:	b510      	push	{r4, lr}
 80a0172:	4604      	mov	r4, r0
    }
 80a0174:	f7ff ffe2 	bl	80a013c <_ZN5spark17Serial1LogHandlerD1Ev>
 80a0178:	4620      	mov	r0, r4
 80a017a:	2124      	movs	r1, #36	; 0x24
 80a017c:	f002 ff27 	bl	80a2fce <_ZdlPvj>
 80a0180:	4620      	mov	r0, r4
 80a0182:	bd10      	pop	{r4, pc}

080a0184 <_ZN8particle6FutureIbNS_6detail13FutureContextEED1Ev>:

    detail::FutureImplPtr<ResultT, ContextT> p_;
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
 80a0184:	b510      	push	{r4, lr}
 80a0186:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0188:	6840      	ldr	r0, [r0, #4]
 80a018a:	b128      	cbz	r0, 80a0198 <_ZN8particle6FutureIbNS_6detail13FutureContextEED1Ev+0x14>
      if (--_M_use_count == 0)
 80a018c:	6843      	ldr	r3, [r0, #4]
 80a018e:	3b01      	subs	r3, #1
 80a0190:	6043      	str	r3, [r0, #4]
 80a0192:	b90b      	cbnz	r3, 80a0198 <_ZN8particle6FutureIbNS_6detail13FutureContextEED1Ev+0x14>
 80a0194:	f7ff ffba 	bl	80a010c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
 80a0198:	4620      	mov	r0, r4
 80a019a:	bd10      	pop	{r4, pc}

080a019c <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a019c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a019e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a01a0:	4604      	mov	r4, r0
      if (_M_manager)
 80a01a2:	b113      	cbz	r3, 80a01aa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a01a4:	2203      	movs	r2, #3
 80a01a6:	4601      	mov	r1, r0
 80a01a8:	4798      	blx	r3
    }
 80a01aa:	4620      	mov	r0, r4
 80a01ac:	bd10      	pop	{r4, pc}

080a01ae <_ZNSt23_Sp_counted_ptr_inplaceIN8particle6detail10FutureImplIbNS1_13FutureContextEEESaIS4_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a01ae:	b538      	push	{r3, r4, r5, lr}
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a01b0:	7b03      	ldrb	r3, [r0, #12]
 80a01b2:	4604      	mov	r4, r0
        } else if (s == State::FAILED) {
 80a01b4:	2b02      	cmp	r3, #2
 80a01b6:	d102      	bne.n	80a01be <_ZNSt23_Sp_counted_ptr_inplaceIN8particle6detail10FutureImplIbNS1_13FutureContextEEESaIS4_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x10>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a01b8:	6980      	ldr	r0, [r0, #24]
 80a01ba:	f000 fe27 	bl	80a0e0c <free>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a01be:	6925      	ldr	r5, [r4, #16]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a01c0:	b135      	cbz	r5, 80a01d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle6detail10FutureImplIbNS1_13FutureContextEEESaIS4_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a01c2:	4628      	mov	r0, r5
 80a01c4:	f7ff ffea 	bl	80a019c <_ZNSt14_Function_baseD1Ev>
 80a01c8:	2110      	movs	r1, #16
 80a01ca:	4628      	mov	r0, r5
 80a01cc:	f002 feff 	bl	80a2fce <_ZdlPvj>
 80a01d0:	6964      	ldr	r4, [r4, #20]
        delete onError_.load(std::memory_order_relaxed);
 80a01d2:	b144      	cbz	r4, 80a01e6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle6detail10FutureImplIbNS1_13FutureContextEEESaIS4_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a01d4:	4620      	mov	r0, r4
 80a01d6:	f7ff ffe1 	bl	80a019c <_ZNSt14_Function_baseD1Ev>
 80a01da:	4620      	mov	r0, r4
      }
 80a01dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a01e0:	2110      	movs	r1, #16
 80a01e2:	f002 bef4 	b.w	80a2fce <_ZdlPvj>
 80a01e6:	bd38      	pop	{r3, r4, r5, pc}

080a01e8 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80a01e8:	b40e      	push	{r1, r2, r3}
 80a01ea:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a01ec:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 80a01ee:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 80a01f0:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 80a01f2:	b08d      	sub	sp, #52	; 0x34
 80a01f4:	aa0f      	add	r2, sp, #60	; 0x3c
 80a01f6:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 80a01fa:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a01fe:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 80a0202:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0204:	201e      	movs	r0, #30
 80a0206:	aa04      	add	r2, sp, #16
 80a0208:	f000 fd44 	bl	80a0c94 <log_message_v>
}
 80a020c:	b00d      	add	sp, #52	; 0x34
 80a020e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0212:	b003      	add	sp, #12
 80a0214:	4770      	bx	lr
	...

080a0218 <loop>:
    lcd->print(String(medida,2));
    lcd->setCursor(10 ,1);
    lcd->print("kg");
}

void loop() {
 80a0218:	b538      	push	{r3, r4, r5, lr}
    switch(estado) {
 80a021a:	4c11      	ldr	r4, [pc, #68]	; (80a0260 <loop+0x48>)
 80a021c:	7823      	ldrb	r3, [r4, #0]
 80a021e:	b98b      	cbnz	r3, 80a0244 <loop+0x2c>
        case ESTADO_INIT:
            // Tara da balanca
             scale.tare();
 80a0220:	210a      	movs	r1, #10
 80a0222:	4810      	ldr	r0, [pc, #64]	; (80a0264 <loop+0x4c>)
 80a0224:	f000 fa9e 	bl	80a0764 <_ZN8HX711ADC4tareEh>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0228:	f000 fdd8 	bl	80a0ddc <spark_cloud_flag_connected>
 80a022c:	4d0e      	ldr	r5, [pc, #56]	; (80a0268 <loop+0x50>)
            
            // Aguarda conexao do Particle a nuvem 
            if (Particle.connected()) {
 80a022e:	b150      	cbz	r0, 80a0246 <loop+0x2e>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0230:	f000 fbf6 	bl	80a0a20 <HAL_Timer_Get_Milli_Seconds>
                // saida Log.info no monitor serial - utilizar putty ou outro para verificar
                Log.info("conectado a nuvem em %lu ms", millis() - stateTime);
 80a0234:	682a      	ldr	r2, [r5, #0]
 80a0236:	490d      	ldr	r1, [pc, #52]	; (80a026c <loop+0x54>)
 80a0238:	1a82      	subs	r2, r0, r2
 80a023a:	480d      	ldr	r0, [pc, #52]	; (80a0270 <loop+0x58>)
 80a023c:	f7ff ffd4 	bl	80a01e8 <_ZNK5spark6Logger4infoEPKcz>
                estado = ESTADO_EM_OPERACAO; 
 80a0240:	2303      	movs	r3, #3
            }
            else
            if (millis() - stateTime >= connectMaxTime.count()) {
                // Se demorar mais que o tempo máximo previsto, entre em modo SLEEP
                Log.info("falha de conexao, entrando no modo SLEEP");
                estado = ESTADO_SLEEP;
 80a0242:	7023      	strb	r3, [r4, #0]

            // state = STATE_WAIT_CONNECTED;
            // stateTime = millis();
            break; 
    }
}
 80a0244:	bd38      	pop	{r3, r4, r5, pc}
 80a0246:	f000 fbeb 	bl	80a0a20 <HAL_Timer_Get_Milli_Seconds>
            if (millis() - stateTime >= connectMaxTime.count()) {
 80a024a:	682b      	ldr	r3, [r5, #0]
 80a024c:	1ac0      	subs	r0, r0, r3
 80a024e:	4b09      	ldr	r3, [pc, #36]	; (80a0274 <loop+0x5c>)
 80a0250:	4298      	cmp	r0, r3
 80a0252:	d9f7      	bls.n	80a0244 <loop+0x2c>
                Log.info("falha de conexao, entrando no modo SLEEP");
 80a0254:	4908      	ldr	r1, [pc, #32]	; (80a0278 <loop+0x60>)
 80a0256:	4806      	ldr	r0, [pc, #24]	; (80a0270 <loop+0x58>)
 80a0258:	f7ff ffc6 	bl	80a01e8 <_ZNK5spark6Logger4infoEPKcz>
                estado = ESTADO_SLEEP;
 80a025c:	2309      	movs	r3, #9
 80a025e:	e7f0      	b.n	80a0242 <loop+0x2a>
 80a0260:	20000088 	.word	0x20000088
 80a0264:	200000c8 	.word	0x200000c8
 80a0268:	200000dc 	.word	0x200000dc
 80a026c:	080a41a0 	.word	0x080a41a0
 80a0270:	20000100 	.word	0x20000100
 80a0274:	00057e3f 	.word	0x00057e3f
 80a0278:	080a41bc 	.word	0x080a41bc

080a027c <_Z16atualiza_display6String>:
 return 1;
}

// funcao atualiza medida no display
int atualiza_display(String valor)
{
 80a027c:	b538      	push	{r3, r4, r5, lr}
 80a027e:	4605      	mov	r5, r0
    lcd->clear();
 80a0280:	4c10      	ldr	r4, [pc, #64]	; (80a02c4 <_Z16atualiza_display6String+0x48>)
 80a0282:	6820      	ldr	r0, [r4, #0]
 80a0284:	f000 faf0 	bl	80a0868 <_ZN17LiquidCrystal_I2C5clearEv>
    lcd->setCursor(6 ,0 );
 80a0288:	2200      	movs	r2, #0
 80a028a:	6820      	ldr	r0, [r4, #0]
 80a028c:	2106      	movs	r1, #6
 80a028e:	f000 faff 	bl	80a0890 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    lcd->print("Peso");
 80a0292:	490d      	ldr	r1, [pc, #52]	; (80a02c8 <_Z16atualiza_display6String+0x4c>)
 80a0294:	6820      	ldr	r0, [r4, #0]
 80a0296:	f000 ff89 	bl	80a11ac <_ZN5Print5printEPKc>
    lcd->setCursor(4 ,1 );
 80a029a:	2201      	movs	r2, #1
 80a029c:	6820      	ldr	r0, [r4, #0]
 80a029e:	2104      	movs	r1, #4
 80a02a0:	f000 faf6 	bl	80a0890 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    lcd->print(valor);
 80a02a4:	6829      	ldr	r1, [r5, #0]
 80a02a6:	6820      	ldr	r0, [r4, #0]
 80a02a8:	f000 ff80 	bl	80a11ac <_ZN5Print5printEPKc>
    lcd->setCursor(10 ,1);
 80a02ac:	2201      	movs	r2, #1
 80a02ae:	6820      	ldr	r0, [r4, #0]
 80a02b0:	210a      	movs	r1, #10
 80a02b2:	f000 faed 	bl	80a0890 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    lcd->print("kg");
 80a02b6:	4905      	ldr	r1, [pc, #20]	; (80a02cc <_Z16atualiza_display6String+0x50>)
 80a02b8:	6820      	ldr	r0, [r4, #0]
 80a02ba:	f000 ff77 	bl	80a11ac <_ZN5Print5printEPKc>

    return 0;
}
 80a02be:	2000      	movs	r0, #0
 80a02c0:	bd38      	pop	{r3, r4, r5, pc}
 80a02c2:	bf00      	nop
 80a02c4:	2000008c 	.word	0x2000008c
 80a02c8:	080a41e5 	.word	0x080a41e5
 80a02cc:	080a41ea 	.word	0x080a41ea

080a02d0 <_Z9tareScale6String>:
{
 80a02d0:	b510      	push	{r4, lr}
  scale.tare();
 80a02d2:	210a      	movs	r1, #10
{
 80a02d4:	b086      	sub	sp, #24
   lcd->clear();
 80a02d6:	4c1a      	ldr	r4, [pc, #104]	; (80a0340 <_Z9tareScale6String+0x70>)
  scale.tare();
 80a02d8:	481a      	ldr	r0, [pc, #104]	; (80a0344 <_Z9tareScale6String+0x74>)
 80a02da:	f000 fa43 	bl	80a0764 <_ZN8HX711ADC4tareEh>
  delay(100);
 80a02de:	2064      	movs	r0, #100	; 0x64
 80a02e0:	f001 ffc8 	bl	80a2274 <delay>
   lcd->clear();
 80a02e4:	6820      	ldr	r0, [r4, #0]
 80a02e6:	f000 fabf 	bl	80a0868 <_ZN17LiquidCrystal_I2C5clearEv>
   lcd->setCursor(0 ,0 );
 80a02ea:	2200      	movs	r2, #0
 80a02ec:	6820      	ldr	r0, [r4, #0]
 80a02ee:	4611      	mov	r1, r2
 80a02f0:	f000 face 	bl	80a0890 <_ZN17LiquidCrystal_I2C9setCursorEhh>
   lcd->print("Tara da balanca");
 80a02f4:	4914      	ldr	r1, [pc, #80]	; (80a0348 <_Z9tareScale6String+0x78>)
 80a02f6:	6820      	ldr	r0, [r4, #0]
 80a02f8:	f000 ff58 	bl	80a11ac <_ZN5Print5printEPKc>
   lcd->setCursor(0 ,1 );
 80a02fc:	2201      	movs	r2, #1
 80a02fe:	6820      	ldr	r0, [r4, #0]
 80a0300:	2100      	movs	r1, #0
 80a0302:	f000 fac5 	bl	80a0890 <_ZN17LiquidCrystal_I2C9setCursorEhh>
   lcd->print(" pela nuvem!");
 80a0306:	4911      	ldr	r1, [pc, #68]	; (80a034c <_Z9tareScale6String+0x7c>)
 80a0308:	6820      	ldr	r0, [r4, #0]
 80a030a:	f000 ff4f 	bl	80a11ac <_ZN5Print5printEPKc>
 80a030e:	f000 fb87 	bl	80a0a20 <HAL_Timer_Get_Milli_Seconds>
 80a0312:	4604      	mov	r4, r0
 80a0314:	f000 fb84 	bl	80a0a20 <HAL_Timer_Get_Milli_Seconds>
        if(millis()-startTime >= 200){
 80a0318:	1b03      	subs	r3, r0, r4
 80a031a:	2bc7      	cmp	r3, #199	; 0xc7
 80a031c:	d9fa      	bls.n	80a0314 <_Z9tareScale6String+0x44>
   atualiza_display(String(medida,2));
 80a031e:	2302      	movs	r3, #2
 80a0320:	9300      	str	r3, [sp, #0]
 80a0322:	4b0b      	ldr	r3, [pc, #44]	; (80a0350 <_Z9tareScale6String+0x80>)
 80a0324:	a802      	add	r0, sp, #8
 80a0326:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a032a:	f000 ff03 	bl	80a1134 <_ZN6StringC1Edi>
 80a032e:	a802      	add	r0, sp, #8
 80a0330:	f7ff ffa4 	bl	80a027c <_Z16atualiza_display6String>
 80a0334:	a802      	add	r0, sp, #8
 80a0336:	f000 fe4d 	bl	80a0fd4 <_ZN6StringD1Ev>
}
 80a033a:	2001      	movs	r0, #1
 80a033c:	b006      	add	sp, #24
 80a033e:	bd10      	pop	{r4, pc}
 80a0340:	2000008c 	.word	0x2000008c
 80a0344:	200000c8 	.word	0x200000c8
 80a0348:	080a41ed 	.word	0x080a41ed
 80a034c:	080a41fd 	.word	0x080a41fd
 80a0350:	200000b8 	.word	0x200000b8

080a0354 <_Z12init_displayv>:

int init_display()
{
 80a0354:	b538      	push	{r3, r4, r5, lr}
    lcd = new LiquidCrystal_I2C(0x27, 16, 2);
 80a0356:	2010      	movs	r0, #16
 80a0358:	f7ff fe9d 	bl	80a0096 <_Znwj>
 80a035c:	4604      	mov	r4, r0
 80a035e:	b120      	cbz	r0, 80a036a <_Z12init_displayv+0x16>
 80a0360:	2302      	movs	r3, #2
 80a0362:	2210      	movs	r2, #16
 80a0364:	2127      	movs	r1, #39	; 0x27
 80a0366:	f000 fa17 	bl	80a0798 <_ZN17LiquidCrystal_I2CC1Ehhh>
 80a036a:	4d06      	ldr	r5, [pc, #24]	; (80a0384 <_Z12init_displayv+0x30>)
    lcd->init();
 80a036c:	4620      	mov	r0, r4
    lcd = new LiquidCrystal_I2C(0x27, 16, 2);
 80a036e:	602c      	str	r4, [r5, #0]
    lcd->init();
 80a0370:	f000 fb24 	bl	80a09bc <_ZN17LiquidCrystal_I2C4initEv>
    lcd->backlight();
 80a0374:	6828      	ldr	r0, [r5, #0]
 80a0376:	f000 fa39 	bl	80a07ec <_ZN17LiquidCrystal_I2C9backlightEv>
    lcd->clear();
 80a037a:	6828      	ldr	r0, [r5, #0]
 80a037c:	f000 fa74 	bl	80a0868 <_ZN17LiquidCrystal_I2C5clearEv>

    return 0;
}
 80a0380:	2000      	movs	r0, #0
 80a0382:	bd38      	pop	{r3, r4, r5, pc}
 80a0384:	2000008c 	.word	0x2000008c

080a0388 <_Z10init_scalev>:

int init_scale()
{
 80a0388:	b508      	push	{r3, lr}
    scale.begin();                            // inicializa balanca
 80a038a:	480e      	ldr	r0, [pc, #56]	; (80a03c4 <_Z10init_scalev+0x3c>)
 80a038c:	f000 f964 	bl	80a0658 <_ZN8HX711ADC5beginEv>
    scale.set_scale(calibration_factor);      // ajusta fator de escala
 80a0390:	4b0d      	ldr	r3, [pc, #52]	; (80a03c8 <_Z10init_scalev+0x40>)
 80a0392:	480c      	ldr	r0, [pc, #48]	; (80a03c4 <_Z10init_scalev+0x3c>)
 80a0394:	6819      	ldr	r1, [r3, #0]
 80a0396:	f000 f9eb 	bl	80a0770 <_ZN8HX711ADC9set_scaleEf>
    //Executa a tara da balanca
    scale.tare();
 80a039a:	210a      	movs	r1, #10
 80a039c:	4809      	ldr	r0, [pc, #36]	; (80a03c4 <_Z10init_scalev+0x3c>)
 80a039e:	f000 f9e1 	bl	80a0764 <_ZN8HX711ADC4tareEh>
    lcd->setCursor(0 ,0 );
 80a03a2:	2200      	movs	r2, #0
 80a03a4:	4c09      	ldr	r4, [pc, #36]	; (80a03cc <_Z10init_scalev+0x44>)
 80a03a6:	4611      	mov	r1, r2
 80a03a8:	6820      	ldr	r0, [r4, #0]
 80a03aa:	f000 fa71 	bl	80a0890 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    lcd->print("Tara da balanca...");
 80a03ae:	4908      	ldr	r1, [pc, #32]	; (80a03d0 <_Z10init_scalev+0x48>)
 80a03b0:	6820      	ldr	r0, [r4, #0]
 80a03b2:	f000 fefb 	bl	80a11ac <_ZN5Print5printEPKc>
 80a03b6:	f000 fb33 	bl	80a0a20 <HAL_Timer_Get_Milli_Seconds>
    // aguarda 3s
    startTime = millis();
 80a03ba:	4b06      	ldr	r3, [pc, #24]	; (80a03d4 <_Z10init_scalev+0x4c>)
 80a03bc:	6018      	str	r0, [r3, #0]
 80a03be:	f000 fb2f 	bl	80a0a20 <HAL_Timer_Get_Milli_Seconds>
 80a03c2:	e7fc      	b.n	80a03be <_Z10init_scalev+0x36>
 80a03c4:	200000c8 	.word	0x200000c8
 80a03c8:	20000000 	.word	0x20000000
 80a03cc:	2000008c 	.word	0x2000008c
 80a03d0:	080a420a 	.word	0x080a420a
 80a03d4:	200000d8 	.word	0x200000d8

080a03d8 <setup>:
void setup() {
 80a03d8:	b508      	push	{r3, lr}
    Serial.begin(9600);     // inicializa depuração via monitor serial                          
 80a03da:	f002 f901 	bl	80a25e0 <_Z16_fetch_usbserialv>
 80a03de:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a03e2:	f002 f8df 	bl	80a25a4 <_ZN9USBSerial5beginEl>
    init_display();     // inicializa LCD
 80a03e6:	f7ff ffb5 	bl	80a0354 <_Z12init_displayv>
    init_scale();       // inicializa balanca
 80a03ea:	f7ff ffcd 	bl	80a0388 <_Z10init_scalev>

080a03ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a03ee:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80a03f0:	2614      	movs	r6, #20
 80a03f2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a03f6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a03f8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a03fc:	42ae      	cmp	r6, r5
 80a03fe:	d004      	beq.n	80a040a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 80a0400:	4628      	mov	r0, r5
 80a0402:	f000 fde7 	bl	80a0fd4 <_ZN6StringD1Ev>
 80a0406:	3514      	adds	r5, #20
 80a0408:	e7f8      	b.n	80a03fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80a040a:	6820      	ldr	r0, [r4, #0]
 80a040c:	f000 fcfe 	bl	80a0e0c <free>
    AllocatorT::free(data_);
}
 80a0410:	4620      	mov	r0, r4
 80a0412:	bd70      	pop	{r4, r5, r6, pc}

080a0414 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80a0414:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a0416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0418:	4604      	mov	r4, r0
 80a041a:	460d      	mov	r5, r1
 80a041c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a041e:	d916      	bls.n	80a044e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 80a0420:	4290      	cmp	r0, r2
 80a0422:	d215      	bcs.n	80a0450 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 80a0424:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 80a0428:	1a75      	subs	r5, r6, r1
 80a042a:	f1a1 0714 	sub.w	r7, r1, #20
 80a042e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a0430:	42b7      	cmp	r7, r6
 80a0432:	d01c      	beq.n	80a046e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 80a0434:	b12c      	cbz	r4, 80a0442 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 80a0436:	4631      	mov	r1, r6
 80a0438:	4620      	mov	r0, r4
 80a043a:	f000 fe45 	bl	80a10c8 <_ZN6StringC1EOS_>
 80a043e:	7c33      	ldrb	r3, [r6, #16]
 80a0440:	7423      	strb	r3, [r4, #16]
 80a0442:	4630      	mov	r0, r6
 80a0444:	f000 fdc6 	bl	80a0fd4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80a0448:	3e14      	subs	r6, #20
 80a044a:	3c14      	subs	r4, #20
 80a044c:	e7f0      	b.n	80a0430 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80a044e:	d00e      	beq.n	80a046e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 80a0450:	42b5      	cmp	r5, r6
 80a0452:	d00c      	beq.n	80a046e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 80a0454:	b12c      	cbz	r4, 80a0462 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 80a0456:	4629      	mov	r1, r5
 80a0458:	4620      	mov	r0, r4
 80a045a:	f000 fe35 	bl	80a10c8 <_ZN6StringC1EOS_>
 80a045e:	7c2b      	ldrb	r3, [r5, #16]
 80a0460:	7423      	strb	r3, [r4, #16]
 80a0462:	4628      	mov	r0, r5
 80a0464:	f000 fdb6 	bl	80a0fd4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80a0468:	3514      	adds	r5, #20
 80a046a:	3414      	adds	r4, #20
 80a046c:	e7f0      	b.n	80a0450 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 80a046e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 80a0470:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 80a0476:	e9c0 3300 	strd	r3, r3, [r0]
 80a047a:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a047c:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a047e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0480:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0482:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0484:	dd24      	ble.n	80a04d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 80a0486:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 80a048a:	fb08 f007 	mul.w	r0, r8, r7
 80a048e:	f000 fcb5 	bl	80a0dfc <malloc>
            if (!d) {
 80a0492:	4605      	mov	r5, r0
 80a0494:	b1e0      	cbz	r0, 80a04d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 80a0496:	e9d4 1200 	ldrd	r1, r2, [r4]
 80a049a:	fb08 1202 	mla	r2, r8, r2, r1
 80a049e:	f7ff ffb9 	bl	80a0414 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80a04a2:	6820      	ldr	r0, [r4, #0]
 80a04a4:	f000 fcb2 	bl	80a0e0c <free>
        data_ = d;
 80a04a8:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 80a04aa:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 80a04ac:	e9d6 7300 	ldrd	r7, r3, [r6]
 80a04b0:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 80a04b4:	45b8      	cmp	r8, r7
 80a04b6:	d009      	beq.n	80a04cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 80a04b8:	4639      	mov	r1, r7
 80a04ba:	4628      	mov	r0, r5
 80a04bc:	f000 fe1e 	bl	80a10fc <_ZN6StringC1ERKS_>
 80a04c0:	7c3b      	ldrb	r3, [r7, #16]
 80a04c2:	3514      	adds	r5, #20
 80a04c4:	f805 3c04 	strb.w	r3, [r5, #-4]
 80a04c8:	3714      	adds	r7, #20
 80a04ca:	e7f3      	b.n	80a04b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 80a04cc:	6873      	ldr	r3, [r6, #4]
 80a04ce:	6063      	str	r3, [r4, #4]
}
 80a04d0:	4620      	mov	r0, r4
 80a04d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a04d8 <_GLOBAL__sub_I_lcd>:
    lcd->print("GEPIC");
    lcd->setCursor(5,0);
    lcd->print("IoT Scale 1.0");
    delay(5000);
    config_display();
    return 0;
 80a04d8:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
 80a04da:	2400      	movs	r4, #0
 80a04dc:	b08c      	sub	sp, #48	; 0x30
HX711ADC scale(DT,SCK);
 80a04de:	2380      	movs	r3, #128	; 0x80
 80a04e0:	220d      	movs	r2, #13
 80a04e2:	210c      	movs	r1, #12
 80a04e4:	483b      	ldr	r0, [pc, #236]	; (80a05d4 <_GLOBAL__sub_I_lcd+0xfc>)
 80a04e6:	f000 f8a1 	bl	80a062c <_ZN8HX711ADCC1Ehhh>
 80a04ea:	4a3b      	ldr	r2, [pc, #236]	; (80a05d8 <_GLOBAL__sub_I_lcd+0x100>)
 80a04ec:	493b      	ldr	r1, [pc, #236]	; (80a05dc <_GLOBAL__sub_I_lcd+0x104>)
 80a04ee:	4839      	ldr	r0, [pc, #228]	; (80a05d4 <_GLOBAL__sub_I_lcd+0xfc>)
 80a04f0:	f002 fd68 	bl	80a2fc4 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
 80a04f4:	2100      	movs	r1, #0
 80a04f6:	2001      	movs	r0, #1
 80a04f8:	f000 fbf4 	bl	80a0ce4 <system_thread_set_state>
 80a04fc:	4d38      	ldr	r5, [pc, #224]	; (80a05e0 <_GLOBAL__sub_I_lcd+0x108>)
    SleepResult() {}
 80a04fe:	4b39      	ldr	r3, [pc, #228]	; (80a05e4 <_GLOBAL__sub_I_lcd+0x10c>)
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0500:	2002      	movs	r0, #2
    SleepResult() {}
 80a0502:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
 80a0504:	602c      	str	r4, [r5, #0]
 80a0506:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
 80a0508:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
 80a050a:	f000 fbdb 	bl	80a0cc4 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
 80a050e:	4a32      	ldr	r2, [pc, #200]	; (80a05d8 <_GLOBAL__sub_I_lcd+0x100>)
 80a0510:	4935      	ldr	r1, [pc, #212]	; (80a05e8 <_GLOBAL__sub_I_lcd+0x110>)
 80a0512:	4628      	mov	r0, r5
 80a0514:	f002 fd56 	bl	80a2fc4 <__aeabi_atexit>
        capacity_(0) {
 80a0518:	e9cd 4400 	strd	r4, r4, [sp]
 80a051c:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial1, level, filters) {
 80a051e:	f002 f921 	bl	80a2764 <_Z22__fetch_global_Serial1v>
 80a0522:	4606      	mov	r6, r0
 80a0524:	4669      	mov	r1, sp
 80a0526:	a803      	add	r0, sp, #12
 80a0528:	f7ff ffa2 	bl	80a0470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 80a052c:	a903      	add	r1, sp, #12
 80a052e:	a806      	add	r0, sp, #24
        filter_(level, filters) {
 80a0530:	4d2e      	ldr	r5, [pc, #184]	; (80a05ec <_GLOBAL__sub_I_lcd+0x114>)
        stream_(&stream) {
 80a0532:	f7ff ff9d 	bl	80a0470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 80a0536:	4b2e      	ldr	r3, [pc, #184]	; (80a05f0 <_GLOBAL__sub_I_lcd+0x118>)
 80a0538:	a906      	add	r1, sp, #24
 80a053a:	602b      	str	r3, [r5, #0]
 80a053c:	a809      	add	r0, sp, #36	; 0x24
 80a053e:	f7ff ff97 	bl	80a0470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a0542:	aa09      	add	r2, sp, #36	; 0x24
 80a0544:	211e      	movs	r1, #30
 80a0546:	1d28      	adds	r0, r5, #4
 80a0548:	f001 fb6c 	bl	80a1c24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a054c:	a809      	add	r0, sp, #36	; 0x24
 80a054e:	f7ff ff4e 	bl	80a03ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 80a0552:	a806      	add	r0, sp, #24
 80a0554:	f7ff ff4b 	bl	80a03ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0558:	4b26      	ldr	r3, [pc, #152]	; (80a05f4 <_GLOBAL__sub_I_lcd+0x11c>)
 80a055a:	622e      	str	r6, [r5, #32]
 80a055c:	602b      	str	r3, [r5, #0]
 80a055e:	a803      	add	r0, sp, #12
 80a0560:	f7ff ff45 	bl	80a03ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0564:	4b24      	ldr	r3, [pc, #144]	; (80a05f8 <_GLOBAL__sub_I_lcd+0x120>)
 80a0566:	602b      	str	r3, [r5, #0]
        Serial1.begin(baud);
 80a0568:	f002 f8fc 	bl	80a2764 <_Z22__fetch_global_Serial1v>
 80a056c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0570:	f002 f8f2 	bl	80a2758 <_ZN11USARTSerial5beginEm>
        LogManager::instance()->addHandler(this);
 80a0574:	f000 ffd2 	bl	80a151c <_ZN5spark10LogManager8instanceEv>
 80a0578:	4629      	mov	r1, r5
 80a057a:	f001 fae6 	bl	80a1b4a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
Serial1LogHandler logHandler(9600);
 80a057e:	4668      	mov	r0, sp
 80a0580:	f7ff ff35 	bl	80a03ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0584:	4a14      	ldr	r2, [pc, #80]	; (80a05d8 <_GLOBAL__sub_I_lcd+0x100>)
 80a0586:	491d      	ldr	r1, [pc, #116]	; (80a05fc <_GLOBAL__sub_I_lcd+0x124>)
 80a0588:	4628      	mov	r0, r5
 80a058a:	f002 fd1b 	bl	80a2fc4 <__aeabi_atexit>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a058e:	2020      	movs	r0, #32
 80a0590:	f7ff fd81 	bl	80a0096 <_Znwj>
	  auto __pi = ::new (__mem)
 80a0594:	4603      	mov	r3, r0
 80a0596:	b150      	cbz	r0, 80a05ae <_GLOBAL__sub_I_lcd+0xd6>
	: _M_impl(__a)
 80a0598:	4a19      	ldr	r2, [pc, #100]	; (80a0600 <_GLOBAL__sub_I_lcd+0x128>)
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a059a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80a059e:	6002      	str	r2, [r0, #0]
      : _M_use_count(1), _M_weak_count(1) { }
 80a05a0:	2201      	movs	r2, #1
 80a05a2:	e9c0 2201 	strd	r2, r2, [r0, #4]
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a05a6:	f240 1201 	movw	r2, #257	; 0x101
            result_(std::move(result)) {
 80a05aa:	7604      	strb	r4, [r0, #24]
 80a05ac:	8182      	strh	r2, [r0, #12]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a05ae:	4815      	ldr	r0, [pc, #84]	; (80a0604 <_GLOBAL__sub_I_lcd+0x12c>)
 80a05b0:	f103 020c 	add.w	r2, r3, #12
	_M_pi = __tmp;
 80a05b4:	e9c0 2300 	strd	r2, r3, [r0]
particle::Future<bool> publishFuture;
 80a05b8:	4913      	ldr	r1, [pc, #76]	; (80a0608 <_GLOBAL__sub_I_lcd+0x130>)
 80a05ba:	4a07      	ldr	r2, [pc, #28]	; (80a05d8 <_GLOBAL__sub_I_lcd+0x100>)
 80a05bc:	f002 fd02 	bl	80a2fc4 <__aeabi_atexit>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a05c0:	4a12      	ldr	r2, [pc, #72]	; (80a060c <_GLOBAL__sub_I_lcd+0x134>)
 80a05c2:	4913      	ldr	r1, [pc, #76]	; (80a0610 <_GLOBAL__sub_I_lcd+0x138>)
 80a05c4:	4813      	ldr	r0, [pc, #76]	; (80a0614 <_GLOBAL__sub_I_lcd+0x13c>)
 80a05c6:	f001 ff29 	bl	80a241c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
bool success = Particle.function("tareScale", tareScale);        
 80a05ca:	4b13      	ldr	r3, [pc, #76]	; (80a0618 <_GLOBAL__sub_I_lcd+0x140>)
 80a05cc:	7018      	strb	r0, [r3, #0]
    return 0;
 80a05ce:	b00c      	add	sp, #48	; 0x30
 80a05d0:	bd70      	pop	{r4, r5, r6, pc}
 80a05d2:	bf00      	nop
 80a05d4:	200000c8 	.word	0x200000c8
 80a05d8:	20000078 	.word	0x20000078
 80a05dc:	080a061d 	.word	0x080a061d
 80a05e0:	2000007c 	.word	0x2000007c
 80a05e4:	ffff0000 	.word	0xffff0000
 80a05e8:	080a012d 	.word	0x080a012d
 80a05ec:	20000090 	.word	0x20000090
 80a05f0:	080a4230 	.word	0x080a4230
 80a05f4:	080a4350 	.word	0x080a4350
 80a05f8:	080a4248 	.word	0x080a4248
 80a05fc:	080a013d 	.word	0x080a013d
 80a0600:	080a4260 	.word	0x080a4260
 80a0604:	200000c0 	.word	0x200000c0
 80a0608:	080a0185 	.word	0x080a0185
 80a060c:	080a421d 	.word	0x080a421d
 80a0610:	080a02d1 	.word	0x080a02d1
 80a0614:	080a23f1 	.word	0x080a23f1
 80a0618:	200000e0 	.word	0x200000e0

080a061c <_ZN8HX711ADCD1Ev>:

HX711ADC::HX711ADC() {
}

HX711ADC::~HX711ADC() {
}
 80a061c:	4770      	bx	lr

080a061e <_ZN8HX711ADCD0Ev>:
HX711ADC::~HX711ADC() {
 80a061e:	b510      	push	{r4, lr}
 80a0620:	4604      	mov	r4, r0
}
 80a0622:	2110      	movs	r1, #16
 80a0624:	f002 fcd3 	bl	80a2fce <_ZdlPvj>
 80a0628:	4620      	mov	r0, r4
 80a062a:	bd10      	pop	{r4, pc}

080a062c <_ZN8HX711ADCC1Ehhh>:
  PD_SCK(pd_sck), DOUT(dout) {
 80a062c:	7102      	strb	r2, [r0, #4]
 80a062e:	2200      	movs	r2, #0
 80a0630:	6082      	str	r2, [r0, #8]
 80a0632:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
HX711ADC::HX711ADC(byte dout, byte pd_sck, byte gain) :
 80a0636:	b510      	push	{r4, lr}
  PD_SCK(pd_sck), DOUT(dout) {
 80a0638:	4c06      	ldr	r4, [pc, #24]	; (80a0654 <_ZN8HX711ADCC1Ehhh+0x28>)
	switch (gain) {
 80a063a:	2b20      	cmp	r3, #32
  PD_SCK(pd_sck), DOUT(dout) {
 80a063c:	6004      	str	r4, [r0, #0]
 80a063e:	7141      	strb	r1, [r0, #5]
 80a0640:	60c2      	str	r2, [r0, #12]
	switch (gain) {
 80a0642:	d005      	beq.n	80a0650 <_ZN8HX711ADCC1Ehhh+0x24>
 80a0644:	2b40      	cmp	r3, #64	; 0x40
			GAIN = 1;
 80a0646:	bf14      	ite	ne
 80a0648:	2301      	movne	r3, #1
			GAIN = 3;
 80a064a:	2303      	moveq	r3, #3
			GAIN = 2;
 80a064c:	7183      	strb	r3, [r0, #6]
}
 80a064e:	bd10      	pop	{r4, pc}
			GAIN = 2;
 80a0650:	2302      	movs	r3, #2
 80a0652:	e7fb      	b.n	80a064c <_ZN8HX711ADCC1Ehhh+0x20>
 80a0654:	080a4284 	.word	0x080a4284

080a0658 <_ZN8HX711ADC5beginEv>:

void HX711ADC::begin() {
 80a0658:	b510      	push	{r4, lr}
 80a065a:	4604      	mov	r4, r0
	pinMode(PD_SCK, OUTPUT);
 80a065c:	2101      	movs	r1, #1
 80a065e:	7900      	ldrb	r0, [r0, #4]
 80a0660:	f002 fbf6 	bl	80a2e50 <pinMode>
	pinMode(DOUT, INPUT);
 80a0664:	7960      	ldrb	r0, [r4, #5]
 80a0666:	2100      	movs	r1, #0
 80a0668:	f002 fbf2 	bl	80a2e50 <pinMode>
	digitalWrite(PD_SCK, LOW);
 80a066c:	7920      	ldrb	r0, [r4, #4]
 80a066e:	2100      	movs	r1, #0
}
 80a0670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(PD_SCK, LOW);
 80a0674:	f002 bbfd 	b.w	80a2e72 <digitalWrite>

080a0678 <_ZN8HX711ADC4readEx>:

	digitalWrite(PD_SCK, LOW);
	//read();
}

long HX711ADC::read(time_t timeout) {
 80a0678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a067c:	4604      	mov	r4, r0
 80a067e:	4616      	mov	r6, r2
 80a0680:	461f      	mov	r7, r3
 80a0682:	f000 f9cd 	bl	80a0a20 <HAL_Timer_Get_Milli_Seconds>
	// wait for the chip to become ready
	for (time_t ms=millis(); !is_ready() && (millis() - ms < timeout);) {
 80a0686:	f04f 0b00 	mov.w	fp, #0
 80a068a:	4605      	mov	r5, r0
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a068c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80a071c <_ZN8HX711ADC4readEx+0xa4>
		void begin(byte dout, byte pd_sck, byte gain = 128);

		// check if HX711 is ready
		// from the datasheet: When output data is not ready for retrieval, digital output pin DOUT is high. Serial clock
		// input PD_SCK should be low. When DOUT goes to low, it indicates data is ready for retrieval.
		inline bool is_ready() { return !digitalRead(DOUT); };
 80a0690:	7960      	ldrb	r0, [r4, #5]
 80a0692:	f002 fc07 	bl	80a2ea4 <digitalRead>
 80a0696:	b180      	cbz	r0, 80a06ba <_ZN8HX711ADC4readEx+0x42>
 80a0698:	f000 f9c2 	bl	80a0a20 <HAL_Timer_Get_Milli_Seconds>
 80a069c:	ebb0 0805 	subs.w	r8, r0, r5
 80a06a0:	eb6b 094b 	sbc.w	r9, fp, fp, lsl #1
 80a06a4:	45b0      	cmp	r8, r6
 80a06a6:	eb79 0307 	sbcs.w	r3, r9, r7
 80a06aa:	da06      	bge.n	80a06ba <_ZN8HX711ADC4readEx+0x42>
		return HAL_Timer_Get_Milli_Seconds();
 80a06ac:	f000 f9b8 	bl	80a0a20 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 80a06b0:	f8ca 0000 	str.w	r0, [sl]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a06b4:	f000 fb8a 	bl	80a0dcc <spark_process>
    }
 80a06b8:	e7ea      	b.n	80a0690 <_ZN8HX711ADC4readEx+0x18>
 80a06ba:	7960      	ldrb	r0, [r4, #5]
 80a06bc:	f002 fbf2 	bl	80a2ea4 <digitalRead>
    // prevent resets of ESP8266 (Watchdog Issue)
    // or keeps cloud housekeeping running on Particle devices
		yield();
	}
  // still not ready after timeout periode, report error Not-A-Number
  if (!is_ready()) return NAN;
 80a06c0:	4606      	mov	r6, r0
 80a06c2:	bb48      	cbnz	r0, 80a0718 <_ZN8HX711ADC4readEx+0xa0>
	unsigned long value = 0;
	uint8_t data[3] = { 0 };
	uint8_t filler = 0x00;

	// pulse the clock pin 24 times to read the data
	data[2] = shiftIn(DOUT, PD_SCK, MSBFIRST);
 80a06c4:	2201      	movs	r2, #1
 80a06c6:	7921      	ldrb	r1, [r4, #4]
 80a06c8:	7960      	ldrb	r0, [r4, #5]
 80a06ca:	f002 fbfe 	bl	80a2eca <shiftIn>
	data[1] = shiftIn(DOUT, PD_SCK, MSBFIRST);
 80a06ce:	2201      	movs	r2, #1
 80a06d0:	7921      	ldrb	r1, [r4, #4]
	data[2] = shiftIn(DOUT, PD_SCK, MSBFIRST);
 80a06d2:	4607      	mov	r7, r0
	data[1] = shiftIn(DOUT, PD_SCK, MSBFIRST);
 80a06d4:	7960      	ldrb	r0, [r4, #5]
 80a06d6:	f002 fbf8 	bl	80a2eca <shiftIn>
	data[0] = shiftIn(DOUT, PD_SCK, MSBFIRST);
 80a06da:	2201      	movs	r2, #1
	data[1] = shiftIn(DOUT, PD_SCK, MSBFIRST);
 80a06dc:	4605      	mov	r5, r0
	data[0] = shiftIn(DOUT, PD_SCK, MSBFIRST);
 80a06de:	7921      	ldrb	r1, [r4, #4]
 80a06e0:	7960      	ldrb	r0, [r4, #5]
 80a06e2:	f002 fbf2 	bl	80a2eca <shiftIn>
 80a06e6:	4680      	mov	r8, r0

	// set the channel and the gain factor for the next reading using the clock pin
	for (unsigned int i = 0; i < GAIN; i++) {
 80a06e8:	79a3      	ldrb	r3, [r4, #6]
 80a06ea:	42b3      	cmp	r3, r6
 80a06ec:	d909      	bls.n	80a0702 <_ZN8HX711ADC4readEx+0x8a>
		digitalWrite(PD_SCK, HIGH);
 80a06ee:	2101      	movs	r1, #1
 80a06f0:	7920      	ldrb	r0, [r4, #4]
 80a06f2:	f002 fbbe 	bl	80a2e72 <digitalWrite>
		digitalWrite(PD_SCK, LOW);
 80a06f6:	2100      	movs	r1, #0
 80a06f8:	7920      	ldrb	r0, [r4, #4]
 80a06fa:	f002 fbba 	bl	80a2e72 <digitalWrite>
	for (unsigned int i = 0; i < GAIN; i++) {
 80a06fe:	3601      	adds	r6, #1
 80a0700:	e7f2      	b.n	80a06e8 <_ZN8HX711ADC4readEx+0x70>
	}

	// Construct a 32-bit signed integer
	value = static_cast<unsigned long>(filler)  << 24
		  | static_cast<unsigned long>(data[2]) << 16
		  | static_cast<unsigned long>(data[1]) << 8
 80a0702:	022d      	lsls	r5, r5, #8
	value = static_cast<unsigned long>(filler)  << 24
 80a0704:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80a0708:	ea45 0508 	orr.w	r5, r5, r8
	if (data[2] & 0x80) {
 80a070c:	f347 10c0 	sbfx	r0, r7, #7, #1
	value = static_cast<unsigned long>(filler)  << 24
 80a0710:	ea45 6000 	orr.w	r0, r5, r0, lsl #24
		  | static_cast<unsigned long>(data[0]) ;

	return static_cast<long>(value);
}
 80a0714:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!is_ready()) return NAN;
 80a0718:	2000      	movs	r0, #0
 80a071a:	e7fb      	b.n	80a0714 <_ZN8HX711ADC4readEx+0x9c>
 80a071c:	200005bc 	.word	0x200005bc

080a0720 <_ZN8HX711ADC12read_averageEh>:

long HX711ADC::read_average(byte times) {
 80a0720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0724:	4607      	mov	r7, r0
  if (times <= 0) return NAN;
 80a0726:	460c      	mov	r4, r1
 80a0728:	b1b9      	cbz	r1, 80a075a <_ZN8HX711ADC12read_averageEh+0x3a>
 80a072a:	2500      	movs	r5, #0
	long sum = 0;
 80a072c:	462e      	mov	r6, r5
 80a072e:	f8df 8030 	ldr.w	r8, [pc, #48]	; 80a0760 <_ZN8HX711ADC12read_averageEh+0x40>
	for (byte i = 0; i < times; i++) {
		sum += read();
 80a0732:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0736:	2300      	movs	r3, #0
 80a0738:	4638      	mov	r0, r7
 80a073a:	f7ff ff9d 	bl	80a0678 <_ZN8HX711ADC4readEx>
 80a073e:	4406      	add	r6, r0
		return HAL_Timer_Get_Milli_Seconds();
 80a0740:	f000 f96e 	bl	80a0a20 <HAL_Timer_Get_Milli_Seconds>
 80a0744:	3501      	adds	r5, #1
		last_checkin = current_time();
 80a0746:	f8c8 0000 	str.w	r0, [r8]
    		spark_process();
 80a074a:	f000 fb3f 	bl	80a0dcc <spark_process>
	for (byte i = 0; i < times; i++) {
 80a074e:	42a5      	cmp	r5, r4
 80a0750:	d1ef      	bne.n	80a0732 <_ZN8HX711ADC12read_averageEh+0x12>
		yield();
	}
	return sum / times;
 80a0752:	fb96 f0f5 	sdiv	r0, r6, r5
}
 80a0756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (times <= 0) return NAN;
 80a075a:	4608      	mov	r0, r1
 80a075c:	e7fb      	b.n	80a0756 <_ZN8HX711ADC12read_averageEh+0x36>
 80a075e:	bf00      	nop
 80a0760:	200005bc 	.word	0x200005bc

080a0764 <_ZN8HX711ADC4tareEh>:

float HX711ADC::get_units(byte times) {
	return get_value(times) / SCALE;
}

void HX711ADC::tare(byte times) {
 80a0764:	b510      	push	{r4, lr}
 80a0766:	4604      	mov	r4, r0
	double sum = read_average(times);
 80a0768:	f7ff ffda 	bl	80a0720 <_ZN8HX711ADC12read_averageEh>
float HX711ADC::get_scale() {
	return SCALE;
}

void HX711ADC::set_offset(long offset) {
	OFFSET = offset;
 80a076c:	60a0      	str	r0, [r4, #8]
}
 80a076e:	bd10      	pop	{r4, pc}

080a0770 <_ZN8HX711ADC9set_scaleEf>:
void HX711ADC::set_scale(float scale) {
 80a0770:	b538      	push	{r3, r4, r5, lr}
 80a0772:	460c      	mov	r4, r1
 80a0774:	4605      	mov	r5, r0
  if (scale) {
 80a0776:	2100      	movs	r1, #0
 80a0778:	4620      	mov	r0, r4
 80a077a:	f003 f9fd 	bl	80a3b78 <__aeabi_fcmpeq>
 80a077e:	b108      	cbz	r0, 80a0784 <_ZN8HX711ADC9set_scaleEf+0x14>
    SCALE = 1;
 80a0780:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 80a0784:	60ec      	str	r4, [r5, #12]
}
 80a0786:	bd38      	pop	{r3, r4, r5, pc}

080a0788 <_ZN17LiquidCrystal_I2CD1Ev>:

//#define En B00000100  // Enable bit
//#define Rw B00000010  // Read/Write bit
//#define Rs B00000001  // Register select bit

class LiquidCrystal_I2C : public Print {
 80a0788:	4770      	bx	lr

080a078a <_ZN17LiquidCrystal_I2CD0Ev>:
 80a078a:	b510      	push	{r4, lr}
 80a078c:	4604      	mov	r4, r0
 80a078e:	2110      	movs	r1, #16
 80a0790:	f002 fc1d 	bl	80a2fce <_ZdlPvj>
 80a0794:	4620      	mov	r0, r4
 80a0796:	bd10      	pop	{r4, pc}

080a0798 <_ZN17LiquidCrystal_I2CC1Ehhh>:
#include "application.h"

#include "LiquidCrystal_I2C_Spark.h"


LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr,uint8_t lcd_cols,uint8_t lcd_rows)
 80a0798:	b570      	push	{r4, r5, r6, lr}
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
 80a079a:	2500      	movs	r5, #0
 80a079c:	4e03      	ldr	r6, [pc, #12]	; (80a07ac <_ZN17LiquidCrystal_I2CC1Ehhh+0x14>)
 80a079e:	6045      	str	r5, [r0, #4]
 80a07a0:	6006      	str	r6, [r0, #0]
{
  _Addr = lcd_Addr;
 80a07a2:	7201      	strb	r1, [r0, #8]
  _cols = lcd_cols;
 80a07a4:	7342      	strb	r2, [r0, #13]
  _rows = lcd_rows;
 80a07a6:	7383      	strb	r3, [r0, #14]
  _backlightval = LCD_NOBACKLIGHT;
 80a07a8:	73c5      	strb	r5, [r0, #15]
}
 80a07aa:	bd70      	pop	{r4, r5, r6, pc}
 80a07ac:	080a4294 	.word	0x080a4294

080a07b0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
void LiquidCrystal_I2C::write4bits(uint8_t value) {
        expanderWrite(value);
        pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){
 80a07b0:	b538      	push	{r3, r4, r5, lr}
 80a07b2:	4604      	mov	r4, r0
 80a07b4:	460d      	mov	r5, r1
        Wire.beginTransmission(_Addr);
 80a07b6:	f002 fbdd 	bl	80a2f74 <_Z19__fetch_global_Wirev>
 80a07ba:	7a21      	ldrb	r1, [r4, #8]
 80a07bc:	f002 f846 	bl	80a284c <_ZN7TwoWire17beginTransmissionEh>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a07c0:	2002      	movs	r0, #2
 80a07c2:	f000 f925 	bl	80a0a10 <HAL_Delay_Microseconds>
        delayMicroseconds(2);
        Wire.write((int)(_data) | _backlightval);
 80a07c6:	f002 fbd5 	bl	80a2f74 <_Z19__fetch_global_Wirev>
 80a07ca:	7be1      	ldrb	r1, [r4, #15]
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a07cc:	6803      	ldr	r3, [r0, #0]
 80a07ce:	4329      	orrs	r1, r5
 80a07d0:	689b      	ldr	r3, [r3, #8]
 80a07d2:	4798      	blx	r3
 80a07d4:	2002      	movs	r0, #2
 80a07d6:	f000 f91b 	bl	80a0a10 <HAL_Delay_Microseconds>
        delayMicroseconds(2);
        Wire.endTransmission();
 80a07da:	f002 fbcb 	bl	80a2f74 <_Z19__fetch_global_Wirev>
 80a07de:	f002 f83d 	bl	80a285c <_ZN7TwoWire15endTransmissionEv>
        delayMicroseconds(2);
        }
 80a07e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a07e6:	2002      	movs	r0, #2
 80a07e8:	f000 b912 	b.w	80a0a10 <HAL_Delay_Microseconds>

080a07ec <_ZN17LiquidCrystal_I2C9backlightEv>:
        _backlightval=LCD_BACKLIGHT;
 80a07ec:	2308      	movs	r3, #8
        expanderWrite(0);
 80a07ee:	2100      	movs	r1, #0
        _backlightval=LCD_BACKLIGHT;
 80a07f0:	73c3      	strb	r3, [r0, #15]
        expanderWrite(0);
 80a07f2:	f7ff bfdd 	b.w	80a07b0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

080a07f6 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
 80a07f6:	b538      	push	{r3, r4, r5, lr}
 80a07f8:	4605      	mov	r5, r0
 80a07fa:	460c      	mov	r4, r1
        expanderWrite(_data | (1<<2));  // En high
 80a07fc:	f041 0104 	orr.w	r1, r1, #4
 80a0800:	f7ff ffd6 	bl	80a07b0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
 80a0804:	2001      	movs	r0, #1
 80a0806:	f000 f903 	bl	80a0a10 <HAL_Delay_Microseconds>
        delayMicroseconds(1);           // enable pulse must be >450ns

        expanderWrite(_data & ~(1<<2)); // En low
 80a080a:	4628      	mov	r0, r5
 80a080c:	f004 01fb 	and.w	r1, r4, #251	; 0xfb
 80a0810:	f7ff ffce 	bl	80a07b0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        delayMicroseconds(50);          // commands need > 37us to settle
}
 80a0814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0818:	2032      	movs	r0, #50	; 0x32
 80a081a:	f000 b8f9 	b.w	80a0a10 <HAL_Delay_Microseconds>

080a081e <_ZN17LiquidCrystal_I2C10write4bitsEh>:
void LiquidCrystal_I2C::write4bits(uint8_t value) {
 80a081e:	b538      	push	{r3, r4, r5, lr}
 80a0820:	4604      	mov	r4, r0
 80a0822:	460d      	mov	r5, r1
        expanderWrite(value);
 80a0824:	f7ff ffc4 	bl	80a07b0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        pulseEnable(value);
 80a0828:	4629      	mov	r1, r5
 80a082a:	4620      	mov	r0, r4
}
 80a082c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pulseEnable(value);
 80a0830:	f7ff bfe1 	b.w	80a07f6 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

080a0834 <_ZN17LiquidCrystal_I2C4sendEhh>:
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
 80a0834:	b570      	push	{r4, r5, r6, lr}
 80a0836:	460d      	mov	r5, r1
 80a0838:	4614      	mov	r4, r2
 80a083a:	4606      	mov	r6, r0
        uint8_t highnib=value&0xf0;
 80a083c:	f021 010f 	bic.w	r1, r1, #15
       write4bits((highnib)|mode);
 80a0840:	4311      	orrs	r1, r2
 80a0842:	f7ff ffec 	bl	80a081e <_ZN17LiquidCrystal_I2C10write4bitsEh>
        write4bits((lownib)|mode);
 80a0846:	ea44 1105 	orr.w	r1, r4, r5, lsl #4
 80a084a:	4630      	mov	r0, r6
}
 80a084c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        write4bits((lownib)|mode);
 80a0850:	b2c9      	uxtb	r1, r1
 80a0852:	f7ff bfe4 	b.w	80a081e <_ZN17LiquidCrystal_I2C10write4bitsEh>

080a0856 <_ZN17LiquidCrystal_I2C5writeEh>:
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
 80a0856:	b508      	push	{r3, lr}
        send(value, 1);
 80a0858:	2201      	movs	r2, #1
 80a085a:	f7ff ffeb 	bl	80a0834 <_ZN17LiquidCrystal_I2C4sendEhh>
}
 80a085e:	2000      	movs	r0, #0
 80a0860:	bd08      	pop	{r3, pc}

080a0862 <_ZN17LiquidCrystal_I2C7commandEh>:
        send(value, 0);
 80a0862:	2200      	movs	r2, #0
 80a0864:	f7ff bfe6 	b.w	80a0834 <_ZN17LiquidCrystal_I2C4sendEhh>

080a0868 <_ZN17LiquidCrystal_I2C5clearEv>:
void LiquidCrystal_I2C::clear(){
 80a0868:	b508      	push	{r3, lr}
        command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 80a086a:	2101      	movs	r1, #1
 80a086c:	f7ff fff9 	bl	80a0862 <_ZN17LiquidCrystal_I2C7commandEh>
}
 80a0870:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0874:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a0878:	f000 b8ca 	b.w	80a0a10 <HAL_Delay_Microseconds>

080a087c <_ZN17LiquidCrystal_I2C4homeEv>:
void LiquidCrystal_I2C::home(){
 80a087c:	b508      	push	{r3, lr}
        command(LCD_RETURNHOME);  // set cursor position to zero
 80a087e:	2102      	movs	r1, #2
 80a0880:	f7ff ffef 	bl	80a0862 <_ZN17LiquidCrystal_I2C7commandEh>
}
 80a0884:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0888:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a088c:	f000 b8c0 	b.w	80a0a10 <HAL_Delay_Microseconds>

080a0890 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
 80a0890:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a0892:	4606      	mov	r6, r0
 80a0894:	4615      	mov	r5, r2
 80a0896:	460c      	mov	r4, r1
        int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80a0898:	4b0c      	ldr	r3, [pc, #48]	; (80a08cc <_ZN17LiquidCrystal_I2C9setCursorEhh+0x3c>)
 80a089a:	f10d 0c10 	add.w	ip, sp, #16
 80a089e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80a08a0:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
        if ( row > _numlines ) {
 80a08a4:	7b32      	ldrb	r2, [r6, #12]
        command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80a08a6:	ab04      	add	r3, sp, #16
        if ( row > _numlines ) {
 80a08a8:	42aa      	cmp	r2, r5
                row = _numlines-1;    // we count rows starting w/0
 80a08aa:	bf3c      	itt	cc
 80a08ac:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80a08b0:	b2d5      	uxtbcc	r5, r2
        command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80a08b2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80a08b6:	f855 1c10 	ldr.w	r1, [r5, #-16]
 80a08ba:	4630      	mov	r0, r6
 80a08bc:	4421      	add	r1, r4
 80a08be:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80a08c2:	b2c9      	uxtb	r1, r1
 80a08c4:	f7ff ffcd 	bl	80a0862 <_ZN17LiquidCrystal_I2C7commandEh>
}
 80a08c8:	b004      	add	sp, #16
 80a08ca:	bd70      	pop	{r4, r5, r6, pc}
 80a08cc:	080a42a4 	.word	0x080a42a4

080a08d0 <_ZN17LiquidCrystal_I2C7displayEv>:
void LiquidCrystal_I2C::display() {
 80a08d0:	b508      	push	{r3, lr}
        _displaycontrol |= LCD_DISPLAYON;
 80a08d2:	7a81      	ldrb	r1, [r0, #10]
 80a08d4:	f041 0204 	orr.w	r2, r1, #4
 80a08d8:	7282      	strb	r2, [r0, #10]
        command(LCD_DISPLAYCONTROL | _displaycontrol);
 80a08da:	f041 010c 	orr.w	r1, r1, #12
 80a08de:	f7ff ffc0 	bl	80a0862 <_ZN17LiquidCrystal_I2C7commandEh>
}
 80a08e2:	bd08      	pop	{r3, pc}

080a08e4 <_ZN17LiquidCrystal_I2C5beginEhhh>:
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 80a08e4:	b510      	push	{r4, lr}
        if (lines > 1) {
 80a08e6:	2a01      	cmp	r2, #1
                _displayfunction |= LCD_2LINE;
 80a08e8:	bf88      	it	hi
 80a08ea:	7a41      	ldrbhi	r1, [r0, #9]
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 80a08ec:	4604      	mov	r4, r0
                _displayfunction |= LCD_2LINE;
 80a08ee:	bf84      	itt	hi
 80a08f0:	f041 0108 	orrhi.w	r1, r1, #8
 80a08f4:	7241      	strbhi	r1, [r0, #9]
        _numlines = lines;
 80a08f6:	7302      	strb	r2, [r0, #12]
        if ((dotsize != 0) && (lines == 1)) {
 80a08f8:	b12b      	cbz	r3, 80a0906 <_ZN17LiquidCrystal_I2C5beginEhhh+0x22>
 80a08fa:	2a01      	cmp	r2, #1
                _displayfunction |= LCD_5x10DOTS;
 80a08fc:	bf02      	ittt	eq
 80a08fe:	7a43      	ldrbeq	r3, [r0, #9]
 80a0900:	f043 0304 	orreq.w	r3, r3, #4
 80a0904:	7243      	strbeq	r3, [r0, #9]
        delay(50);
 80a0906:	2032      	movs	r0, #50	; 0x32
 80a0908:	f001 fcb4 	bl	80a2274 <delay>
        expanderWrite(_backlightval);   // reset expanderand turn backlight off (Bit 8 =1)
 80a090c:	7be1      	ldrb	r1, [r4, #15]
 80a090e:	4620      	mov	r0, r4
 80a0910:	f7ff ff4e 	bl	80a07b0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        delay(1000);
 80a0914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0918:	f001 fcac 	bl	80a2274 <delay>
   write4bits(0x03 << 4);
 80a091c:	2130      	movs	r1, #48	; 0x30
 80a091e:	4620      	mov	r0, r4
 80a0920:	f7ff ff7d 	bl	80a081e <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a0924:	f241 1094 	movw	r0, #4500	; 0x1194
 80a0928:	f000 f872 	bl	80a0a10 <HAL_Delay_Microseconds>
   write4bits(0x03 << 4);
 80a092c:	2130      	movs	r1, #48	; 0x30
 80a092e:	4620      	mov	r0, r4
 80a0930:	f7ff ff75 	bl	80a081e <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a0934:	f241 1094 	movw	r0, #4500	; 0x1194
 80a0938:	f000 f86a 	bl	80a0a10 <HAL_Delay_Microseconds>
   write4bits(0x03 << 4);
 80a093c:	2130      	movs	r1, #48	; 0x30
 80a093e:	4620      	mov	r0, r4
 80a0940:	f7ff ff6d 	bl	80a081e <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a0944:	2096      	movs	r0, #150	; 0x96
 80a0946:	f000 f863 	bl	80a0a10 <HAL_Delay_Microseconds>
   write4bits(0x02 << 4);
 80a094a:	4620      	mov	r0, r4
 80a094c:	2120      	movs	r1, #32
 80a094e:	f7ff ff66 	bl	80a081e <_ZN17LiquidCrystal_I2C10write4bitsEh>
        command(LCD_FUNCTIONSET | _displayfunction);
 80a0952:	7a61      	ldrb	r1, [r4, #9]
 80a0954:	4620      	mov	r0, r4
 80a0956:	f041 0120 	orr.w	r1, r1, #32
 80a095a:	f7ff ff82 	bl	80a0862 <_ZN17LiquidCrystal_I2C7commandEh>
        _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80a095e:	2304      	movs	r3, #4
        display();
 80a0960:	4620      	mov	r0, r4
        _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80a0962:	72a3      	strb	r3, [r4, #10]
        display();
 80a0964:	f7ff ffb4 	bl	80a08d0 <_ZN17LiquidCrystal_I2C7displayEv>
        clear();
 80a0968:	4620      	mov	r0, r4
 80a096a:	f7ff ff7d 	bl	80a0868 <_ZN17LiquidCrystal_I2C5clearEv>
        _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a096e:	2302      	movs	r3, #2
        command(LCD_ENTRYMODESET | _displaymode);
 80a0970:	4620      	mov	r0, r4
        _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a0972:	72e3      	strb	r3, [r4, #11]
        command(LCD_ENTRYMODESET | _displaymode);
 80a0974:	2106      	movs	r1, #6
 80a0976:	f7ff ff74 	bl	80a0862 <_ZN17LiquidCrystal_I2C7commandEh>
        home();
 80a097a:	4620      	mov	r0, r4
}
 80a097c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        home();
 80a0980:	f7ff bf7c 	b.w	80a087c <_ZN17LiquidCrystal_I2C4homeEv>

080a0984 <_ZN17LiquidCrystal_I2C9init_privEv>:
{
 80a0984:	b510      	push	{r4, lr}
 80a0986:	4604      	mov	r4, r0
        Wire.setSpeed(CLOCK_SPEED_100KHZ);
 80a0988:	f002 faf4 	bl	80a2f74 <_Z19__fetch_global_Wirev>
 80a098c:	490a      	ldr	r1, [pc, #40]	; (80a09b8 <_ZN17LiquidCrystal_I2C9init_privEv+0x34>)
 80a098e:	f001 ff4f 	bl	80a2830 <_ZN7TwoWire8setSpeedEm>
        Wire.stretchClock(true);
 80a0992:	f002 faef 	bl	80a2f74 <_Z19__fetch_global_Wirev>
 80a0996:	2101      	movs	r1, #1
 80a0998:	f001 ff4e 	bl	80a2838 <_ZN7TwoWire12stretchClockEb>
        Wire.begin();
 80a099c:	f002 faea 	bl	80a2f74 <_Z19__fetch_global_Wirev>
 80a09a0:	f001 ff4e 	bl	80a2840 <_ZN7TwoWire5beginEv>
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80a09a4:	2300      	movs	r3, #0
        begin(_cols, _rows);
 80a09a6:	4620      	mov	r0, r4
 80a09a8:	7ba2      	ldrb	r2, [r4, #14]
 80a09aa:	7b61      	ldrb	r1, [r4, #13]
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80a09ac:	7263      	strb	r3, [r4, #9]
}
 80a09ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        begin(_cols, _rows);
 80a09b2:	f7ff bf97 	b.w	80a08e4 <_ZN17LiquidCrystal_I2C5beginEhhh>
 80a09b6:	bf00      	nop
 80a09b8:	000186a0 	.word	0x000186a0

080a09bc <_ZN17LiquidCrystal_I2C4initEv>:
        init_priv();
 80a09bc:	f7ff bfe2 	b.w	80a0984 <_ZN17LiquidCrystal_I2C9init_privEv>

080a09c0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a09c0:	b508      	push	{r3, lr}
 80a09c2:	4b02      	ldr	r3, [pc, #8]	; (80a09cc <HAL_Pin_Mode+0xc>)
 80a09c4:	681b      	ldr	r3, [r3, #0]
 80a09c6:	689b      	ldr	r3, [r3, #8]
 80a09c8:	9301      	str	r3, [sp, #4]
 80a09ca:	bd08      	pop	{r3, pc}
 80a09cc:	080601b0 	.word	0x080601b0

080a09d0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a09d0:	b508      	push	{r3, lr}
 80a09d2:	4b02      	ldr	r3, [pc, #8]	; (80a09dc <HAL_Get_Pin_Mode+0xc>)
 80a09d4:	681b      	ldr	r3, [r3, #0]
 80a09d6:	68db      	ldr	r3, [r3, #12]
 80a09d8:	9301      	str	r3, [sp, #4]
 80a09da:	bd08      	pop	{r3, pc}
 80a09dc:	080601b0 	.word	0x080601b0

080a09e0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a09e0:	b508      	push	{r3, lr}
 80a09e2:	4b02      	ldr	r3, [pc, #8]	; (80a09ec <HAL_GPIO_Write+0xc>)
 80a09e4:	681b      	ldr	r3, [r3, #0]
 80a09e6:	691b      	ldr	r3, [r3, #16]
 80a09e8:	9301      	str	r3, [sp, #4]
 80a09ea:	bd08      	pop	{r3, pc}
 80a09ec:	080601b0 	.word	0x080601b0

080a09f0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a09f0:	b508      	push	{r3, lr}
 80a09f2:	4b02      	ldr	r3, [pc, #8]	; (80a09fc <HAL_GPIO_Read+0xc>)
 80a09f4:	681b      	ldr	r3, [r3, #0]
 80a09f6:	695b      	ldr	r3, [r3, #20]
 80a09f8:	9301      	str	r3, [sp, #4]
 80a09fa:	bd08      	pop	{r3, pc}
 80a09fc:	080601b0 	.word	0x080601b0

080a0a00 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0a00:	b508      	push	{r3, lr}
 80a0a02:	4b02      	ldr	r3, [pc, #8]	; (80a0a0c <HAL_RNG_GetRandomNumber+0xc>)
 80a0a04:	681b      	ldr	r3, [r3, #0]
 80a0a06:	685b      	ldr	r3, [r3, #4]
 80a0a08:	9301      	str	r3, [sp, #4]
 80a0a0a:	bd08      	pop	{r3, pc}
 80a0a0c:	0806019c 	.word	0x0806019c

080a0a10 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0a10:	b508      	push	{r3, lr}
 80a0a12:	4b02      	ldr	r3, [pc, #8]	; (80a0a1c <HAL_Delay_Microseconds+0xc>)
 80a0a14:	681b      	ldr	r3, [r3, #0]
 80a0a16:	68db      	ldr	r3, [r3, #12]
 80a0a18:	9301      	str	r3, [sp, #4]
 80a0a1a:	bd08      	pop	{r3, pc}
 80a0a1c:	0806019c 	.word	0x0806019c

080a0a20 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0a20:	b508      	push	{r3, lr}
 80a0a22:	4b02      	ldr	r3, [pc, #8]	; (80a0a2c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0a24:	681b      	ldr	r3, [r3, #0]
 80a0a26:	695b      	ldr	r3, [r3, #20]
 80a0a28:	9301      	str	r3, [sp, #4]
 80a0a2a:	bd08      	pop	{r3, pc}
 80a0a2c:	0806019c 	.word	0x0806019c

080a0a30 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0a30:	b508      	push	{r3, lr}
 80a0a32:	4b02      	ldr	r3, [pc, #8]	; (80a0a3c <os_mutex_recursive_create+0xc>)
 80a0a34:	681b      	ldr	r3, [r3, #0]
 80a0a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0a38:	9301      	str	r3, [sp, #4]
 80a0a3a:	bd08      	pop	{r3, pc}
 80a0a3c:	080601d0 	.word	0x080601d0

080a0a40 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0a40:	b508      	push	{r3, lr}
 80a0a42:	4b02      	ldr	r3, [pc, #8]	; (80a0a4c <os_mutex_recursive_destroy+0xc>)
 80a0a44:	681b      	ldr	r3, [r3, #0]
 80a0a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0a48:	9301      	str	r3, [sp, #4]
 80a0a4a:	bd08      	pop	{r3, pc}
 80a0a4c:	080601d0 	.word	0x080601d0

080a0a50 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a0a50:	b508      	push	{r3, lr}
 80a0a52:	4b02      	ldr	r3, [pc, #8]	; (80a0a5c <os_mutex_recursive_lock+0xc>)
 80a0a54:	681b      	ldr	r3, [r3, #0]
 80a0a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0a58:	9301      	str	r3, [sp, #4]
 80a0a5a:	bd08      	pop	{r3, pc}
 80a0a5c:	080601d0 	.word	0x080601d0

080a0a60 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a0a60:	b508      	push	{r3, lr}
 80a0a62:	4b02      	ldr	r3, [pc, #8]	; (80a0a6c <os_mutex_recursive_unlock+0xc>)
 80a0a64:	681b      	ldr	r3, [r3, #0]
 80a0a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0a68:	9301      	str	r3, [sp, #4]
 80a0a6a:	bd08      	pop	{r3, pc}
 80a0a6c:	080601d0 	.word	0x080601d0

080a0a70 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0a70:	b508      	push	{r3, lr}
 80a0a72:	4b02      	ldr	r3, [pc, #8]	; (80a0a7c <hal_usart_init+0xc>)
 80a0a74:	681b      	ldr	r3, [r3, #0]
 80a0a76:	699b      	ldr	r3, [r3, #24]
 80a0a78:	9301      	str	r3, [sp, #4]
 80a0a7a:	bd08      	pop	{r3, pc}
 80a0a7c:	080601c4 	.word	0x080601c4

080a0a80 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 80a0a80:	b508      	push	{r3, lr}
 80a0a82:	4b02      	ldr	r3, [pc, #8]	; (80a0a8c <hal_usart_end+0xc>)
 80a0a84:	681b      	ldr	r3, [r3, #0]
 80a0a86:	6a1b      	ldr	r3, [r3, #32]
 80a0a88:	9301      	str	r3, [sp, #4]
 80a0a8a:	bd08      	pop	{r3, pc}
 80a0a8c:	080601c4 	.word	0x080601c4

080a0a90 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0a90:	b508      	push	{r3, lr}
 80a0a92:	4b02      	ldr	r3, [pc, #8]	; (80a0a9c <hal_usart_write+0xc>)
 80a0a94:	681b      	ldr	r3, [r3, #0]
 80a0a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0a98:	9301      	str	r3, [sp, #4]
 80a0a9a:	bd08      	pop	{r3, pc}
 80a0a9c:	080601c4 	.word	0x080601c4

080a0aa0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0aa0:	b508      	push	{r3, lr}
 80a0aa2:	4b02      	ldr	r3, [pc, #8]	; (80a0aac <hal_usart_available+0xc>)
 80a0aa4:	681b      	ldr	r3, [r3, #0]
 80a0aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0aa8:	9301      	str	r3, [sp, #4]
 80a0aaa:	bd08      	pop	{r3, pc}
 80a0aac:	080601c4 	.word	0x080601c4

080a0ab0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0ab0:	b508      	push	{r3, lr}
 80a0ab2:	4b02      	ldr	r3, [pc, #8]	; (80a0abc <hal_usart_read+0xc>)
 80a0ab4:	681b      	ldr	r3, [r3, #0]
 80a0ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0ab8:	9301      	str	r3, [sp, #4]
 80a0aba:	bd08      	pop	{r3, pc}
 80a0abc:	080601c4 	.word	0x080601c4

080a0ac0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0ac0:	b508      	push	{r3, lr}
 80a0ac2:	4b02      	ldr	r3, [pc, #8]	; (80a0acc <hal_usart_peek+0xc>)
 80a0ac4:	681b      	ldr	r3, [r3, #0]
 80a0ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0ac8:	9301      	str	r3, [sp, #4]
 80a0aca:	bd08      	pop	{r3, pc}
 80a0acc:	080601c4 	.word	0x080601c4

080a0ad0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0ad0:	b508      	push	{r3, lr}
 80a0ad2:	4b02      	ldr	r3, [pc, #8]	; (80a0adc <hal_usart_flush+0xc>)
 80a0ad4:	681b      	ldr	r3, [r3, #0]
 80a0ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0ad8:	9301      	str	r3, [sp, #4]
 80a0ada:	bd08      	pop	{r3, pc}
 80a0adc:	080601c4 	.word	0x080601c4

080a0ae0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0ae0:	b508      	push	{r3, lr}
 80a0ae2:	4b02      	ldr	r3, [pc, #8]	; (80a0aec <hal_usart_is_enabled+0xc>)
 80a0ae4:	681b      	ldr	r3, [r3, #0]
 80a0ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0ae8:	9301      	str	r3, [sp, #4]
 80a0aea:	bd08      	pop	{r3, pc}
 80a0aec:	080601c4 	.word	0x080601c4

080a0af0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0af0:	b508      	push	{r3, lr}
 80a0af2:	4b02      	ldr	r3, [pc, #8]	; (80a0afc <hal_usart_available_data_for_write+0xc>)
 80a0af4:	681b      	ldr	r3, [r3, #0]
 80a0af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0af8:	9301      	str	r3, [sp, #4]
 80a0afa:	bd08      	pop	{r3, pc}
 80a0afc:	080601c4 	.word	0x080601c4

080a0b00 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 80a0b00:	b508      	push	{r3, lr}
 80a0b02:	4b02      	ldr	r3, [pc, #8]	; (80a0b0c <hal_usart_begin_config+0xc>)
 80a0b04:	681b      	ldr	r3, [r3, #0]
 80a0b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0b08:	9301      	str	r3, [sp, #4]
 80a0b0a:	bd08      	pop	{r3, pc}
 80a0b0c:	080601c4 	.word	0x080601c4

080a0b10 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 80a0b10:	b508      	push	{r3, lr}
 80a0b12:	4b02      	ldr	r3, [pc, #8]	; (80a0b1c <hal_i2c_set_speed+0xc>)
 80a0b14:	681b      	ldr	r3, [r3, #0]
 80a0b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0b18:	9301      	str	r3, [sp, #4]
 80a0b1a:	bd08      	pop	{r3, pc}
 80a0b1c:	080601ac 	.word	0x080601ac

080a0b20 <hal_i2c_stretch_clock>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
 80a0b20:	b508      	push	{r3, lr}
 80a0b22:	4b02      	ldr	r3, [pc, #8]	; (80a0b2c <hal_i2c_stretch_clock+0xc>)
 80a0b24:	681b      	ldr	r3, [r3, #0]
 80a0b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0b28:	9301      	str	r3, [sp, #4]
 80a0b2a:	bd08      	pop	{r3, pc}
 80a0b2c:	080601ac 	.word	0x080601ac

080a0b30 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a0b30:	b508      	push	{r3, lr}
 80a0b32:	4b02      	ldr	r3, [pc, #8]	; (80a0b3c <hal_i2c_begin+0xc>)
 80a0b34:	681b      	ldr	r3, [r3, #0]
 80a0b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0b38:	9301      	str	r3, [sp, #4]
 80a0b3a:	bd08      	pop	{r3, pc}
 80a0b3c:	080601ac 	.word	0x080601ac

080a0b40 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a0b40:	b508      	push	{r3, lr}
 80a0b42:	4b02      	ldr	r3, [pc, #8]	; (80a0b4c <hal_i2c_begin_transmission+0xc>)
 80a0b44:	681b      	ldr	r3, [r3, #0]
 80a0b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0b48:	9301      	str	r3, [sp, #4]
 80a0b4a:	bd08      	pop	{r3, pc}
 80a0b4c:	080601ac 	.word	0x080601ac

080a0b50 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a0b50:	b508      	push	{r3, lr}
 80a0b52:	4b02      	ldr	r3, [pc, #8]	; (80a0b5c <hal_i2c_end_transmission+0xc>)
 80a0b54:	681b      	ldr	r3, [r3, #0]
 80a0b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0b58:	9301      	str	r3, [sp, #4]
 80a0b5a:	bd08      	pop	{r3, pc}
 80a0b5c:	080601ac 	.word	0x080601ac

080a0b60 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0b60:	b508      	push	{r3, lr}
 80a0b62:	4b02      	ldr	r3, [pc, #8]	; (80a0b6c <hal_i2c_write+0xc>)
 80a0b64:	681b      	ldr	r3, [r3, #0]
 80a0b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0b68:	9301      	str	r3, [sp, #4]
 80a0b6a:	bd08      	pop	{r3, pc}
 80a0b6c:	080601ac 	.word	0x080601ac

080a0b70 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0b70:	b508      	push	{r3, lr}
 80a0b72:	4b02      	ldr	r3, [pc, #8]	; (80a0b7c <hal_i2c_available+0xc>)
 80a0b74:	681b      	ldr	r3, [r3, #0]
 80a0b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0b78:	9301      	str	r3, [sp, #4]
 80a0b7a:	bd08      	pop	{r3, pc}
 80a0b7c:	080601ac 	.word	0x080601ac

080a0b80 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0b80:	b508      	push	{r3, lr}
 80a0b82:	4b02      	ldr	r3, [pc, #8]	; (80a0b8c <hal_i2c_read+0xc>)
 80a0b84:	681b      	ldr	r3, [r3, #0]
 80a0b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0b88:	9301      	str	r3, [sp, #4]
 80a0b8a:	bd08      	pop	{r3, pc}
 80a0b8c:	080601ac 	.word	0x080601ac

080a0b90 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0b90:	b508      	push	{r3, lr}
 80a0b92:	4b02      	ldr	r3, [pc, #8]	; (80a0b9c <hal_i2c_peek+0xc>)
 80a0b94:	681b      	ldr	r3, [r3, #0]
 80a0b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0b98:	9301      	str	r3, [sp, #4]
 80a0b9a:	bd08      	pop	{r3, pc}
 80a0b9c:	080601ac 	.word	0x080601ac

080a0ba0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0ba0:	b508      	push	{r3, lr}
 80a0ba2:	4b02      	ldr	r3, [pc, #8]	; (80a0bac <hal_i2c_flush+0xc>)
 80a0ba4:	681b      	ldr	r3, [r3, #0]
 80a0ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0ba8:	9301      	str	r3, [sp, #4]
 80a0baa:	bd08      	pop	{r3, pc}
 80a0bac:	080601ac 	.word	0x080601ac

080a0bb0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0bb0:	b508      	push	{r3, lr}
 80a0bb2:	4b02      	ldr	r3, [pc, #8]	; (80a0bbc <hal_i2c_is_enabled+0xc>)
 80a0bb4:	681b      	ldr	r3, [r3, #0]
 80a0bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0bb8:	9301      	str	r3, [sp, #4]
 80a0bba:	bd08      	pop	{r3, pc}
 80a0bbc:	080601ac 	.word	0x080601ac

080a0bc0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0bc0:	b508      	push	{r3, lr}
 80a0bc2:	4b03      	ldr	r3, [pc, #12]	; (80a0bd0 <hal_i2c_init+0x10>)
 80a0bc4:	681b      	ldr	r3, [r3, #0]
 80a0bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0bca:	9301      	str	r3, [sp, #4]
 80a0bcc:	bd08      	pop	{r3, pc}
 80a0bce:	0000      	.short	0x0000
 80a0bd0:	080601ac 	.word	0x080601ac

080a0bd4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0bd4:	b508      	push	{r3, lr}
 80a0bd6:	4b02      	ldr	r3, [pc, #8]	; (80a0be0 <hal_spi_init+0xc>)
 80a0bd8:	681b      	ldr	r3, [r3, #0]
 80a0bda:	69db      	ldr	r3, [r3, #28]
 80a0bdc:	9301      	str	r3, [sp, #4]
 80a0bde:	bd08      	pop	{r3, pc}
 80a0be0:	080601b4 	.word	0x080601b4

080a0be4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0be4:	b508      	push	{r3, lr}
 80a0be6:	4b02      	ldr	r3, [pc, #8]	; (80a0bf0 <hal_spi_is_enabled+0xc>)
 80a0be8:	681b      	ldr	r3, [r3, #0]
 80a0bea:	6a1b      	ldr	r3, [r3, #32]
 80a0bec:	9301      	str	r3, [sp, #4]
 80a0bee:	bd08      	pop	{r3, pc}
 80a0bf0:	080601b4 	.word	0x080601b4

080a0bf4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0bf4:	b508      	push	{r3, lr}
 80a0bf6:	4b02      	ldr	r3, [pc, #8]	; (80a0c00 <HAL_USB_USART_Init+0xc>)
 80a0bf8:	681b      	ldr	r3, [r3, #0]
 80a0bfa:	681b      	ldr	r3, [r3, #0]
 80a0bfc:	9301      	str	r3, [sp, #4]
 80a0bfe:	bd08      	pop	{r3, pc}
 80a0c00:	080601d8 	.word	0x080601d8

080a0c04 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0c04:	b508      	push	{r3, lr}
 80a0c06:	4b02      	ldr	r3, [pc, #8]	; (80a0c10 <HAL_USB_USART_Begin+0xc>)
 80a0c08:	681b      	ldr	r3, [r3, #0]
 80a0c0a:	685b      	ldr	r3, [r3, #4]
 80a0c0c:	9301      	str	r3, [sp, #4]
 80a0c0e:	bd08      	pop	{r3, pc}
 80a0c10:	080601d8 	.word	0x080601d8

080a0c14 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 80a0c14:	b508      	push	{r3, lr}
 80a0c16:	4b02      	ldr	r3, [pc, #8]	; (80a0c20 <HAL_USB_USART_End+0xc>)
 80a0c18:	681b      	ldr	r3, [r3, #0]
 80a0c1a:	689b      	ldr	r3, [r3, #8]
 80a0c1c:	9301      	str	r3, [sp, #4]
 80a0c1e:	bd08      	pop	{r3, pc}
 80a0c20:	080601d8 	.word	0x080601d8

080a0c24 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0c24:	b508      	push	{r3, lr}
 80a0c26:	4b02      	ldr	r3, [pc, #8]	; (80a0c30 <HAL_USB_USART_Available_Data+0xc>)
 80a0c28:	681b      	ldr	r3, [r3, #0]
 80a0c2a:	691b      	ldr	r3, [r3, #16]
 80a0c2c:	9301      	str	r3, [sp, #4]
 80a0c2e:	bd08      	pop	{r3, pc}
 80a0c30:	080601d8 	.word	0x080601d8

080a0c34 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0c34:	b508      	push	{r3, lr}
 80a0c36:	4b02      	ldr	r3, [pc, #8]	; (80a0c40 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0c38:	681b      	ldr	r3, [r3, #0]
 80a0c3a:	695b      	ldr	r3, [r3, #20]
 80a0c3c:	9301      	str	r3, [sp, #4]
 80a0c3e:	bd08      	pop	{r3, pc}
 80a0c40:	080601d8 	.word	0x080601d8

080a0c44 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0c44:	b508      	push	{r3, lr}
 80a0c46:	4b02      	ldr	r3, [pc, #8]	; (80a0c50 <HAL_USB_USART_Receive_Data+0xc>)
 80a0c48:	681b      	ldr	r3, [r3, #0]
 80a0c4a:	699b      	ldr	r3, [r3, #24]
 80a0c4c:	9301      	str	r3, [sp, #4]
 80a0c4e:	bd08      	pop	{r3, pc}
 80a0c50:	080601d8 	.word	0x080601d8

080a0c54 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0c54:	b508      	push	{r3, lr}
 80a0c56:	4b02      	ldr	r3, [pc, #8]	; (80a0c60 <HAL_USB_USART_Send_Data+0xc>)
 80a0c58:	681b      	ldr	r3, [r3, #0]
 80a0c5a:	69db      	ldr	r3, [r3, #28]
 80a0c5c:	9301      	str	r3, [sp, #4]
 80a0c5e:	bd08      	pop	{r3, pc}
 80a0c60:	080601d8 	.word	0x080601d8

080a0c64 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0c64:	b508      	push	{r3, lr}
 80a0c66:	4b02      	ldr	r3, [pc, #8]	; (80a0c70 <HAL_USB_USART_Flush_Data+0xc>)
 80a0c68:	681b      	ldr	r3, [r3, #0]
 80a0c6a:	6a1b      	ldr	r3, [r3, #32]
 80a0c6c:	9301      	str	r3, [sp, #4]
 80a0c6e:	bd08      	pop	{r3, pc}
 80a0c70:	080601d8 	.word	0x080601d8

080a0c74 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0c74:	b508      	push	{r3, lr}
 80a0c76:	4b02      	ldr	r3, [pc, #8]	; (80a0c80 <inet_gethostbyname+0xc>)
 80a0c78:	681b      	ldr	r3, [r3, #0]
 80a0c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0c7c:	9301      	str	r3, [sp, #4]
 80a0c7e:	bd08      	pop	{r3, pc}
 80a0c80:	080601c0 	.word	0x080601c0

080a0c84 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a0c84:	b508      	push	{r3, lr}
 80a0c86:	4b02      	ldr	r3, [pc, #8]	; (80a0c90 <panic_+0xc>)
 80a0c88:	681b      	ldr	r3, [r3, #0]
 80a0c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0c8c:	9301      	str	r3, [sp, #4]
 80a0c8e:	bd08      	pop	{r3, pc}
 80a0c90:	080201a8 	.word	0x080201a8

080a0c94 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80a0c94:	b508      	push	{r3, lr}
 80a0c96:	4b02      	ldr	r3, [pc, #8]	; (80a0ca0 <log_message_v+0xc>)
 80a0c98:	681b      	ldr	r3, [r3, #0]
 80a0c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0c9c:	9301      	str	r3, [sp, #4]
 80a0c9e:	bd08      	pop	{r3, pc}
 80a0ca0:	080201a8 	.word	0x080201a8

080a0ca4 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 80a0ca4:	b508      	push	{r3, lr}
 80a0ca6:	4b02      	ldr	r3, [pc, #8]	; (80a0cb0 <log_level_name+0xc>)
 80a0ca8:	681b      	ldr	r3, [r3, #0]
 80a0caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0cac:	9301      	str	r3, [sp, #4]
 80a0cae:	bd08      	pop	{r3, pc}
 80a0cb0:	080201a8 	.word	0x080201a8

080a0cb4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 80a0cb4:	b508      	push	{r3, lr}
 80a0cb6:	4b02      	ldr	r3, [pc, #8]	; (80a0cc0 <log_set_callbacks+0xc>)
 80a0cb8:	681b      	ldr	r3, [r3, #0]
 80a0cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0cbc:	9301      	str	r3, [sp, #4]
 80a0cbe:	bd08      	pop	{r3, pc}
 80a0cc0:	080201a8 	.word	0x080201a8

080a0cc4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0cc4:	b508      	push	{r3, lr}
 80a0cc6:	4b02      	ldr	r3, [pc, #8]	; (80a0cd0 <set_system_mode+0xc>)
 80a0cc8:	681b      	ldr	r3, [r3, #0]
 80a0cca:	685b      	ldr	r3, [r3, #4]
 80a0ccc:	9301      	str	r3, [sp, #4]
 80a0cce:	bd08      	pop	{r3, pc}
 80a0cd0:	080601a4 	.word	0x080601a4

080a0cd4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0cd4:	b508      	push	{r3, lr}
 80a0cd6:	4b02      	ldr	r3, [pc, #8]	; (80a0ce0 <system_delay_ms+0xc>)
 80a0cd8:	681b      	ldr	r3, [r3, #0]
 80a0cda:	695b      	ldr	r3, [r3, #20]
 80a0cdc:	9301      	str	r3, [sp, #4]
 80a0cde:	bd08      	pop	{r3, pc}
 80a0ce0:	080601a4 	.word	0x080601a4

080a0ce4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a0ce4:	b508      	push	{r3, lr}
 80a0ce6:	4b02      	ldr	r3, [pc, #8]	; (80a0cf0 <system_thread_set_state+0xc>)
 80a0ce8:	681b      	ldr	r3, [r3, #0]
 80a0cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0cec:	9301      	str	r3, [sp, #4]
 80a0cee:	bd08      	pop	{r3, pc}
 80a0cf0:	080601a4 	.word	0x080601a4

080a0cf4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0cf4:	b508      	push	{r3, lr}
 80a0cf6:	4b03      	ldr	r3, [pc, #12]	; (80a0d04 <system_ctrl_set_app_request_handler+0x10>)
 80a0cf8:	681b      	ldr	r3, [r3, #0]
 80a0cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0cfe:	9301      	str	r3, [sp, #4]
 80a0d00:	bd08      	pop	{r3, pc}
 80a0d02:	0000      	.short	0x0000
 80a0d04:	080601a4 	.word	0x080601a4

080a0d08 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0d08:	b508      	push	{r3, lr}
 80a0d0a:	4b03      	ldr	r3, [pc, #12]	; (80a0d18 <system_ctrl_set_result+0x10>)
 80a0d0c:	681b      	ldr	r3, [r3, #0]
 80a0d0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0d12:	9301      	str	r3, [sp, #4]
 80a0d14:	bd08      	pop	{r3, pc}
 80a0d16:	0000      	.short	0x0000
 80a0d18:	080601a4 	.word	0x080601a4

080a0d1c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0d1c:	b508      	push	{r3, lr}
 80a0d1e:	4b02      	ldr	r3, [pc, #8]	; (80a0d28 <network_connect+0xc>)
 80a0d20:	681b      	ldr	r3, [r3, #0]
 80a0d22:	685b      	ldr	r3, [r3, #4]
 80a0d24:	9301      	str	r3, [sp, #4]
 80a0d26:	bd08      	pop	{r3, pc}
 80a0d28:	080601c8 	.word	0x080601c8

080a0d2c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0d2c:	b508      	push	{r3, lr}
 80a0d2e:	4b02      	ldr	r3, [pc, #8]	; (80a0d38 <network_connecting+0xc>)
 80a0d30:	681b      	ldr	r3, [r3, #0]
 80a0d32:	689b      	ldr	r3, [r3, #8]
 80a0d34:	9301      	str	r3, [sp, #4]
 80a0d36:	bd08      	pop	{r3, pc}
 80a0d38:	080601c8 	.word	0x080601c8

080a0d3c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0d3c:	b508      	push	{r3, lr}
 80a0d3e:	4b02      	ldr	r3, [pc, #8]	; (80a0d48 <network_disconnect+0xc>)
 80a0d40:	681b      	ldr	r3, [r3, #0]
 80a0d42:	68db      	ldr	r3, [r3, #12]
 80a0d44:	9301      	str	r3, [sp, #4]
 80a0d46:	bd08      	pop	{r3, pc}
 80a0d48:	080601c8 	.word	0x080601c8

080a0d4c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0d4c:	b508      	push	{r3, lr}
 80a0d4e:	4b02      	ldr	r3, [pc, #8]	; (80a0d58 <network_ready+0xc>)
 80a0d50:	681b      	ldr	r3, [r3, #0]
 80a0d52:	691b      	ldr	r3, [r3, #16]
 80a0d54:	9301      	str	r3, [sp, #4]
 80a0d56:	bd08      	pop	{r3, pc}
 80a0d58:	080601c8 	.word	0x080601c8

080a0d5c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0d5c:	b508      	push	{r3, lr}
 80a0d5e:	4b02      	ldr	r3, [pc, #8]	; (80a0d68 <network_on+0xc>)
 80a0d60:	681b      	ldr	r3, [r3, #0]
 80a0d62:	695b      	ldr	r3, [r3, #20]
 80a0d64:	9301      	str	r3, [sp, #4]
 80a0d66:	bd08      	pop	{r3, pc}
 80a0d68:	080601c8 	.word	0x080601c8

080a0d6c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0d6c:	b508      	push	{r3, lr}
 80a0d6e:	4b02      	ldr	r3, [pc, #8]	; (80a0d78 <network_off+0xc>)
 80a0d70:	681b      	ldr	r3, [r3, #0]
 80a0d72:	699b      	ldr	r3, [r3, #24]
 80a0d74:	9301      	str	r3, [sp, #4]
 80a0d76:	bd08      	pop	{r3, pc}
 80a0d78:	080601c8 	.word	0x080601c8

080a0d7c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0d7c:	b508      	push	{r3, lr}
 80a0d7e:	4b02      	ldr	r3, [pc, #8]	; (80a0d88 <network_listen+0xc>)
 80a0d80:	681b      	ldr	r3, [r3, #0]
 80a0d82:	69db      	ldr	r3, [r3, #28]
 80a0d84:	9301      	str	r3, [sp, #4]
 80a0d86:	bd08      	pop	{r3, pc}
 80a0d88:	080601c8 	.word	0x080601c8

080a0d8c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0d8c:	b508      	push	{r3, lr}
 80a0d8e:	4b02      	ldr	r3, [pc, #8]	; (80a0d98 <network_listening+0xc>)
 80a0d90:	681b      	ldr	r3, [r3, #0]
 80a0d92:	6a1b      	ldr	r3, [r3, #32]
 80a0d94:	9301      	str	r3, [sp, #4]
 80a0d96:	bd08      	pop	{r3, pc}
 80a0d98:	080601c8 	.word	0x080601c8

080a0d9c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0d9c:	b508      	push	{r3, lr}
 80a0d9e:	4b02      	ldr	r3, [pc, #8]	; (80a0da8 <network_set_listen_timeout+0xc>)
 80a0da0:	681b      	ldr	r3, [r3, #0]
 80a0da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0da4:	9301      	str	r3, [sp, #4]
 80a0da6:	bd08      	pop	{r3, pc}
 80a0da8:	080601c8 	.word	0x080601c8

080a0dac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0dac:	b508      	push	{r3, lr}
 80a0dae:	4b02      	ldr	r3, [pc, #8]	; (80a0db8 <network_get_listen_timeout+0xc>)
 80a0db0:	681b      	ldr	r3, [r3, #0]
 80a0db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0db4:	9301      	str	r3, [sp, #4]
 80a0db6:	bd08      	pop	{r3, pc}
 80a0db8:	080601c8 	.word	0x080601c8

080a0dbc <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a0dbc:	b508      	push	{r3, lr}
 80a0dbe:	4b02      	ldr	r3, [pc, #8]	; (80a0dc8 <spark_function+0xc>)
 80a0dc0:	681b      	ldr	r3, [r3, #0]
 80a0dc2:	685b      	ldr	r3, [r3, #4]
 80a0dc4:	9301      	str	r3, [sp, #4]
 80a0dc6:	bd08      	pop	{r3, pc}
 80a0dc8:	080601cc 	.word	0x080601cc

080a0dcc <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a0dcc:	b508      	push	{r3, lr}
 80a0dce:	4b02      	ldr	r3, [pc, #8]	; (80a0dd8 <spark_process+0xc>)
 80a0dd0:	681b      	ldr	r3, [r3, #0]
 80a0dd2:	689b      	ldr	r3, [r3, #8]
 80a0dd4:	9301      	str	r3, [sp, #4]
 80a0dd6:	bd08      	pop	{r3, pc}
 80a0dd8:	080601cc 	.word	0x080601cc

080a0ddc <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0ddc:	b508      	push	{r3, lr}
 80a0dde:	4b02      	ldr	r3, [pc, #8]	; (80a0de8 <spark_cloud_flag_connected+0xc>)
 80a0de0:	681b      	ldr	r3, [r3, #0]
 80a0de2:	695b      	ldr	r3, [r3, #20]
 80a0de4:	9301      	str	r3, [sp, #4]
 80a0de6:	bd08      	pop	{r3, pc}
 80a0de8:	080601cc 	.word	0x080601cc

080a0dec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0dec:	b508      	push	{r3, lr}
 80a0dee:	4b02      	ldr	r3, [pc, #8]	; (80a0df8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0df0:	681b      	ldr	r3, [r3, #0]
 80a0df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0df4:	9301      	str	r3, [sp, #4]
 80a0df6:	bd08      	pop	{r3, pc}
 80a0df8:	080601cc 	.word	0x080601cc

080a0dfc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0dfc:	b508      	push	{r3, lr}
 80a0dfe:	4b02      	ldr	r3, [pc, #8]	; (80a0e08 <malloc+0xc>)
 80a0e00:	681b      	ldr	r3, [r3, #0]
 80a0e02:	681b      	ldr	r3, [r3, #0]
 80a0e04:	9301      	str	r3, [sp, #4]
 80a0e06:	bd08      	pop	{r3, pc}
 80a0e08:	080601a0 	.word	0x080601a0

080a0e0c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0e0c:	b508      	push	{r3, lr}
 80a0e0e:	4b02      	ldr	r3, [pc, #8]	; (80a0e18 <free+0xc>)
 80a0e10:	681b      	ldr	r3, [r3, #0]
 80a0e12:	685b      	ldr	r3, [r3, #4]
 80a0e14:	9301      	str	r3, [sp, #4]
 80a0e16:	bd08      	pop	{r3, pc}
 80a0e18:	080601a0 	.word	0x080601a0

080a0e1c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0e1c:	b508      	push	{r3, lr}
 80a0e1e:	4b02      	ldr	r3, [pc, #8]	; (80a0e28 <realloc+0xc>)
 80a0e20:	681b      	ldr	r3, [r3, #0]
 80a0e22:	689b      	ldr	r3, [r3, #8]
 80a0e24:	9301      	str	r3, [sp, #4]
 80a0e26:	bd08      	pop	{r3, pc}
 80a0e28:	080601a0 	.word	0x080601a0

080a0e2c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a0e2c:	b508      	push	{r3, lr}
 80a0e2e:	4b02      	ldr	r3, [pc, #8]	; (80a0e38 <vsnprintf+0xc>)
 80a0e30:	681b      	ldr	r3, [r3, #0]
 80a0e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0e34:	9301      	str	r3, [sp, #4]
 80a0e36:	bd08      	pop	{r3, pc}
 80a0e38:	080601a0 	.word	0x080601a0

080a0e3c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0e3c:	b508      	push	{r3, lr}
 80a0e3e:	4b02      	ldr	r3, [pc, #8]	; (80a0e48 <newlib_impure_ptr_callback+0xc>)
 80a0e40:	681b      	ldr	r3, [r3, #0]
 80a0e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0e44:	9301      	str	r3, [sp, #4]
 80a0e46:	bd08      	pop	{r3, pc}
 80a0e48:	080601a0 	.word	0x080601a0

080a0e4c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0e4c:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0e4e:	2600      	movs	r6, #0
 80a0e50:	4604      	mov	r4, r0
 80a0e52:	460d      	mov	r5, r1
 80a0e54:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0e58:	f7ff fdea 	bl	80a0a30 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0e5c:	4628      	mov	r0, r5
    _spi = spi;
 80a0e5e:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a0e60:	f7ff feb8 	bl	80a0bd4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a0e64:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0e66:	6066      	str	r6, [r4, #4]
}
 80a0e68:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0e6c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0e6c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0e6e:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0e70:	b510      	push	{r4, lr}
 80a0e72:	4b08      	ldr	r3, [pc, #32]	; (80a0e94 <_GLOBAL__sub_I_System+0x28>)
 80a0e74:	4c08      	ldr	r4, [pc, #32]	; (80a0e98 <_GLOBAL__sub_I_System+0x2c>)
 80a0e76:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a0e78:	4b08      	ldr	r3, [pc, #32]	; (80a0e9c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a0e7a:	6020      	str	r0, [r4, #0]
 80a0e7c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a0e7e:	71a0      	strb	r0, [r4, #6]
 80a0e80:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0e82:	f7ff ff1f 	bl	80a0cc4 <set_system_mode>
SystemClass System;
 80a0e86:	4620      	mov	r0, r4
 80a0e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a0e8c:	4a04      	ldr	r2, [pc, #16]	; (80a0ea0 <_GLOBAL__sub_I_System+0x34>)
 80a0e8e:	4905      	ldr	r1, [pc, #20]	; (80a0ea4 <_GLOBAL__sub_I_System+0x38>)
 80a0e90:	f002 b898 	b.w	80a2fc4 <__aeabi_atexit>
 80a0e94:	200000f0 	.word	0x200000f0
 80a0e98:	200000e4 	.word	0x200000e4
 80a0e9c:	ffff0000 	.word	0xffff0000
 80a0ea0:	20000078 	.word	0x20000078
 80a0ea4:	080a012d 	.word	0x080a012d

080a0ea8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a0ea8:	b510      	push	{r4, lr}
 80a0eaa:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a0eac:	f003 f8bb 	bl	80a4026 <strlen>
 80a0eb0:	1e43      	subs	r3, r0, #1
 80a0eb2:	4620      	mov	r0, r4
 80a0eb4:	4423      	add	r3, r4
	while(i<j){
 80a0eb6:	4283      	cmp	r3, r0
 80a0eb8:	d906      	bls.n	80a0ec8 <_Z11str_reversePc+0x20>
		c = *i;
 80a0eba:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a0ebc:	7819      	ldrb	r1, [r3, #0]
 80a0ebe:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a0ec2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a0ec6:	e7f6      	b.n	80a0eb6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a0ec8:	bd10      	pop	{r4, pc}

080a0eca <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a0eca:	b570      	push	{r4, r5, r6, lr}
 80a0ecc:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a0ece:	1e91      	subs	r1, r2, #2
 80a0ed0:	2922      	cmp	r1, #34	; 0x22
 80a0ed2:	d822      	bhi.n	80a0f1a <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 80a0ed4:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a0ed6:	b168      	cbz	r0, 80a0ef4 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a0ed8:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a0edc:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a0ee0:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a0ee2:	2809      	cmp	r0, #9
                *ptr += '0';
 80a0ee4:	bf94      	ite	ls
 80a0ee6:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a0ee8:	3157      	addhi	r1, #87	; 0x57
 80a0eea:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 80a0eec:	4630      	mov	r0, r6
 80a0eee:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a0ef2:	e7f0      	b.n	80a0ed6 <ultoa+0xc>
 80a0ef4:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a0ef6:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 80a0ef8:	4423      	add	r3, r4
 80a0efa:	4293      	cmp	r3, r2
 80a0efc:	d902      	bls.n	80a0f04 <ultoa+0x3a>
            *ptr++ = '0';
 80a0efe:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 80a0f02:	e7fa      	b.n	80a0efa <ultoa+0x30>
 80a0f04:	1b5a      	subs	r2, r3, r5
 80a0f06:	42ab      	cmp	r3, r5
 80a0f08:	bf38      	it	cc
 80a0f0a:	2200      	movcc	r2, #0

	*ptr = '\0';
 80a0f0c:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a0f0e:	4620      	mov	r0, r4
	*ptr = '\0';
 80a0f10:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80a0f12:	f7ff ffc9 	bl	80a0ea8 <_Z11str_reversePc>
	return buffer;
 80a0f16:	4620      	mov	r0, r4
}
 80a0f18:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a0f1a:	2000      	movs	r0, #0
 80a0f1c:	e7fc      	b.n	80a0f18 <ultoa+0x4e>
	...

080a0f20 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a0f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0f24:	4607      	mov	r7, r0
 80a0f26:	460d      	mov	r5, r1
 80a0f28:	4616      	mov	r6, r2
 80a0f2a:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 80a0f2c:	2200      	movs	r2, #0
 80a0f2e:	2300      	movs	r3, #0
 80a0f30:	4638      	mov	r0, r7
 80a0f32:	4629      	mov	r1, r5
 80a0f34:	f002 fd94 	bl	80a3a60 <__aeabi_dcmplt>
 80a0f38:	b120      	cbz	r0, 80a0f44 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a0f3a:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 80a0f3c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a0f40:	f804 3b01 	strb.w	r3, [r4], #1
 80a0f44:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a0f46:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a0f4a:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 80a0f4c:	b2d9      	uxtb	r1, r3
 80a0f4e:	428e      	cmp	r6, r1
 80a0f50:	d903      	bls.n	80a0f5a <_Z4dtoadhPc+0x3a>
        scale *= 10;
 80a0f52:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 80a0f56:	3301      	adds	r3, #1
 80a0f58:	e7f8      	b.n	80a0f4c <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 80a0f5a:	4650      	mov	r0, sl
 80a0f5c:	f002 faa4 	bl	80a34a8 <__aeabi_i2d>
 80a0f60:	463a      	mov	r2, r7
 80a0f62:	462b      	mov	r3, r5
 80a0f64:	f002 fb0a 	bl	80a357c <__aeabi_dmul>
 80a0f68:	4680      	mov	r8, r0
 80a0f6a:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 80a0f6c:	f002 fe4e 	bl	80a3c0c <__aeabi_d2ulz>
 80a0f70:	4605      	mov	r5, r0
 80a0f72:	460f      	mov	r7, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a0f74:	f002 facc 	bl	80a3510 <__aeabi_ul2d>
 80a0f78:	4602      	mov	r2, r0
 80a0f7a:	460b      	mov	r3, r1
 80a0f7c:	4640      	mov	r0, r8
 80a0f7e:	4649      	mov	r1, r9
 80a0f80:	f002 f944 	bl	80a320c <__aeabi_dsub>
 80a0f84:	2200      	movs	r2, #0
 80a0f86:	4b12      	ldr	r3, [pc, #72]	; (80a0fd0 <_Z4dtoadhPc+0xb0>)
 80a0f88:	f002 fd7e 	bl	80a3a88 <__aeabi_dcmpge>
 80a0f8c:	b110      	cbz	r0, 80a0f94 <_Z4dtoadhPc+0x74>
        fixed++;
 80a0f8e:	3501      	adds	r5, #1
 80a0f90:	f147 0700 	adc.w	r7, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a0f94:	4652      	mov	r2, sl
 80a0f96:	4628      	mov	r0, r5
 80a0f98:	4639      	mov	r1, r7
 80a0f9a:	17d3      	asrs	r3, r2, #31
 80a0f9c:	f002 fe1e 	bl	80a3bdc <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a0fa0:	2301      	movs	r3, #1
 80a0fa2:	4615      	mov	r5, r2
 80a0fa4:	4621      	mov	r1, r4
 80a0fa6:	220a      	movs	r2, #10
 80a0fa8:	f7ff ff8f 	bl	80a0eca <ultoa>
    if (prec) {
 80a0fac:	b16e      	cbz	r6, 80a0fca <_Z4dtoadhPc+0xaa>
        sout += strlen(sout);
 80a0fae:	4620      	mov	r0, r4
 80a0fb0:	f003 f839 	bl	80a4026 <strlen>
        *sout++ = '.';
 80a0fb4:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 80a0fb6:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 80a0fb8:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 80a0fba:	220a      	movs	r2, #10
 80a0fbc:	4633      	mov	r3, r6
 80a0fbe:	4628      	mov	r0, r5
    }
}
 80a0fc0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
 80a0fc4:	3101      	adds	r1, #1
 80a0fc6:	f7ff bf80 	b.w	80a0eca <ultoa>
}
 80a0fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0fce:	bf00      	nop
 80a0fd0:	3fe00000 	.word	0x3fe00000

080a0fd4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0fd4:	b510      	push	{r4, lr}
 80a0fd6:	4604      	mov	r4, r0
{
	free(buffer);
 80a0fd8:	6800      	ldr	r0, [r0, #0]
 80a0fda:	f7ff ff17 	bl	80a0e0c <free>
}
 80a0fde:	4620      	mov	r0, r4
 80a0fe0:	bd10      	pop	{r4, pc}

080a0fe2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0fe2:	b510      	push	{r4, lr}
 80a0fe4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0fe6:	6800      	ldr	r0, [r0, #0]
 80a0fe8:	b108      	cbz	r0, 80a0fee <_ZN6String10invalidateEv+0xc>
 80a0fea:	f7ff ff0f 	bl	80a0e0c <free>
	buffer = NULL;
 80a0fee:	2300      	movs	r3, #0
	capacity = len = 0;
 80a0ff0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a0ff4:	6023      	str	r3, [r4, #0]
}
 80a0ff6:	bd10      	pop	{r4, pc}

080a0ff8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0ff8:	b538      	push	{r3, r4, r5, lr}
 80a0ffa:	4604      	mov	r4, r0
 80a0ffc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0ffe:	6800      	ldr	r0, [r0, #0]
 80a1000:	3101      	adds	r1, #1
 80a1002:	f7ff ff0b 	bl	80a0e1c <realloc>
	if (newbuffer) {
 80a1006:	b110      	cbz	r0, 80a100e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1008:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a100c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a100e:	bd38      	pop	{r3, r4, r5, pc}

080a1010 <_ZN6String7reserveEj>:
{
 80a1010:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1012:	6803      	ldr	r3, [r0, #0]
{
 80a1014:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1016:	b123      	cbz	r3, 80a1022 <_ZN6String7reserveEj+0x12>
 80a1018:	6843      	ldr	r3, [r0, #4]
 80a101a:	428b      	cmp	r3, r1
 80a101c:	d301      	bcc.n	80a1022 <_ZN6String7reserveEj+0x12>
 80a101e:	2001      	movs	r0, #1
}
 80a1020:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a1022:	4620      	mov	r0, r4
 80a1024:	f7ff ffe8 	bl	80a0ff8 <_ZN6String12changeBufferEj>
 80a1028:	2800      	cmp	r0, #0
 80a102a:	d0f9      	beq.n	80a1020 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a102c:	68a3      	ldr	r3, [r4, #8]
 80a102e:	2b00      	cmp	r3, #0
 80a1030:	d1f5      	bne.n	80a101e <_ZN6String7reserveEj+0xe>
 80a1032:	6822      	ldr	r2, [r4, #0]
 80a1034:	7013      	strb	r3, [r2, #0]
 80a1036:	e7f2      	b.n	80a101e <_ZN6String7reserveEj+0xe>

080a1038 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1038:	b570      	push	{r4, r5, r6, lr}
 80a103a:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a103c:	4611      	mov	r1, r2
{
 80a103e:	4604      	mov	r4, r0
 80a1040:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1042:	f7ff ffe5 	bl	80a1010 <_ZN6String7reserveEj>
 80a1046:	b920      	cbnz	r0, 80a1052 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a1048:	4620      	mov	r0, r4
 80a104a:	f7ff ffca 	bl	80a0fe2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a104e:	4620      	mov	r0, r4
 80a1050:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a1052:	462a      	mov	r2, r5
 80a1054:	4631      	mov	r1, r6
 80a1056:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a1058:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a105a:	f002 ff67 	bl	80a3f2c <memcpy>
	buffer[len] = 0;
 80a105e:	2100      	movs	r1, #0
 80a1060:	6822      	ldr	r2, [r4, #0]
 80a1062:	68a3      	ldr	r3, [r4, #8]
 80a1064:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a1066:	e7f2      	b.n	80a104e <_ZN6String4copyEPKcj+0x16>

080a1068 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a1068:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a106a:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a106c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a106e:	460d      	mov	r5, r1
	capacity = 0;
 80a1070:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1074:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1076:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a1078:	b139      	cbz	r1, 80a108a <_ZN6StringC1EPKc+0x22>
 80a107a:	4608      	mov	r0, r1
 80a107c:	f002 ffd3 	bl	80a4026 <strlen>
 80a1080:	4629      	mov	r1, r5
 80a1082:	4602      	mov	r2, r0
 80a1084:	4620      	mov	r0, r4
 80a1086:	f7ff ffd7 	bl	80a1038 <_ZN6String4copyEPKcj>
}
 80a108a:	4620      	mov	r0, r4
 80a108c:	bd38      	pop	{r3, r4, r5, pc}

080a108e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a108e:	b538      	push	{r3, r4, r5, lr}
 80a1090:	4605      	mov	r5, r0
	if (buffer) {
 80a1092:	6800      	ldr	r0, [r0, #0]
{
 80a1094:	460c      	mov	r4, r1
	if (buffer) {
 80a1096:	b168      	cbz	r0, 80a10b4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a1098:	686a      	ldr	r2, [r5, #4]
 80a109a:	688b      	ldr	r3, [r1, #8]
 80a109c:	429a      	cmp	r2, r3
 80a109e:	d307      	bcc.n	80a10b0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a10a0:	6809      	ldr	r1, [r1, #0]
 80a10a2:	f002 ffb8 	bl	80a4016 <strcpy>
			len = rhs.len;
 80a10a6:	68a3      	ldr	r3, [r4, #8]
 80a10a8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a10aa:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a10ac:	60a3      	str	r3, [r4, #8]
}
 80a10ae:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a10b0:	f7ff feac 	bl	80a0e0c <free>
	buffer = rhs.buffer;
 80a10b4:	6823      	ldr	r3, [r4, #0]
 80a10b6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a10b8:	6863      	ldr	r3, [r4, #4]
 80a10ba:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a10bc:	68a3      	ldr	r3, [r4, #8]
 80a10be:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a10c0:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a10c2:	e9c4 3300 	strd	r3, r3, [r4]
 80a10c6:	e7f1      	b.n	80a10ac <_ZN6String4moveERS_+0x1e>

080a10c8 <_ZN6StringC1EOS_>:
	buffer = NULL;
 80a10c8:	2300      	movs	r3, #0
String::String(String &&rval)
 80a10ca:	b510      	push	{r4, lr}
 80a10cc:	4604      	mov	r4, r0
	capacity = 0;
 80a10ce:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a10d2:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a10d4:	7303      	strb	r3, [r0, #12]
	move(rval);
 80a10d6:	f7ff ffda 	bl	80a108e <_ZN6String4moveERS_>
}
 80a10da:	4620      	mov	r0, r4
 80a10dc:	bd10      	pop	{r4, pc}

080a10de <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a10de:	4288      	cmp	r0, r1
{
 80a10e0:	b510      	push	{r4, lr}
 80a10e2:	460b      	mov	r3, r1
 80a10e4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a10e6:	d004      	beq.n	80a10f2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a10e8:	6809      	ldr	r1, [r1, #0]
 80a10ea:	b121      	cbz	r1, 80a10f6 <_ZN6StringaSERKS_+0x18>
 80a10ec:	689a      	ldr	r2, [r3, #8]
 80a10ee:	f7ff ffa3 	bl	80a1038 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a10f2:	4620      	mov	r0, r4
 80a10f4:	bd10      	pop	{r4, pc}
	else invalidate();
 80a10f6:	f7ff ff74 	bl	80a0fe2 <_ZN6String10invalidateEv>
 80a10fa:	e7fa      	b.n	80a10f2 <_ZN6StringaSERKS_+0x14>

080a10fc <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a10fc:	2300      	movs	r3, #0
String::String(const String &value)
 80a10fe:	b510      	push	{r4, lr}
 80a1100:	4604      	mov	r4, r0
	capacity = 0;
 80a1102:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1106:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1108:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a110a:	f7ff ffe8 	bl	80a10de <_ZN6StringaSERKS_>
}
 80a110e:	4620      	mov	r0, r4
 80a1110:	bd10      	pop	{r4, pc}

080a1112 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1112:	b538      	push	{r3, r4, r5, lr}
 80a1114:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1116:	460c      	mov	r4, r1
 80a1118:	b149      	cbz	r1, 80a112e <_ZN6StringaSEPKc+0x1c>
 80a111a:	4608      	mov	r0, r1
 80a111c:	f002 ff83 	bl	80a4026 <strlen>
 80a1120:	4621      	mov	r1, r4
 80a1122:	4602      	mov	r2, r0
 80a1124:	4628      	mov	r0, r5
 80a1126:	f7ff ff87 	bl	80a1038 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a112a:	4628      	mov	r0, r5
 80a112c:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a112e:	f7ff ff58 	bl	80a0fe2 <_ZN6String10invalidateEv>
 80a1132:	e7fa      	b.n	80a112a <_ZN6StringaSEPKc+0x18>

080a1134 <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
 80a1134:	b510      	push	{r4, lr}
 80a1136:	4619      	mov	r1, r3
 80a1138:	4604      	mov	r4, r0
	buffer = NULL;
 80a113a:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
 80a113c:	b08a      	sub	sp, #40	; 0x28
 80a113e:	4610      	mov	r0, r2
	capacity = 0;
 80a1140:	e9c4 3300 	strd	r3, r3, [r4]
	dtoa(value, decimalPlaces, buf);
 80a1144:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	len = 0;
 80a1148:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a114a:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
 80a114c:	ab01      	add	r3, sp, #4
 80a114e:	f7ff fee7 	bl	80a0f20 <_Z4dtoadhPc>
        *this = buf;
 80a1152:	4620      	mov	r0, r4
 80a1154:	a901      	add	r1, sp, #4
 80a1156:	f7ff ffdc 	bl	80a1112 <_ZN6StringaSEPKc>
}
 80a115a:	4620      	mov	r0, r4
 80a115c:	b00a      	add	sp, #40	; 0x28
 80a115e:	bd10      	pop	{r4, pc}

080a1160 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1162:	4606      	mov	r6, r0
 80a1164:	460d      	mov	r5, r1
  size_t n = 0;
 80a1166:	2400      	movs	r4, #0
 80a1168:	188f      	adds	r7, r1, r2
  while (size--) {
 80a116a:	42bd      	cmp	r5, r7
 80a116c:	d00c      	beq.n	80a1188 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a116e:	6833      	ldr	r3, [r6, #0]
 80a1170:	4630      	mov	r0, r6
 80a1172:	689b      	ldr	r3, [r3, #8]
 80a1174:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1178:	4798      	blx	r3
     if (chunk>=0)
 80a117a:	1e03      	subs	r3, r0, #0
 80a117c:	db01      	blt.n	80a1182 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a117e:	441c      	add	r4, r3
  while (size--) {
 80a1180:	e7f3      	b.n	80a116a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1182:	2c00      	cmp	r4, #0
 80a1184:	bf08      	it	eq
 80a1186:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1188:	4620      	mov	r0, r4
 80a118a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a118c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a118c:	b570      	push	{r4, r5, r6, lr}
 80a118e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1190:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1192:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a1194:	b149      	cbz	r1, 80a11aa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1196:	f002 ff46 	bl	80a4026 <strlen>
 80a119a:	682b      	ldr	r3, [r5, #0]
 80a119c:	4602      	mov	r2, r0
 80a119e:	4621      	mov	r1, r4
 80a11a0:	4628      	mov	r0, r5
    }
 80a11a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a11a6:	68db      	ldr	r3, [r3, #12]
 80a11a8:	4718      	bx	r3
    }
 80a11aa:	bd70      	pop	{r4, r5, r6, pc}

080a11ac <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a11ac:	b508      	push	{r3, lr}
  return write(str);
 80a11ae:	f7ff ffed 	bl	80a118c <_ZN5Print5writeEPKc>
}
 80a11b2:	bd08      	pop	{r3, pc}

080a11b4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a11b4:	6803      	ldr	r3, [r0, #0]
 80a11b6:	689b      	ldr	r3, [r3, #8]
 80a11b8:	4718      	bx	r3

080a11ba <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a11ba:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a11bc:	210d      	movs	r1, #13
{
 80a11be:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a11c0:	f7ff fff8 	bl	80a11b4 <_ZN5Print5printEc>
  n += print('\n');
 80a11c4:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a11c6:	4604      	mov	r4, r0
  n += print('\n');
 80a11c8:	4628      	mov	r0, r5
 80a11ca:	f7ff fff3 	bl	80a11b4 <_ZN5Print5printEc>
  return n;
}
 80a11ce:	4420      	add	r0, r4
 80a11d0:	bd38      	pop	{r3, r4, r5, pc}

080a11d2 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a11d2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a11d4:	2a01      	cmp	r2, #1
 80a11d6:	bf98      	it	ls
 80a11d8:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a11da:	b530      	push	{r4, r5, lr}
 80a11dc:	b08b      	sub	sp, #44	; 0x2c
 80a11de:	460c      	mov	r4, r1
  *str = '\0';
 80a11e0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a11e4:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a11e6:	4625      	mov	r5, r4
 80a11e8:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a11ec:	fb04 5312 	mls	r3, r4, r2, r5
 80a11f0:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a11f2:	2b09      	cmp	r3, #9
 80a11f4:	bf94      	ite	ls
 80a11f6:	3330      	addls	r3, #48	; 0x30
 80a11f8:	3337      	addhi	r3, #55	; 0x37
 80a11fa:	b2db      	uxtb	r3, r3
  } while(n);
 80a11fc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a11fe:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1202:	d9f0      	bls.n	80a11e6 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1204:	f7ff ffc2 	bl	80a118c <_ZN5Print5writeEPKc>
}
 80a1208:	b00b      	add	sp, #44	; 0x2c
 80a120a:	bd30      	pop	{r4, r5, pc}

080a120c <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a120c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1210:	b086      	sub	sp, #24
 80a1212:	af00      	add	r7, sp, #0
 80a1214:	4605      	mov	r5, r0
 80a1216:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a1218:	1d38      	adds	r0, r7, #4
 80a121a:	2114      	movs	r1, #20
{
 80a121c:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a121e:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a1220:	f7ff fe04 	bl	80a0e2c <vsnprintf>

    if (n<bufsize)
 80a1224:	2813      	cmp	r0, #19
 80a1226:	d80e      	bhi.n	80a1246 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a1228:	4628      	mov	r0, r5
 80a122a:	1d39      	adds	r1, r7, #4
 80a122c:	f7ff ffae 	bl	80a118c <_ZN5Print5writeEPKc>
 80a1230:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a1232:	b11e      	cbz	r6, 80a123c <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a1234:	4628      	mov	r0, r5
 80a1236:	f7ff ffc0 	bl	80a11ba <_ZN5Print7printlnEv>
 80a123a:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a123c:	4620      	mov	r0, r4
 80a123e:	3718      	adds	r7, #24
 80a1240:	46bd      	mov	sp, r7
 80a1242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a1246:	f100 0308 	add.w	r3, r0, #8
 80a124a:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a124e:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a1250:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a1254:	4622      	mov	r2, r4
 80a1256:	1c41      	adds	r1, r0, #1
 80a1258:	683b      	ldr	r3, [r7, #0]
 80a125a:	4668      	mov	r0, sp
 80a125c:	f7ff fde6 	bl	80a0e2c <vsnprintf>
  return write(str);
 80a1260:	4669      	mov	r1, sp
 80a1262:	4628      	mov	r0, r5
 80a1264:	f7ff ff92 	bl	80a118c <_ZN5Print5writeEPKc>
 80a1268:	4604      	mov	r4, r0
 80a126a:	46c5      	mov	sp, r8
 80a126c:	e7e1      	b.n	80a1232 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a126e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a126e:	2300      	movs	r3, #0
 80a1270:	6840      	ldr	r0, [r0, #4]
 80a1272:	461a      	mov	r2, r3
 80a1274:	4619      	mov	r1, r3
 80a1276:	f7ff bd71 	b.w	80a0d5c <network_on>

080a127a <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 80a127a:	6880      	ldr	r0, [r0, #8]
 80a127c:	6803      	ldr	r3, [r0, #0]
 80a127e:	68db      	ldr	r3, [r3, #12]
 80a1280:	4718      	bx	r3

080a1282 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 80a1282:	4770      	bx	lr

080a1284 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 80a1284:	4608      	mov	r0, r1
 80a1286:	b111      	cbz	r1, 80a128e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 80a1288:	680b      	ldr	r3, [r1, #0]
 80a128a:	685b      	ldr	r3, [r3, #4]
 80a128c:	4718      	bx	r3
}
 80a128e:	4770      	bx	lr

080a1290 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a1290:	4770      	bx	lr

080a1292 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 80a1292:	4770      	bx	lr

080a1294 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 80a1294:	4770      	bx	lr

080a1296 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 80a1296:	b538      	push	{r3, r4, r5, lr}
 80a1298:	4604      	mov	r4, r0
 80a129a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 80a129c:	6800      	ldr	r0, [r0, #0]
 80a129e:	212e      	movs	r1, #46	; 0x2e
 80a12a0:	f002 fea5 	bl	80a3fee <strchrnul>
    size = s - category;
 80a12a4:	6823      	ldr	r3, [r4, #0]
    const char *s = strchrnul(category, '.');
 80a12a6:	4602      	mov	r2, r0
    size = s - category;
 80a12a8:	1ac0      	subs	r0, r0, r3
 80a12aa:	6028      	str	r0, [r5, #0]
    if (size) {
 80a12ac:	b120      	cbz	r0, 80a12b8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x22>
        if (*s) {
 80a12ae:	7813      	ldrb	r3, [r2, #0]
 80a12b0:	b103      	cbz	r3, 80a12b4 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1e>
            ++s;
 80a12b2:	3201      	adds	r2, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a12b4:	6820      	ldr	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a12b6:	6022      	str	r2, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
 80a12b8:	bd38      	pop	{r3, r4, r5, pc}

080a12ba <_ZN5spark16JSONStreamWriterD0Ev>:
 80a12ba:	b510      	push	{r4, lr}
 80a12bc:	4604      	mov	r4, r0
 80a12be:	210c      	movs	r1, #12
 80a12c0:	f001 fe85 	bl	80a2fce <_ZdlPvj>
 80a12c4:	4620      	mov	r0, r4
 80a12c6:	bd10      	pop	{r4, pc}

080a12c8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 80a12c8:	b510      	push	{r4, lr}
 80a12ca:	4604      	mov	r4, r0
 80a12cc:	2104      	movs	r1, #4
 80a12ce:	f001 fe7e 	bl	80a2fce <_ZdlPvj>
 80a12d2:	4620      	mov	r0, r4
 80a12d4:	bd10      	pop	{r4, pc}

080a12d6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a12d6:	b510      	push	{r4, lr}
 80a12d8:	4604      	mov	r4, r0
 80a12da:	2104      	movs	r1, #4
 80a12dc:	f001 fe77 	bl	80a2fce <_ZdlPvj>
 80a12e0:	4620      	mov	r0, r4
 80a12e2:	bd10      	pop	{r4, pc}

080a12e4 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 80a12e4:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 80a12e6:	f002 fe8c 	bl	80a4002 <strcmp>
}
 80a12ea:	fab0 f080 	clz	r0, r0
 80a12ee:	0940      	lsrs	r0, r0, #5
 80a12f0:	bd08      	pop	{r3, pc}

080a12f2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 80a12f2:	b510      	push	{r4, lr}
 80a12f4:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 80a12f6:	f001 f973 	bl	80a25e0 <_Z16_fetch_usbserialv>
 80a12fa:	4284      	cmp	r4, r0
 80a12fc:	d105      	bne.n	80a130a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 80a12fe:	f001 f96f 	bl	80a25e0 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80a1302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBSerial1.end();
 80a1306:	f001 b951 	b.w	80a25ac <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
 80a130a:	f001 f9a7 	bl	80a265c <_Z17_fetch_usbserial1v>
 80a130e:	4284      	cmp	r4, r0
 80a1310:	d102      	bne.n	80a1318 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x26>
        USBSerial1.end();
 80a1312:	f001 f9a3 	bl	80a265c <_Z17_fetch_usbserial1v>
 80a1316:	e7f4      	b.n	80a1302 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x10>
    if (stream == &Serial1) {
 80a1318:	f001 fa24 	bl	80a2764 <_Z22__fetch_global_Serial1v>
 80a131c:	4284      	cmp	r4, r0
 80a131e:	d105      	bne.n	80a132c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
        Serial1.end();
 80a1320:	f001 fa20 	bl	80a2764 <_Z22__fetch_global_Serial1v>
}
 80a1324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 80a1328:	f001 ba19 	b.w	80a275e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 80a132c:	b12c      	cbz	r4, 80a133a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x48>
 80a132e:	6823      	ldr	r3, [r4, #0]
 80a1330:	4620      	mov	r0, r4
}
 80a1332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1336:	685b      	ldr	r3, [r3, #4]
 80a1338:	4718      	bx	r3
 80a133a:	bd10      	pop	{r4, pc}

080a133c <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a133c:	b538      	push	{r3, r4, r5, lr}
 80a133e:	4605      	mov	r5, r0
    return value(val, strlen(val));
 80a1340:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a1342:	460c      	mov	r4, r1
    return value(val, strlen(val));
 80a1344:	f002 fe6f 	bl	80a4026 <strlen>
 80a1348:	4621      	mov	r1, r4
 80a134a:	4602      	mov	r2, r0
 80a134c:	4628      	mov	r0, r5
}
 80a134e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return value(val, strlen(val));
 80a1352:	f001 bd20 	b.w	80a2d96 <_ZN5spark10JSONWriter5valueEPKcj>

080a1356 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 80a1356:	b570      	push	{r4, r5, r6, lr}
 80a1358:	4604      	mov	r4, r0
    write(str, strlen(str));
 80a135a:	4608      	mov	r0, r1
inline void spark::StreamLogHandler::write(const char *str) {
 80a135c:	460d      	mov	r5, r1
    write(str, strlen(str));
 80a135e:	f002 fe62 	bl	80a4026 <strlen>
 80a1362:	6823      	ldr	r3, [r4, #0]
 80a1364:	4602      	mov	r2, r0
 80a1366:	4629      	mov	r1, r5
 80a1368:	4620      	mov	r0, r4
}
 80a136a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write(str, strlen(str));
 80a136e:	68db      	ldr	r3, [r3, #12]
 80a1370:	4718      	bx	r3

080a1372 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 80a1372:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80a1374:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 80a1376:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80a137a:	2201      	movs	r2, #1
 80a137c:	68db      	ldr	r3, [r3, #12]
 80a137e:	f10d 0107 	add.w	r1, sp, #7
 80a1382:	4798      	blx	r3
}
 80a1384:	b003      	add	sp, #12
 80a1386:	f85d fb04 	ldr.w	pc, [sp], #4

080a138a <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
 80a138a:	b40e      	push	{r1, r2, r3}
 80a138c:	b503      	push	{r0, r1, lr}
 80a138e:	ab03      	add	r3, sp, #12
 80a1390:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
 80a1394:	2100      	movs	r1, #0
 80a1396:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
 80a1398:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
 80a139a:	f7ff ff37 	bl	80a120c <_ZN5Print7vprintfEbPKcSt9__va_list>
}
 80a139e:	b002      	add	sp, #8
 80a13a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80a13a4:	b003      	add	sp, #12
 80a13a6:	4770      	bx	lr

080a13a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a13a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 80a13ac:	f04f 0814 	mov.w	r8, #20
 80a13b0:	e9d0 9500 	ldrd	r9, r5, [r0]
 80a13b4:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80a13b6:	464c      	mov	r4, r9
 80a13b8:	fb08 f505 	mul.w	r5, r8, r5
 80a13bc:	9300      	str	r3, [sp, #0]
 80a13be:	10ab      	asrs	r3, r5, #2
 80a13c0:	4d17      	ldr	r5, [pc, #92]	; (80a1420 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80a13c2:	435d      	muls	r5, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 80a13c4:	2d00      	cmp	r5, #0
 80a13c6:	dd23      	ble.n	80a1410 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
 80a13c8:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 80a13ca:	fb08 f006 	mul.w	r0, r8, r6
 80a13ce:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 80a13d2:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80a13d6:	463a      	mov	r2, r7
 80a13d8:	455f      	cmp	r7, fp
 80a13da:	bf28      	it	cs
 80a13dc:	465a      	movcs	r2, fp
 80a13de:	5820      	ldr	r0, [r4, r0]
 80a13e0:	9101      	str	r1, [sp, #4]
 80a13e2:	f002 fe28 	bl	80a4036 <strncmp>
                if (cmp == 0) {
 80a13e6:	2301      	movs	r3, #1
 80a13e8:	9901      	ldr	r1, [sp, #4]
 80a13ea:	b978      	cbnz	r0, 80a140c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
 80a13ec:	455f      	cmp	r7, fp
 80a13ee:	d103      	bne.n	80a13f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80a13f0:	9a00      	ldr	r2, [sp, #0]
 80a13f2:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a13f4:	4635      	mov	r5, r6
 80a13f6:	e7e5      	b.n	80a13c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
 80a13f8:	bf8c      	ite	hi
 80a13fa:	2001      	movhi	r0, #1
 80a13fc:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 80a13fe:	2800      	cmp	r0, #0
 80a1400:	d0f8      	beq.n	80a13f4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80a1402:	1bae      	subs	r6, r5, r6
	      ++__first;
 80a1404:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
 80a1408:	3e01      	subs	r6, #1
 80a140a:	e7f3      	b.n	80a13f4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
 80a140c:	0fc0      	lsrs	r0, r0, #31
 80a140e:	e7f6      	b.n	80a13fe <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
 80a1410:	eba4 0409 	sub.w	r4, r4, r9
}
 80a1414:	4802      	ldr	r0, [pc, #8]	; (80a1420 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80a1416:	10a4      	asrs	r4, r4, #2
 80a1418:	4360      	muls	r0, r4
 80a141a:	b003      	add	sp, #12
 80a141c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1420:	cccccccd 	.word	0xcccccccd

080a1424 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a1424:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 80a1426:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 80a1428:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a142a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 80a142c:	b303      	cbz	r3, 80a1470 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 80a142e:	b1f9      	cbz	r1, 80a1470 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 80a1430:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 80a1432:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 80a1436:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 80a1438:	a903      	add	r1, sp, #12
 80a143a:	a801      	add	r0, sp, #4
 80a143c:	f7ff ff2b 	bl	80a1296 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a1440:	4601      	mov	r1, r0
 80a1442:	b1a8      	cbz	r0, 80a1470 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1444:	f10d 030b 	add.w	r3, sp, #11
 80a1448:	4620      	mov	r0, r4
 80a144a:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 80a144c:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1450:	f7ff ffaa 	bl	80a13a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 80a1454:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80a1458:	b153      	cbz	r3, 80a1470 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 80a145a:	2314      	movs	r3, #20
 80a145c:	6824      	ldr	r4, [r4, #0]
 80a145e:	fb03 4400 	mla	r4, r3, r0, r4
            if (node.level >= 0) {
 80a1462:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 80a1466:	3408      	adds	r4, #8
            if (node.level >= 0) {
 80a1468:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 80a146a:	bfa8      	it	ge
 80a146c:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
 80a146e:	e7e3      	b.n	80a1438 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 80a1470:	4630      	mov	r0, r6
 80a1472:	b004      	add	sp, #16
 80a1474:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1478 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 80a1478:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 80a147a:	4c0a      	ldr	r4, [pc, #40]	; (80a14a4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 80a147c:	7823      	ldrb	r3, [r4, #0]
 80a147e:	f3bf 8f5b 	dmb	ish
 80a1482:	07db      	lsls	r3, r3, #31
 80a1484:	d40b      	bmi.n	80a149e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 80a1486:	4620      	mov	r0, r4
 80a1488:	f7fe fe16 	bl	80a00b8 <__cxa_guard_acquire>
 80a148c:	b138      	cbz	r0, 80a149e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 80a148e:	4620      	mov	r0, r4
 80a1490:	f7fe fe17 	bl	80a00c2 <__cxa_guard_release>
 80a1494:	4a04      	ldr	r2, [pc, #16]	; (80a14a8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 80a1496:	4905      	ldr	r1, [pc, #20]	; (80a14ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 80a1498:	4805      	ldr	r0, [pc, #20]	; (80a14b0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 80a149a:	f001 fd93 	bl	80a2fc4 <__aeabi_atexit>
}
 80a149e:	4804      	ldr	r0, [pc, #16]	; (80a14b0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 80a14a0:	bd10      	pop	{r4, pc}
 80a14a2:	bf00      	nop
 80a14a4:	200000f8 	.word	0x200000f8
 80a14a8:	20000078 	.word	0x20000078
 80a14ac:	080a1293 	.word	0x080a1293
 80a14b0:	20000004 	.word	0x20000004

080a14b4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 80a14b4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 80a14b6:	4c0a      	ldr	r4, [pc, #40]	; (80a14e0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 80a14b8:	7823      	ldrb	r3, [r4, #0]
 80a14ba:	f3bf 8f5b 	dmb	ish
 80a14be:	07db      	lsls	r3, r3, #31
 80a14c0:	d40b      	bmi.n	80a14da <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 80a14c2:	4620      	mov	r0, r4
 80a14c4:	f7fe fdf8 	bl	80a00b8 <__cxa_guard_acquire>
 80a14c8:	b138      	cbz	r0, 80a14da <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 80a14ca:	4620      	mov	r0, r4
 80a14cc:	f7fe fdf9 	bl	80a00c2 <__cxa_guard_release>
 80a14d0:	4a04      	ldr	r2, [pc, #16]	; (80a14e4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 80a14d2:	4905      	ldr	r1, [pc, #20]	; (80a14e8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 80a14d4:	4805      	ldr	r0, [pc, #20]	; (80a14ec <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 80a14d6:	f001 fd75 	bl	80a2fc4 <__aeabi_atexit>
    return &factory;
}
 80a14da:	4804      	ldr	r0, [pc, #16]	; (80a14ec <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 80a14dc:	bd10      	pop	{r4, pc}
 80a14de:	bf00      	nop
 80a14e0:	200000fc 	.word	0x200000fc
 80a14e4:	20000078 	.word	0x20000078
 80a14e8:	080a1291 	.word	0x080a1291
 80a14ec:	20000008 	.word	0x20000008

080a14f0 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 80a14f0:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 80a14f2:	2500      	movs	r5, #0
 80a14f4:	4604      	mov	r4, r0
 80a14f6:	e9c0 5500 	strd	r5, r5, [r0]
 80a14fa:	e9c0 5504 	strd	r5, r5, [r0, #16]
 80a14fe:	6085      	str	r5, [r0, #8]
 80a1500:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 80a1502:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 80a1506:	f7ff fa93 	bl	80a0a30 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 80a150a:	f7ff ffb5 	bl	80a1478 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 80a150e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a1510:	f7ff ffd0 	bl	80a14b4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 80a1514:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a1516:	6220      	str	r0, [r4, #32]
}
 80a1518:	4620      	mov	r0, r4
 80a151a:	bd38      	pop	{r3, r4, r5, pc}

080a151c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 80a151c:	b510      	push	{r4, lr}
    static LogManager mgr;
 80a151e:	4c0b      	ldr	r4, [pc, #44]	; (80a154c <_ZN5spark10LogManager8instanceEv+0x30>)
 80a1520:	7823      	ldrb	r3, [r4, #0]
 80a1522:	f3bf 8f5b 	dmb	ish
 80a1526:	07db      	lsls	r3, r3, #31
 80a1528:	d40e      	bmi.n	80a1548 <_ZN5spark10LogManager8instanceEv+0x2c>
 80a152a:	4620      	mov	r0, r4
 80a152c:	f7fe fdc4 	bl	80a00b8 <__cxa_guard_acquire>
 80a1530:	b150      	cbz	r0, 80a1548 <_ZN5spark10LogManager8instanceEv+0x2c>
 80a1532:	4807      	ldr	r0, [pc, #28]	; (80a1550 <_ZN5spark10LogManager8instanceEv+0x34>)
 80a1534:	f7ff ffdc 	bl	80a14f0 <_ZN5spark10LogManagerC1Ev>
 80a1538:	4620      	mov	r0, r4
 80a153a:	f7fe fdc2 	bl	80a00c2 <__cxa_guard_release>
 80a153e:	4a05      	ldr	r2, [pc, #20]	; (80a1554 <_ZN5spark10LogManager8instanceEv+0x38>)
 80a1540:	4905      	ldr	r1, [pc, #20]	; (80a1558 <_ZN5spark10LogManager8instanceEv+0x3c>)
 80a1542:	4803      	ldr	r0, [pc, #12]	; (80a1550 <_ZN5spark10LogManager8instanceEv+0x34>)
 80a1544:	f001 fd3e 	bl	80a2fc4 <__aeabi_atexit>
    return &mgr;
}
 80a1548:	4801      	ldr	r0, [pc, #4]	; (80a1550 <_ZN5spark10LogManager8instanceEv+0x34>)
 80a154a:	bd10      	pop	{r4, pc}
 80a154c:	200000f4 	.word	0x200000f4
 80a1550:	20000104 	.word	0x20000104
 80a1554:	20000078 	.word	0x20000078
 80a1558:	080a1a0b 	.word	0x080a1a0b

080a155c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 80a155c:	2300      	movs	r3, #0
 80a155e:	4a02      	ldr	r2, [pc, #8]	; (80a1568 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 80a1560:	4902      	ldr	r1, [pc, #8]	; (80a156c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 80a1562:	4803      	ldr	r0, [pc, #12]	; (80a1570 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 80a1564:	f7ff bba6 	b.w	80a0cb4 <log_set_callbacks>
 80a1568:	080a18e9 	.word	0x080a18e9
 80a156c:	080a1875 	.word	0x080a1875
 80a1570:	080a17f5 	.word	0x080a17f5

080a1574 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 80a1574:	2300      	movs	r3, #0
 80a1576:	461a      	mov	r2, r3
 80a1578:	4619      	mov	r1, r3
 80a157a:	4618      	mov	r0, r3
 80a157c:	f7ff bb9a 	b.w	80a0cb4 <log_set_callbacks>

080a1580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80a1580:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80a1582:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a1584:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a1586:	b17c      	cbz	r4, 80a15a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a1588:	6863      	ldr	r3, [r4, #4]
 80a158a:	3b01      	subs	r3, #1
 80a158c:	6063      	str	r3, [r4, #4]
 80a158e:	b95b      	cbnz	r3, 80a15a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a1590:	6823      	ldr	r3, [r4, #0]
 80a1592:	4620      	mov	r0, r4
 80a1594:	689b      	ldr	r3, [r3, #8]
 80a1596:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1598:	68a3      	ldr	r3, [r4, #8]
 80a159a:	3b01      	subs	r3, #1
 80a159c:	60a3      	str	r3, [r4, #8]
 80a159e:	b91b      	cbnz	r3, 80a15a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a15a0:	6823      	ldr	r3, [r4, #0]
 80a15a2:	4620      	mov	r0, r4
 80a15a4:	68db      	ldr	r3, [r3, #12]
 80a15a6:	4798      	blx	r3
      }
 80a15a8:	4628      	mov	r0, r5
 80a15aa:	bd38      	pop	{r3, r4, r5, pc}

080a15ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a15ac:	680b      	ldr	r3, [r1, #0]
 80a15ae:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a15b0:	b113      	cbz	r3, 80a15b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a15b2:	685a      	ldr	r2, [r3, #4]
 80a15b4:	3201      	adds	r2, #1
 80a15b6:	605a      	str	r2, [r3, #4]
      }
 80a15b8:	4770      	bx	lr

080a15ba <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 80a15ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a15bc:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 80a15be:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a15c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80a15c4:	a801      	add	r0, sp, #4
 80a15c6:	9300      	str	r3, [sp, #0]
 80a15c8:	f7ff fff0 	bl	80a15ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a15cc:	466a      	mov	r2, sp
 80a15ce:	4629      	mov	r1, r5
 80a15d0:	4620      	mov	r0, r4
 80a15d2:	f001 fa8b 	bl	80a2aec <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a15d6:	a801      	add	r0, sp, #4
 80a15d8:	f7ff ffd2 	bl	80a1580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a15dc:	4620      	mov	r0, r4
 80a15de:	b003      	add	sp, #12
 80a15e0:	bd30      	pop	{r4, r5, pc}

080a15e2 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 80a15e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a15e4:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 80a15e6:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a15e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80a15ec:	a801      	add	r0, sp, #4
 80a15ee:	9300      	str	r3, [sp, #0]
 80a15f0:	f7ff ffdc 	bl	80a15ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a15f4:	466a      	mov	r2, sp
 80a15f6:	4629      	mov	r1, r5
 80a15f8:	4620      	mov	r0, r4
 80a15fa:	f001 faf3 	bl	80a2be4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a15fe:	a801      	add	r0, sp, #4
 80a1600:	f7ff ffbe 	bl	80a1580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1604:	4620      	mov	r0, r4
 80a1606:	b003      	add	sp, #12
 80a1608:	bd30      	pop	{r4, r5, pc}

080a160a <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 80a160a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a160c:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 80a160e:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1610:	f851 3b04 	ldr.w	r3, [r1], #4
 80a1614:	a801      	add	r0, sp, #4
 80a1616:	9300      	str	r3, [sp, #0]
 80a1618:	f7ff ffc8 	bl	80a15ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a161c:	466a      	mov	r2, sp
 80a161e:	4629      	mov	r1, r5
 80a1620:	4620      	mov	r0, r4
 80a1622:	f001 fabb 	bl	80a2b9c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a1626:	a801      	add	r0, sp, #4
 80a1628:	f7ff ffaa 	bl	80a1580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a162c:	4620      	mov	r0, r4
 80a162e:	b003      	add	sp, #12
 80a1630:	bd30      	pop	{r4, r5, pc}
	...

080a1634 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 80a1634:	b570      	push	{r4, r5, r6, lr}
 80a1636:	b08a      	sub	sp, #40	; 0x28
 80a1638:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 80a163a:	4601      	mov	r1, r0
 80a163c:	a804      	add	r0, sp, #16
 80a163e:	f7ff ffd0 	bl	80a15e2 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 80a1642:	4e14      	ldr	r6, [pc, #80]	; (80a1694 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 80a1644:	a804      	add	r0, sp, #16
 80a1646:	f001 fae5 	bl	80a2c14 <_ZN5spark18JSONObjectIterator4nextEv>
 80a164a:	b1e8      	cbz	r0, 80a1688 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 80a164c:	4668      	mov	r0, sp
 80a164e:	a904      	add	r1, sp, #16
 80a1650:	f7ff ffdb 	bl	80a160a <_ZNK5spark18JSONObjectIterator4nameEv>
 80a1654:	4631      	mov	r1, r6
 80a1656:	9802      	ldr	r0, [sp, #8]
 80a1658:	f7ff fe44 	bl	80a12e4 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 80a165c:	4604      	mov	r4, r0
 80a165e:	b110      	cbz	r0, 80a1666 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 80a1660:	1e2c      	subs	r4, r5, #0
 80a1662:	bf18      	it	ne
 80a1664:	2401      	movne	r4, #1
 80a1666:	a801      	add	r0, sp, #4
 80a1668:	f7ff ff8a 	bl	80a1580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a166c:	2c00      	cmp	r4, #0
 80a166e:	d0e9      	beq.n	80a1644 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 80a1670:	4668      	mov	r0, sp
 80a1672:	a904      	add	r1, sp, #16
 80a1674:	f7ff ffa1 	bl	80a15ba <_ZNK5spark18JSONObjectIterator5valueEv>
 80a1678:	4668      	mov	r0, sp
 80a167a:	f001 fa6e 	bl	80a2b5a <_ZNK5spark9JSONValue5toIntEv>
 80a167e:	6028      	str	r0, [r5, #0]
 80a1680:	a801      	add	r0, sp, #4
 80a1682:	f7ff ff7d 	bl	80a1580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1686:	e7dd      	b.n	80a1644 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 80a1688:	a805      	add	r0, sp, #20
 80a168a:	f7ff ff79 	bl	80a1580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a168e:	b00a      	add	sp, #40	; 0x28
 80a1690:	bd70      	pop	{r4, r5, r6, pc}
 80a1692:	bf00      	nop
 80a1694:	080a42b4 	.word	0x080a42b4

080a1698 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a1698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a169a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 80a169c:	4919      	ldr	r1, [pc, #100]	; (80a1704 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6c>)
 80a169e:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a16a0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 80a16a2:	f002 fcae 	bl	80a4002 <strcmp>
 80a16a6:	b948      	cbnz	r0, 80a16bc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
 80a16a8:	f000 ff9a 	bl	80a25e0 <_Z16_fetch_usbserialv>
 80a16ac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a16b0:	f000 ff78 	bl	80a25a4 <_ZN9USBSerial5beginEl>
        return &Serial;
 80a16b4:	f000 ff94 	bl	80a25e0 <_Z16_fetch_usbserialv>
}
 80a16b8:	b003      	add	sp, #12
 80a16ba:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "USBSerial1") == 0) {
 80a16bc:	4620      	mov	r0, r4
 80a16be:	4912      	ldr	r1, [pc, #72]	; (80a1708 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 80a16c0:	f002 fc9f 	bl	80a4002 <strcmp>
 80a16c4:	b940      	cbnz	r0, 80a16d8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x40>
        USBSerial1.begin();
 80a16c6:	f000 ffc9 	bl	80a265c <_Z17_fetch_usbserial1v>
 80a16ca:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a16ce:	f000 ff69 	bl	80a25a4 <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 80a16d2:	f000 ffc3 	bl	80a265c <_Z17_fetch_usbserial1v>
 80a16d6:	e7ef      	b.n	80a16b8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    if (strcmp(type, "Serial1") == 0) {
 80a16d8:	4620      	mov	r0, r4
 80a16da:	490c      	ldr	r1, [pc, #48]	; (80a170c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 80a16dc:	f002 fc91 	bl	80a4002 <strcmp>
 80a16e0:	b970      	cbnz	r0, 80a1700 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 80a16e2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 80a16e6:	a901      	add	r1, sp, #4
 80a16e8:	4628      	mov	r0, r5
        int baud = 9600;
 80a16ea:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 80a16ec:	f7ff ffa2 	bl	80a1634 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 80a16f0:	f001 f838 	bl	80a2764 <_Z22__fetch_global_Serial1v>
 80a16f4:	9901      	ldr	r1, [sp, #4]
 80a16f6:	f001 f82f 	bl	80a2758 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 80a16fa:	f001 f833 	bl	80a2764 <_Z22__fetch_global_Serial1v>
 80a16fe:	e7db      	b.n	80a16b8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
 80a1700:	2000      	movs	r0, #0
 80a1702:	e7d9      	b.n	80a16b8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
 80a1704:	080a42b9 	.word	0x080a42b9
 80a1708:	080a42c0 	.word	0x080a42c0
 80a170c:	080a42c3 	.word	0x080a42c3

080a1710 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a1710:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80a1712:	2614      	movs	r6, #20
 80a1714:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a1718:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a171a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a171e:	42ae      	cmp	r6, r5
 80a1720:	d005      	beq.n	80a172e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 80a1722:	f105 0008 	add.w	r0, r5, #8
 80a1726:	f7ff fff3 	bl	80a1710 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a172a:	3514      	adds	r5, #20
 80a172c:	e7f7      	b.n	80a171e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80a172e:	6820      	ldr	r0, [r4, #0]
 80a1730:	f7ff fb6c 	bl	80a0e0c <free>
}
 80a1734:	4620      	mov	r0, r4
 80a1736:	bd70      	pop	{r4, r5, r6, pc}

080a1738 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a1738:	b570      	push	{r4, r5, r6, lr}
 80a173a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a173c:	e9d0 5300 	ldrd	r5, r3, [r0]
 80a1740:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 80a1744:	42ae      	cmp	r6, r5
 80a1746:	d004      	beq.n	80a1752 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 80a1748:	4628      	mov	r0, r5
 80a174a:	f7ff fc43 	bl	80a0fd4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 80a174e:	3510      	adds	r5, #16
 80a1750:	e7f8      	b.n	80a1744 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 80a1752:	6820      	ldr	r0, [r4, #0]
 80a1754:	f7ff fb5a 	bl	80a0e0c <free>
}
 80a1758:	4620      	mov	r0, r4
 80a175a:	bd70      	pop	{r4, r5, r6, pc}

080a175c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 80a175c:	b510      	push	{r4, lr}
 80a175e:	4604      	mov	r4, r0
 80a1760:	300c      	adds	r0, #12
 80a1762:	f7ff ffd5 	bl	80a1710 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a1766:	4620      	mov	r0, r4
 80a1768:	f7ff ffe6 	bl	80a1738 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a176c:	4620      	mov	r0, r4
 80a176e:	bd10      	pop	{r4, pc}

080a1770 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 80a1770:	b510      	push	{r4, lr}
 80a1772:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 80a1774:	4b03      	ldr	r3, [pc, #12]	; (80a1784 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 80a1776:	f840 3b04 	str.w	r3, [r0], #4
 80a177a:	f7ff ffef 	bl	80a175c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 80a177e:	4620      	mov	r0, r4
 80a1780:	bd10      	pop	{r4, pc}
 80a1782:	bf00      	nop
 80a1784:	080a4230 	.word	0x080a4230

080a1788 <_ZN5spark16StreamLogHandlerD0Ev>:
 80a1788:	b510      	push	{r4, lr}
 80a178a:	4604      	mov	r4, r0
 80a178c:	f7ff fff0 	bl	80a1770 <_ZN5spark16StreamLogHandlerD1Ev>
 80a1790:	4620      	mov	r0, r4
 80a1792:	2124      	movs	r1, #36	; 0x24
 80a1794:	f001 fc1b 	bl	80a2fce <_ZdlPvj>
 80a1798:	4620      	mov	r0, r4
 80a179a:	bd10      	pop	{r4, pc}

080a179c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 80a179c:	b510      	push	{r4, lr}
 80a179e:	4604      	mov	r4, r0
 80a17a0:	4b02      	ldr	r3, [pc, #8]	; (80a17ac <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 80a17a2:	6003      	str	r3, [r0, #0]
 80a17a4:	f7ff ffe4 	bl	80a1770 <_ZN5spark16StreamLogHandlerD1Ev>
 80a17a8:	4620      	mov	r0, r4
 80a17aa:	bd10      	pop	{r4, pc}
 80a17ac:	080a4368 	.word	0x080a4368

080a17b0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 80a17b0:	b510      	push	{r4, lr}
 80a17b2:	4604      	mov	r4, r0
 80a17b4:	f7ff fff2 	bl	80a179c <_ZN5spark20JSONStreamLogHandlerD1Ev>
 80a17b8:	4620      	mov	r0, r4
 80a17ba:	2124      	movs	r1, #36	; 0x24
 80a17bc:	f001 fc07 	bl	80a2fce <_ZdlPvj>
 80a17c0:	4620      	mov	r0, r4
 80a17c2:	bd10      	pop	{r4, pc}

080a17c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 80a17c4:	2200      	movs	r2, #0
 80a17c6:	e9c0 2200 	strd	r2, r2, [r0]
 80a17ca:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 80a17cc:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 80a17ce:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a17d0:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a17d2:	6004      	str	r4, [r0, #0]
 80a17d4:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a17d6:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a17d8:	6044      	str	r4, [r0, #4]
 80a17da:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a17dc:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a17de:	6084      	str	r4, [r0, #8]
}
 80a17e0:	bd10      	pop	{r4, pc}

080a17e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80a17e2:	b510      	push	{r4, lr}
 80a17e4:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80a17e6:	6803      	ldr	r3, [r0, #0]
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a17e8:	6818      	ldr	r0, [r3, #0]
 80a17ea:	f7ff f939 	bl	80a0a60 <os_mutex_recursive_unlock>
 80a17ee:	4620      	mov	r0, r4
 80a17f0:	bd10      	pop	{r4, pc}
	...

080a17f4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80a17f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a17f8:	b087      	sub	sp, #28
 80a17fa:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 80a17fc:	4b1c      	ldr	r3, [pc, #112]	; (80a1870 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 80a17fe:	4680      	mov	r8, r0
 80a1800:	685b      	ldr	r3, [r3, #4]
 80a1802:	4689      	mov	r9, r1
 80a1804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a1808:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a180a:	b96b      	cbnz	r3, 80a1828 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 80a180c:	f7ff fe86 	bl	80a151c <_ZN5spark10LogManager8instanceEv>
 80a1810:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a1812:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80a1816:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a1818:	9305      	str	r3, [sp, #20]
 80a181a:	f7ff f919 	bl	80a0a50 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
 80a181e:	7b23      	ldrb	r3, [r4, #12]
 80a1820:	b12b      	cbz	r3, 80a182e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 80a1822:	a805      	add	r0, sp, #20
 80a1824:	f7ff ffdd 	bl	80a17e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 80a1828:	b007      	add	sp, #28
 80a182a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a182e:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 80a1830:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 80a1834:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 80a1836:	e9d4 5300 	ldrd	r5, r3, [r4]
 80a183a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a183e:	45aa      	cmp	sl, r5
 80a1840:	d012      	beq.n	80a1868 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 80a1842:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 80a1846:	4631      	mov	r1, r6
 80a1848:	1d38      	adds	r0, r7, #4
 80a184a:	f7ff fdeb 	bl	80a1424 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a184e:	4581      	cmp	r9, r0
 80a1850:	d3f5      	bcc.n	80a183e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 80a1852:	9a03      	ldr	r2, [sp, #12]
 80a1854:	683b      	ldr	r3, [r7, #0]
 80a1856:	9200      	str	r2, [sp, #0]
 80a1858:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80a185c:	464a      	mov	r2, r9
 80a185e:	4633      	mov	r3, r6
 80a1860:	4641      	mov	r1, r8
 80a1862:	4638      	mov	r0, r7
 80a1864:	47d8      	blx	fp
 80a1866:	e7ea      	b.n	80a183e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 80a1868:	2300      	movs	r3, #0
 80a186a:	7323      	strb	r3, [r4, #12]
 80a186c:	e7d9      	b.n	80a1822 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 80a186e:	bf00      	nop
 80a1870:	e000ed00 	.word	0xe000ed00

080a1874 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80a1874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1878:	469b      	mov	fp, r3
 80a187a:	4b1a      	ldr	r3, [pc, #104]	; (80a18e4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 80a187c:	4680      	mov	r8, r0
 80a187e:	685b      	ldr	r3, [r3, #4]
 80a1880:	4689      	mov	r9, r1
 80a1882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a1886:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
 80a1888:	b96b      	cbnz	r3, 80a18a6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 80a188a:	f7ff fe47 	bl	80a151c <_ZN5spark10LogManager8instanceEv>
 80a188e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a1890:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a1894:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80a1896:	9301      	str	r3, [sp, #4]
 80a1898:	f7ff f8da 	bl	80a0a50 <os_mutex_recursive_lock>
        if (that->isActive()) {
 80a189c:	7b23      	ldrb	r3, [r4, #12]
 80a189e:	b12b      	cbz	r3, 80a18ac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 80a18a0:	a801      	add	r0, sp, #4
 80a18a2:	f7ff ff9e 	bl	80a17e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80a18a6:	b003      	add	sp, #12
 80a18a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 80a18ac:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 80a18ae:	b2f6      	uxtb	r6, r6
 80a18b0:	7323      	strb	r3, [r4, #12]
 80a18b2:	e9d4 5300 	ldrd	r5, r3, [r4]
 80a18b6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a18ba:	4555      	cmp	r5, sl
 80a18bc:	d00e      	beq.n	80a18dc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 80a18be:	f855 7b04 	ldr.w	r7, [r5], #4
 80a18c2:	4659      	mov	r1, fp
 80a18c4:	1d38      	adds	r0, r7, #4
 80a18c6:	f7ff fdad 	bl	80a1424 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a18ca:	4286      	cmp	r6, r0
 80a18cc:	d3f5      	bcc.n	80a18ba <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 80a18ce:	683b      	ldr	r3, [r7, #0]
 80a18d0:	464a      	mov	r2, r9
 80a18d2:	4641      	mov	r1, r8
 80a18d4:	4638      	mov	r0, r7
 80a18d6:	68db      	ldr	r3, [r3, #12]
 80a18d8:	4798      	blx	r3
 80a18da:	e7ee      	b.n	80a18ba <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 80a18dc:	2300      	movs	r3, #0
 80a18de:	7323      	strb	r3, [r4, #12]
 80a18e0:	e7de      	b.n	80a18a0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 80a18e2:	bf00      	nop
 80a18e4:	e000ed00 	.word	0xe000ed00

080a18e8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 80a18e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a18ec:	4b16      	ldr	r3, [pc, #88]	; (80a1948 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 80a18ee:	4605      	mov	r5, r0
 80a18f0:	685b      	ldr	r3, [r3, #4]
 80a18f2:	460f      	mov	r7, r1
 80a18f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (HAL_IsISR()) {
 80a18f8:	bb1b      	cbnz	r3, 80a1942 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 80a18fa:	f7ff fe0f 	bl	80a151c <_ZN5spark10LogManager8instanceEv>
 80a18fe:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a1900:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a1904:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80a1906:	9301      	str	r3, [sp, #4]
 80a1908:	f7ff f8a2 	bl	80a0a50 <os_mutex_recursive_lock>
 80a190c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 80a1910:	2446      	movs	r4, #70	; 0x46
 80a1912:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a1916:	45b0      	cmp	r8, r6
 80a1918:	d109      	bne.n	80a192e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 80a191a:	a801      	add	r0, sp, #4
 80a191c:	f7ff ff61 	bl	80a17e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 80a1920:	42a5      	cmp	r5, r4
 80a1922:	bfb4      	ite	lt
 80a1924:	2000      	movlt	r0, #0
 80a1926:	2001      	movge	r0, #1
}
 80a1928:	b002      	add	sp, #8
 80a192a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 80a192e:	f856 0b04 	ldr.w	r0, [r6], #4
 80a1932:	4639      	mov	r1, r7
 80a1934:	3004      	adds	r0, #4
 80a1936:	f7ff fd75 	bl	80a1424 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 80a193a:	4284      	cmp	r4, r0
 80a193c:	bfa8      	it	ge
 80a193e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 80a1940:	e7e9      	b.n	80a1916 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 80a1942:	2000      	movs	r0, #0
 80a1944:	e7f0      	b.n	80a1928 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 80a1946:	bf00      	nop
 80a1948:	e000ed00 	.word	0xe000ed00

080a194c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 80a194c:	460b      	mov	r3, r1
 80a194e:	b570      	push	{r4, r5, r6, lr}
 80a1950:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 80a1952:	c805      	ldmia	r0, {r0, r2}
 80a1954:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 80a1958:	4282      	cmp	r2, r0
 80a195a:	d007      	beq.n	80a196c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x20>
 80a195c:	4601      	mov	r1, r0
            if (*p == value) {
 80a195e:	681d      	ldr	r5, [r3, #0]
 80a1960:	f851 6b04 	ldr.w	r6, [r1], #4
 80a1964:	42ae      	cmp	r6, r5
 80a1966:	d003      	beq.n	80a1970 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
 80a1968:	4608      	mov	r0, r1
 80a196a:	e7f5      	b.n	80a1958 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
        return false;
 80a196c:	2000      	movs	r0, #0
}
 80a196e:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a1970:	1a52      	subs	r2, r2, r1
 80a1972:	f002 fae9 	bl	80a3f48 <memmove>
    --size_;
 80a1976:	6863      	ldr	r3, [r4, #4]
    return true;
 80a1978:	2001      	movs	r0, #1
    --size_;
 80a197a:	3b01      	subs	r3, #1
 80a197c:	6063      	str	r3, [r4, #4]
    return true;
 80a197e:	e7f6      	b.n	80a196e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>

080a1980 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 80a1980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a1982:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a1984:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a1988:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 80a198a:	9101      	str	r1, [sp, #4]
 80a198c:	9303      	str	r3, [sp, #12]
 80a198e:	f7ff f85f 	bl	80a0a50 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80a1992:	4620      	mov	r0, r4
 80a1994:	a901      	add	r1, sp, #4
 80a1996:	f7ff ffd9 	bl	80a194c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 80a199a:	b118      	cbz	r0, 80a19a4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 80a199c:	6863      	ldr	r3, [r4, #4]
 80a199e:	b90b      	cbnz	r3, 80a19a4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 80a19a0:	f7ff fde8 	bl	80a1574 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a19a4:	a803      	add	r0, sp, #12
 80a19a6:	f7ff ff1c 	bl	80a17e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80a19aa:	b004      	add	sp, #16
 80a19ac:	bd10      	pop	{r4, pc}

080a19ae <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 80a19ae:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 80a19b0:	b570      	push	{r4, r5, r6, lr}
 80a19b2:	4604      	mov	r4, r0
 80a19b4:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 80a19b8:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 80a19bc:	42ae      	cmp	r6, r5
 80a19be:	d015      	beq.n	80a19ec <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 80a19c0:	4620      	mov	r0, r4
 80a19c2:	f105 0110 	add.w	r1, r5, #16
 80a19c6:	f7ff ffc1 	bl	80a194c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 80a19ca:	6863      	ldr	r3, [r4, #4]
 80a19cc:	b90b      	cbnz	r3, 80a19d2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 80a19ce:	f7ff fdd1 	bl	80a1574 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 80a19d2:	69e0      	ldr	r0, [r4, #28]
 80a19d4:	6929      	ldr	r1, [r5, #16]
 80a19d6:	6803      	ldr	r3, [r0, #0]
 80a19d8:	68db      	ldr	r3, [r3, #12]
 80a19da:	4798      	blx	r3
        if (h.stream) {
 80a19dc:	6969      	ldr	r1, [r5, #20]
 80a19de:	b119      	cbz	r1, 80a19e8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 80a19e0:	6a20      	ldr	r0, [r4, #32]
 80a19e2:	6803      	ldr	r3, [r0, #0]
 80a19e4:	68db      	ldr	r3, [r3, #12]
 80a19e6:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 80a19e8:	3518      	adds	r5, #24
 80a19ea:	e7e7      	b.n	80a19bc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 80a19ec:	2618      	movs	r6, #24
 80a19ee:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80a19f2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a19f6:	42ae      	cmp	r6, r5
 80a19f8:	d004      	beq.n	80a1a04 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 80a19fa:	4628      	mov	r0, r5
 80a19fc:	f7ff faea 	bl	80a0fd4 <_ZN6StringD1Ev>
 80a1a00:	3518      	adds	r5, #24
 80a1a02:	e7f8      	b.n	80a19f6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 80a1a04:	2300      	movs	r3, #0
 80a1a06:	6163      	str	r3, [r4, #20]
}
 80a1a08:	bd70      	pop	{r4, r5, r6, pc}

080a1a0a <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 80a1a0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a1a0c:	4604      	mov	r4, r0
    resetSystemCallbacks();
 80a1a0e:	f7ff fdb1 	bl	80a1574 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a1a12:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80a1a16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a1a18:	9301      	str	r3, [sp, #4]
 80a1a1a:	f7ff f819 	bl	80a0a50 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
 80a1a1e:	4620      	mov	r0, r4
 80a1a20:	f7ff ffc5 	bl	80a19ae <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 80a1a24:	a801      	add	r0, sp, #4
 80a1a26:	f7ff fedc 	bl	80a17e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 80a1a2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a1a2c:	b108      	cbz	r0, 80a1a32 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 80a1a2e:	f7ff f807 	bl	80a0a40 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 80a1a32:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80a1a36:	2618      	movs	r6, #24
 80a1a38:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a1a3c:	42ae      	cmp	r6, r5
 80a1a3e:	d004      	beq.n	80a1a4a <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 80a1a40:	4628      	mov	r0, r5
 80a1a42:	f7ff fac7 	bl	80a0fd4 <_ZN6StringD1Ev>
 80a1a46:	3518      	adds	r5, #24
 80a1a48:	e7f8      	b.n	80a1a3c <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 80a1a4a:	6920      	ldr	r0, [r4, #16]
 80a1a4c:	f7ff f9de 	bl	80a0e0c <free>
 80a1a50:	6820      	ldr	r0, [r4, #0]
 80a1a52:	f7ff f9db 	bl	80a0e0c <free>
}
 80a1a56:	4620      	mov	r0, r4
 80a1a58:	b002      	add	sp, #8
 80a1a5a:	bd70      	pop	{r4, r5, r6, pc}

080a1a5c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 80a1a5c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a1a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a60:	4606      	mov	r6, r0
 80a1a62:	460c      	mov	r4, r1
 80a1a64:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 80a1a66:	d927      	bls.n	80a1ab8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
 80a1a68:	4290      	cmp	r0, r2
 80a1a6a:	d226      	bcs.n	80a1aba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
        capacity_(0) {
 80a1a6c:	2600      	movs	r6, #0
            --end;
 80a1a6e:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 80a1a72:	1a6c      	subs	r4, r5, r1
 80a1a74:	f1a1 0714 	sub.w	r7, r1, #20
 80a1a78:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80a1a7a:	42af      	cmp	r7, r5
 80a1a7c:	d03d      	beq.n	80a1afa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
 80a1a7e:	b1a4      	cbz	r4, 80a1aaa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
 80a1a80:	682b      	ldr	r3, [r5, #0]
 80a1a82:	6023      	str	r3, [r4, #0]
 80a1a84:	88ab      	ldrh	r3, [r5, #4]
 80a1a86:	80a3      	strh	r3, [r4, #4]
 80a1a88:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
        capacity_(0) {
 80a1a8c:	e9c4 6602 	strd	r6, r6, [r4, #8]
 80a1a90:	6126      	str	r6, [r4, #16]
 80a1a92:	80e3      	strh	r3, [r4, #6]
 80a1a94:	68ab      	ldr	r3, [r5, #8]
 80a1a96:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1a98:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1a9a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1a9c:	68ea      	ldr	r2, [r5, #12]
 80a1a9e:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1aa0:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1aa2:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1aa4:	692a      	ldr	r2, [r5, #16]
 80a1aa6:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1aa8:	612b      	str	r3, [r5, #16]
 80a1aaa:	f105 0008 	add.w	r0, r5, #8
 80a1aae:	f7ff fe2f 	bl	80a1710 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 80a1ab2:	3d14      	subs	r5, #20
 80a1ab4:	3c14      	subs	r4, #20
 80a1ab6:	e7e0      	b.n	80a1a7a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
 80a1ab8:	d01f      	beq.n	80a1afa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
 80a1aba:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
 80a1abc:	42ac      	cmp	r4, r5
 80a1abe:	d01c      	beq.n	80a1afa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
 80a1ac0:	b1a6      	cbz	r6, 80a1aec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
 80a1ac2:	6823      	ldr	r3, [r4, #0]
 80a1ac4:	6033      	str	r3, [r6, #0]
 80a1ac6:	88a3      	ldrh	r3, [r4, #4]
 80a1ac8:	80b3      	strh	r3, [r6, #4]
 80a1aca:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        capacity_(0) {
 80a1ace:	e9c6 7702 	strd	r7, r7, [r6, #8]
 80a1ad2:	6137      	str	r7, [r6, #16]
 80a1ad4:	80f3      	strh	r3, [r6, #6]
      __a = _GLIBCXX_MOVE(__b);
 80a1ad6:	68a3      	ldr	r3, [r4, #8]
 80a1ad8:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1ada:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1adc:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1ade:	68e2      	ldr	r2, [r4, #12]
 80a1ae0:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1ae2:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1ae4:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1ae6:	6922      	ldr	r2, [r4, #16]
 80a1ae8:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1aea:	6123      	str	r3, [r4, #16]
 80a1aec:	f104 0008 	add.w	r0, r4, #8
 80a1af0:	f7ff fe0e 	bl	80a1710 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 80a1af4:	3414      	adds	r4, #20
 80a1af6:	3614      	adds	r6, #20
 80a1af8:	e7e0      	b.n	80a1abc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
 80a1afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1afc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a1afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a1afe:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 80a1b02:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a1b04:	4604      	mov	r4, r0
 80a1b06:	460e      	mov	r6, r1
 80a1b08:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a1b0a:	db0d      	blt.n	80a1b28 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
 80a1b0c:	3501      	adds	r5, #1
        if (n > 0) {
 80a1b0e:	2d00      	cmp	r5, #0
 80a1b10:	6800      	ldr	r0, [r0, #0]
 80a1b12:	dd04      	ble.n	80a1b1e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
 80a1b14:	00a9      	lsls	r1, r5, #2
 80a1b16:	f7ff f981 	bl	80a0e1c <realloc>
            if (!d) {
 80a1b1a:	b918      	cbnz	r0, 80a1b24 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
 80a1b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 80a1b1e:	f7ff f975 	bl	80a0e0c <free>
        T* d = nullptr;
 80a1b22:	2000      	movs	r0, #0
        data_ = d;
 80a1b24:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 80a1b26:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
 80a1b28:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
 80a1b2a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 80a1b2c:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
 80a1b30:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a1b32:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
 80a1b36:	1d08      	adds	r0, r1, #4
 80a1b38:	f002 fa06 	bl	80a3f48 <memmove>
    new(p) T(std::move(value));
 80a1b3c:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 80a1b40:	6863      	ldr	r3, [r4, #4]
    return true;
 80a1b42:	2001      	movs	r0, #1
    ++size_;
 80a1b44:	3301      	adds	r3, #1
 80a1b46:	6063      	str	r3, [r4, #4]
    return true;
 80a1b48:	e7e8      	b.n	80a1b1c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

080a1b4a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 80a1b4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1b4c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a1b4e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80a1b52:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
 80a1b54:	460d      	mov	r5, r1
 80a1b56:	9301      	str	r3, [sp, #4]
 80a1b58:	f7fe ff7a 	bl	80a0a50 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
 80a1b5c:	e9d4 3100 	ldrd	r3, r1, [r4]
 80a1b60:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
 80a1b64:	4283      	cmp	r3, r0
 80a1b66:	461a      	mov	r2, r3
 80a1b68:	d00a      	beq.n	80a1b80 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 80a1b6a:	6812      	ldr	r2, [r2, #0]
 80a1b6c:	3304      	adds	r3, #4
 80a1b6e:	42aa      	cmp	r2, r5
 80a1b70:	d1f8      	bne.n	80a1b64 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
 80a1b72:	a801      	add	r0, sp, #4
 80a1b74:	f7ff fe35 	bl	80a17e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
 80a1b78:	2500      	movs	r5, #0
}
 80a1b7a:	4628      	mov	r0, r5
 80a1b7c:	b003      	add	sp, #12
 80a1b7e:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
 80a1b80:	462a      	mov	r2, r5
 80a1b82:	4620      	mov	r0, r4
 80a1b84:	f7ff ffba 	bl	80a1afc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 80a1b88:	4605      	mov	r5, r0
 80a1b8a:	2800      	cmp	r0, #0
 80a1b8c:	d0f1      	beq.n	80a1b72 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 80a1b8e:	6863      	ldr	r3, [r4, #4]
 80a1b90:	2b01      	cmp	r3, #1
 80a1b92:	d101      	bne.n	80a1b98 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 80a1b94:	f7ff fce2 	bl	80a155c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a1b98:	a801      	add	r0, sp, #4
 80a1b9a:	f7ff fe22 	bl	80a17e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 80a1b9e:	e7ec      	b.n	80a1b7a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

080a1ba0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80a1ba0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a1ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1ba4:	4604      	mov	r4, r0
 80a1ba6:	460d      	mov	r5, r1
 80a1ba8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a1baa:	d914      	bls.n	80a1bd6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 80a1bac:	4290      	cmp	r0, r2
 80a1bae:	d213      	bcs.n	80a1bd8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 80a1bb0:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 80a1bb4:	1a75      	subs	r5, r6, r1
 80a1bb6:	f1a1 0710 	sub.w	r7, r1, #16
 80a1bba:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a1bbc:	42b7      	cmp	r7, r6
 80a1bbe:	d018      	beq.n	80a1bf2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 80a1bc0:	b11c      	cbz	r4, 80a1bca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 80a1bc2:	4631      	mov	r1, r6
 80a1bc4:	4620      	mov	r0, r4
 80a1bc6:	f7ff fa7f 	bl	80a10c8 <_ZN6StringC1EOS_>
                end->~T();
 80a1bca:	4630      	mov	r0, r6
 80a1bcc:	f7ff fa02 	bl	80a0fd4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80a1bd0:	3e10      	subs	r6, #16
 80a1bd2:	3c10      	subs	r4, #16
 80a1bd4:	e7f2      	b.n	80a1bbc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80a1bd6:	d00c      	beq.n	80a1bf2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 80a1bd8:	42b5      	cmp	r5, r6
 80a1bda:	d00a      	beq.n	80a1bf2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 80a1bdc:	b11c      	cbz	r4, 80a1be6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 80a1bde:	4629      	mov	r1, r5
 80a1be0:	4620      	mov	r0, r4
 80a1be2:	f7ff fa71 	bl	80a10c8 <_ZN6StringC1EOS_>
                p->~T();
 80a1be6:	4628      	mov	r0, r5
 80a1be8:	f7ff f9f4 	bl	80a0fd4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80a1bec:	3510      	adds	r5, #16
 80a1bee:	3410      	adds	r4, #16
 80a1bf0:	e7f2      	b.n	80a1bd8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 80a1bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1bf4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 80a1bf4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 80a1bf6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 80a1bf8:	4605      	mov	r5, r0
        if (n > 0) {
 80a1bfa:	dd11      	ble.n	80a1c20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 80a1bfc:	0130      	lsls	r0, r6, #4
 80a1bfe:	f7ff f8fd 	bl	80a0dfc <malloc>
            if (!d) {
 80a1c02:	4604      	mov	r4, r0
 80a1c04:	b158      	cbz	r0, 80a1c1e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 80a1c06:	e9d5 1200 	ldrd	r1, r2, [r5]
 80a1c0a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80a1c0e:	f7ff ffc7 	bl	80a1ba0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80a1c12:	6828      	ldr	r0, [r5, #0]
 80a1c14:	f7ff f8fa 	bl	80a0e0c <free>
        return true;
 80a1c18:	2001      	movs	r0, #1
        data_ = d;
 80a1c1a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 80a1c1c:	60ae      	str	r6, [r5, #8]
    }
 80a1c1e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 80a1c20:	2400      	movs	r4, #0
 80a1c22:	e7f6      	b.n	80a1c12 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

080a1c24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a1c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1c28:	4691      	mov	r9, r2
        capacity_(0) {
 80a1c2a:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a1c2c:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a1c2e:	b097      	sub	sp, #92	; 0x5c
 80a1c30:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
 80a1c32:	f8d9 1004 	ldr.w	r1, [r9, #4]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a1c36:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 80a1c38:	4299      	cmp	r1, r3
        capacity_(0) {
 80a1c3a:	e9c0 3300 	strd	r3, r3, [r0]
 80a1c3e:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80a1c42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80a1c46:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a1c4a:	7602      	strb	r2, [r0, #24]
 80a1c4c:	930c      	str	r3, [sp, #48]	; 0x30
    if (n > capacity_ && !realloc(n)) {
 80a1c4e:	dc23      	bgt.n	80a1c98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 80a1c50:	e9d9 5700 	ldrd	r5, r7, [r9]
 80a1c54:	2314      	movs	r3, #20
 80a1c56:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 80a1c5a:	42af      	cmp	r7, r5
 80a1c5c:	d03b      	beq.n	80a1cd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 80a1c5e:	4629      	mov	r1, r5
 80a1c60:	a80d      	add	r0, sp, #52	; 0x34
 80a1c62:	f7ff fa31 	bl	80a10c8 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 80a1c66:	a90d      	add	r1, sp, #52	; 0x34
 80a1c68:	a811      	add	r0, sp, #68	; 0x44
 80a1c6a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a1c6c:	f7ff fa2c 	bl	80a10c8 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a1c70:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 80a1c74:	4299      	cmp	r1, r3
 80a1c76:	da1b      	bge.n	80a1cb0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 80a1c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
 80a1c7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
 80a1c7c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 80a1c80:	4631      	mov	r1, r6
 80a1c82:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80a1c86:	f106 0010 	add.w	r0, r6, #16
 80a1c8a:	f7ff ff89 	bl	80a1ba0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 80a1c8e:	b9ee      	cbnz	r6, 80a1ccc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 80a1c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a1c92:	3301      	adds	r3, #1
 80a1c94:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
 80a1c96:	e011      	b.n	80a1cbc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 80a1c98:	a80a      	add	r0, sp, #40	; 0x28
 80a1c9a:	f7ff ffab 	bl	80a1bf4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a1c9e:	2800      	cmp	r0, #0
 80a1ca0:	d1d6      	bne.n	80a1c50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
 80a1ca2:	a80a      	add	r0, sp, #40	; 0x28
 80a1ca4:	f7ff fd48 	bl	80a1738 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a1ca8:	4620      	mov	r0, r4
 80a1caa:	b017      	add	sp, #92	; 0x5c
 80a1cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a1cb0:	3101      	adds	r1, #1
 80a1cb2:	a80a      	add	r0, sp, #40	; 0x28
 80a1cb4:	f7ff ff9e 	bl	80a1bf4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a1cb8:	2800      	cmp	r0, #0
 80a1cba:	d1dd      	bne.n	80a1c78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 80a1cbc:	a811      	add	r0, sp, #68	; 0x44
 80a1cbe:	f7ff f989 	bl	80a0fd4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 80a1cc2:	a80d      	add	r0, sp, #52	; 0x34
 80a1cc4:	f7ff f986 	bl	80a0fd4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 80a1cc8:	3514      	adds	r5, #20
 80a1cca:	e7c6      	b.n	80a1c5a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 80a1ccc:	4630      	mov	r0, r6
 80a1cce:	a911      	add	r1, sp, #68	; 0x44
 80a1cd0:	f7ff f9fa 	bl	80a10c8 <_ZN6StringC1EOS_>
 80a1cd4:	e7dc      	b.n	80a1c90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 80a1cd6:	2600      	movs	r6, #0
 80a1cd8:	f04f 0a14 	mov.w	sl, #20
        size_t size = 0; // Name length
 80a1cdc:	4637      	mov	r7, r6
 80a1cde:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
 80a1ce2:	960f      	str	r6, [sp, #60]	; 0x3c
    for (int i = 0; i < cats.size(); ++i) {
 80a1ce4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a1ce8:	429e      	cmp	r6, r3
 80a1cea:	f280 8097 	bge.w	80a1e1c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
 80a1cee:	0133      	lsls	r3, r6, #4
 80a1cf0:	58d3      	ldr	r3, [r2, r3]
 80a1cf2:	9308      	str	r3, [sp, #32]
        if (!category) {
 80a1cf4:	b90b      	cbnz	r3, 80a1cfa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
 80a1cf6:	3601      	adds	r6, #1
 80a1cf8:	e7f4      	b.n	80a1ce4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
 80a1cfa:	fb0a f306 	mul.w	r3, sl, r6
 80a1cfe:	9709      	str	r7, [sp, #36]	; 0x24
 80a1d00:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
 80a1d02:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
 80a1d04:	a909      	add	r1, sp, #36	; 0x24
 80a1d06:	a808      	add	r0, sp, #32
 80a1d08:	f7ff fac5 	bl	80a1296 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a1d0c:	4683      	mov	fp, r0
 80a1d0e:	2800      	cmp	r0, #0
 80a1d10:	d0f1      	beq.n	80a1cf6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1d12:	4601      	mov	r1, r0
 80a1d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a1d16:	4628      	mov	r0, r5
 80a1d18:	f10d 031f 	add.w	r3, sp, #31
            bool found = false;
 80a1d1c:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1d20:	f7ff fb42 	bl	80a13a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a1d24:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1d28:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a1d2a:	f1b8 0f00 	cmp.w	r8, #0
 80a1d2e:	d166      	bne.n	80a1dfe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 80a1d30:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80a1d34:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
            level(-1) {
 80a1d38:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 80a1d3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a1d40:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80a1d44:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 80a1d48:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a1d4c:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 80a1d50:	4293      	cmp	r3, r2
 80a1d52:	db1a      	blt.n	80a1d8a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
 80a1d54:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
 80a1d58:	f1bb 0f00 	cmp.w	fp, #0
 80a1d5c:	dd4a      	ble.n	80a1df4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
 80a1d5e:	fb0a f00b 	mul.w	r0, sl, fp
 80a1d62:	f7ff f84b 	bl	80a0dfc <malloc>
            if (!d) {
 80a1d66:	9004      	str	r0, [sp, #16]
 80a1d68:	2800      	cmp	r0, #0
 80a1d6a:	d045      	beq.n	80a1df8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
 80a1d6c:	e9d5 1200 	ldrd	r1, r2, [r5]
 80a1d70:	fb0a 1202 	mla	r2, sl, r2, r1
 80a1d74:	f7ff fe72 	bl	80a1a5c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 80a1d78:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
 80a1d7a:	6828      	ldr	r0, [r5, #0]
 80a1d7c:	9304      	str	r3, [sp, #16]
 80a1d7e:	f7ff f845 	bl	80a0e0c <free>
        data_ = d;
 80a1d82:	9b04      	ldr	r3, [sp, #16]
        capacity_ = n;
 80a1d84:	f8c5 b008 	str.w	fp, [r5, #8]
        data_ = d;
 80a1d88:	602b      	str	r3, [r5, #0]
    T* const p = data_ + i;
 80a1d8a:	9b01      	ldr	r3, [sp, #4]
 80a1d8c:	f8d5 b000 	ldr.w	fp, [r5]
 80a1d90:	fb0a f303 	mul.w	r3, sl, r3
    move(p + 1, p, data_ + size_);
 80a1d94:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 80a1d96:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
 80a1d9a:	f101 0014 	add.w	r0, r1, #20
 80a1d9e:	fb0a b202 	mla	r2, sl, r2, fp
 80a1da2:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
 80a1da4:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
 80a1da6:	f7ff fe59 	bl	80a1a5c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 80a1daa:	9904      	ldr	r1, [sp, #16]
 80a1dac:	b1a9      	cbz	r1, 80a1dda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
 80a1dae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80a1db0:	9b05      	ldr	r3, [sp, #20]
 80a1db2:	f84b 2003 	str.w	r2, [fp, r3]
 80a1db6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80a1dba:	808b      	strh	r3, [r1, #4]
 80a1dbc:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
        capacity_(0) {
 80a1dc0:	e9c1 7702 	strd	r7, r7, [r1, #8]
 80a1dc4:	610f      	str	r7, [r1, #16]
 80a1dc6:	80cb      	strh	r3, [r1, #6]
      __a = _GLIBCXX_MOVE(__b);
 80a1dc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a1dca:	608b      	str	r3, [r1, #8]
 80a1dcc:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
 80a1dce:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 80a1dd0:	60cb      	str	r3, [r1, #12]
 80a1dd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
 80a1dd4:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
 80a1dd6:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1dd8:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
 80a1dda:	686b      	ldr	r3, [r5, #4]
 80a1ddc:	3301      	adds	r3, #1
 80a1dde:	606b      	str	r3, [r5, #4]
 80a1de0:	a813      	add	r0, sp, #76	; 0x4c
 80a1de2:	f7ff fc95 	bl	80a1710 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a1de6:	f1b8 0f00 	cmp.w	r8, #0
 80a1dea:	d008      	beq.n	80a1dfe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
 80a1dec:	a80d      	add	r0, sp, #52	; 0x34
 80a1dee:	f7ff fc8f 	bl	80a1710 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a1df2:	e756      	b.n	80a1ca2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 80a1df4:	4643      	mov	r3, r8
 80a1df6:	e7c0      	b.n	80a1d7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a1df8:	f04f 0801 	mov.w	r8, #1
 80a1dfc:	e7f0      	b.n	80a1de0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
 80a1dfe:	9b01      	ldr	r3, [sp, #4]
 80a1e00:	682d      	ldr	r5, [r5, #0]
 80a1e02:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
 80a1e06:	9b08      	ldr	r3, [sp, #32]
 80a1e08:	781b      	ldrb	r3, [r3, #0]
 80a1e0a:	b92b      	cbnz	r3, 80a1e18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
 80a1e0c:	f8d9 3000 	ldr.w	r3, [r9]
 80a1e10:	9a02      	ldr	r2, [sp, #8]
 80a1e12:	4413      	add	r3, r2
 80a1e14:	7c1b      	ldrb	r3, [r3, #16]
 80a1e16:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 80a1e18:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 80a1e1a:	e773      	b.n	80a1d04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1e1c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a1e1e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1e20:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a1e22:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1e24:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1e26:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
 80a1e28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 80a1e2a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1e2c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1e2e:	60a2      	str	r2, [r4, #8]
 80a1e30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 80a1e32:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1e34:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1e36:	60e2      	str	r2, [r4, #12]
 80a1e38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 80a1e3a:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1e3c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1e3e:	6122      	str	r2, [r4, #16]
 80a1e40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 80a1e42:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
 80a1e44:	9b03      	ldr	r3, [sp, #12]
 80a1e46:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 80a1e48:	6162      	str	r2, [r4, #20]
 80a1e4a:	7623      	strb	r3, [r4, #24]
 80a1e4c:	e7ce      	b.n	80a1dec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

080a1e50 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a1e50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 80a1e52:	4605      	mov	r5, r0
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a1e54:	460e      	mov	r6, r1
 80a1e56:	4604      	mov	r4, r0
        filter_(level, filters) {
 80a1e58:	4b08      	ldr	r3, [pc, #32]	; (80a1e7c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 80a1e5a:	4611      	mov	r1, r2
 80a1e5c:	f845 3b04 	str.w	r3, [r5], #4
 80a1e60:	a801      	add	r0, sp, #4
 80a1e62:	f7fe fb05 	bl	80a0470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a1e66:	4631      	mov	r1, r6
 80a1e68:	aa01      	add	r2, sp, #4
 80a1e6a:	4628      	mov	r0, r5
 80a1e6c:	f7ff feda 	bl	80a1c24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a1e70:	a801      	add	r0, sp, #4
 80a1e72:	f7fe fabc 	bl	80a03ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 80a1e76:	4620      	mov	r0, r4
 80a1e78:	b004      	add	sp, #16
 80a1e7a:	bd70      	pop	{r4, r5, r6, pc}
 80a1e7c:	080a4230 	.word	0x080a4230

080a1e80 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 80a1e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1e82:	460f      	mov	r7, r1
 80a1e84:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a1e86:	4638      	mov	r0, r7
 80a1e88:	4925      	ldr	r1, [pc, #148]	; (80a1f20 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
 80a1e8a:	4616      	mov	r6, r2
 80a1e8c:	461d      	mov	r5, r3
 80a1e8e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a1e90:	f002 f8b7 	bl	80a4002 <strcmp>
 80a1e94:	bb00      	cbnz	r0, 80a1ed8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
 80a1e96:	b1e4      	cbz	r4, 80a1ed2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 80a1e98:	4629      	mov	r1, r5
 80a1e9a:	4668      	mov	r0, sp
 80a1e9c:	f7ff fc92 	bl	80a17c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a1ea0:	2024      	movs	r0, #36	; 0x24
 80a1ea2:	4920      	ldr	r1, [pc, #128]	; (80a1f24 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80a1ea4:	f001 f895 	bl	80a2fd2 <_ZnwjRKSt9nothrow_t>
 80a1ea8:	4605      	mov	r5, r0
 80a1eaa:	b170      	cbz	r0, 80a1eca <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 80a1eac:	4669      	mov	r1, sp
 80a1eae:	a803      	add	r0, sp, #12
 80a1eb0:	f7fe fade 	bl	80a0470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a1eb4:	4631      	mov	r1, r6
 80a1eb6:	aa03      	add	r2, sp, #12
 80a1eb8:	4628      	mov	r0, r5
 80a1eba:	f7ff ffc9 	bl	80a1e50 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a1ebe:	a803      	add	r0, sp, #12
 80a1ec0:	f7fe fa95 	bl	80a03ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
 80a1ec4:	4b18      	ldr	r3, [pc, #96]	; (80a1f28 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
 80a1ec6:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
 80a1ec8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a1eca:	4668      	mov	r0, sp
 80a1ecc:	f7fe fa8f 	bl	80a03ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a1ed0:	462c      	mov	r4, r5
}
 80a1ed2:	4620      	mov	r0, r4
 80a1ed4:	b007      	add	sp, #28
 80a1ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 80a1ed8:	4638      	mov	r0, r7
 80a1eda:	4914      	ldr	r1, [pc, #80]	; (80a1f2c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
 80a1edc:	f002 f891 	bl	80a4002 <strcmp>
 80a1ee0:	b9e0      	cbnz	r0, 80a1f1c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
 80a1ee2:	2c00      	cmp	r4, #0
 80a1ee4:	d0f5      	beq.n	80a1ed2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a1ee6:	4629      	mov	r1, r5
 80a1ee8:	4668      	mov	r0, sp
 80a1eea:	f7ff fc6b 	bl	80a17c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a1eee:	2024      	movs	r0, #36	; 0x24
 80a1ef0:	490c      	ldr	r1, [pc, #48]	; (80a1f24 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80a1ef2:	f001 f86e 	bl	80a2fd2 <_ZnwjRKSt9nothrow_t>
 80a1ef6:	4605      	mov	r5, r0
 80a1ef8:	2800      	cmp	r0, #0
 80a1efa:	d0e6      	beq.n	80a1eca <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 80a1efc:	4669      	mov	r1, sp
 80a1efe:	a803      	add	r0, sp, #12
 80a1f00:	f7fe fab6 	bl	80a0470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a1f04:	4631      	mov	r1, r6
 80a1f06:	aa03      	add	r2, sp, #12
 80a1f08:	4628      	mov	r0, r5
 80a1f0a:	f7ff ffa1 	bl	80a1e50 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a1f0e:	a803      	add	r0, sp, #12
 80a1f10:	f7fe fa6d 	bl	80a03ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a1f14:	4b06      	ldr	r3, [pc, #24]	; (80a1f30 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
 80a1f16:	622c      	str	r4, [r5, #32]
 80a1f18:	602b      	str	r3, [r5, #0]
}
 80a1f1a:	e7d6      	b.n	80a1eca <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
 80a1f1c:	2400      	movs	r4, #0
 80a1f1e:	e7d8      	b.n	80a1ed2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
 80a1f20:	080a42cb 	.word	0x080a42cb
 80a1f24:	080a44d1 	.word	0x080a44d1
 80a1f28:	080a4368 	.word	0x080a4368
 80a1f2c:	080a42cf 	.word	0x080a42cf
 80a1f30:	080a4350 	.word	0x080a4350

080a1f34 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 80a1f34:	4b01      	ldr	r3, [pc, #4]	; (80a1f3c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1f36:	4a02      	ldr	r2, [pc, #8]	; (80a1f40 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1f38:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a1f3a:	4770      	bx	lr
 80a1f3c:	20000100 	.word	0x20000100
 80a1f40:	080a42e0 	.word	0x080a42e0

080a1f44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1f48:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 80a1f4a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1f4e:	4604      	mov	r4, r0
 80a1f50:	460e      	mov	r6, r1
 80a1f52:	4617      	mov	r7, r2
 80a1f54:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 80a1f56:	f000 fb43 	bl	80a25e0 <_Z16_fetch_usbserialv>
 80a1f5a:	4581      	cmp	r9, r0
 80a1f5c:	d04d      	beq.n	80a1ffa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 80a1f5e:	792b      	ldrb	r3, [r5, #4]
 80a1f60:	0719      	lsls	r1, r3, #28
 80a1f62:	d504      	bpl.n	80a1f6e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 80a1f64:	4620      	mov	r0, r4
 80a1f66:	696a      	ldr	r2, [r5, #20]
 80a1f68:	4954      	ldr	r1, [pc, #336]	; (80a20bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 80a1f6a:	f7ff fa0e 	bl	80a138a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 80a1f6e:	f1b8 0f00 	cmp.w	r8, #0
 80a1f72:	d00d      	beq.n	80a1f90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 80a1f74:	215b      	movs	r1, #91	; 0x5b
 80a1f76:	4620      	mov	r0, r4
 80a1f78:	f7ff f9fb 	bl	80a1372 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 80a1f7c:	4641      	mov	r1, r8
 80a1f7e:	4620      	mov	r0, r4
 80a1f80:	f7ff f9e9 	bl	80a1356 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 80a1f84:	6823      	ldr	r3, [r4, #0]
 80a1f86:	2202      	movs	r2, #2
 80a1f88:	4620      	mov	r0, r4
 80a1f8a:	68db      	ldr	r3, [r3, #12]
 80a1f8c:	494c      	ldr	r1, [pc, #304]	; (80a20c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 80a1f8e:	4798      	blx	r3
    if (attr.has_file) {
 80a1f90:	792b      	ldrb	r3, [r5, #4]
 80a1f92:	07da      	lsls	r2, r3, #31
 80a1f94:	d524      	bpl.n	80a1fe0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 80a1f96:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 80a1f9a:	212f      	movs	r1, #47	; 0x2f
 80a1f9c:	4640      	mov	r0, r8
 80a1f9e:	f002 f85c 	bl	80a405a <strrchr>
    if (s1) {
 80a1fa2:	b108      	cbz	r0, 80a1fa8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 80a1fa4:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 80a1fa8:	4641      	mov	r1, r8
 80a1faa:	4620      	mov	r0, r4
 80a1fac:	f7ff f9d3 	bl	80a1356 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 80a1fb0:	792b      	ldrb	r3, [r5, #4]
 80a1fb2:	079b      	lsls	r3, r3, #30
 80a1fb4:	d508      	bpl.n	80a1fc8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 80a1fb6:	213a      	movs	r1, #58	; 0x3a
 80a1fb8:	4620      	mov	r0, r4
 80a1fba:	f7ff f9da 	bl	80a1372 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 80a1fbe:	4620      	mov	r0, r4
 80a1fc0:	68ea      	ldr	r2, [r5, #12]
 80a1fc2:	4940      	ldr	r1, [pc, #256]	; (80a20c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 80a1fc4:	f7ff f9e1 	bl	80a138a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 80a1fc8:	792a      	ldrb	r2, [r5, #4]
 80a1fca:	6823      	ldr	r3, [r4, #0]
 80a1fcc:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 80a1fd0:	4620      	mov	r0, r4
            write(", ", 2);
 80a1fd2:	f04f 0202 	mov.w	r2, #2
 80a1fd6:	68db      	ldr	r3, [r3, #12]
 80a1fd8:	bf14      	ite	ne
 80a1fda:	493b      	ldrne	r1, [pc, #236]	; (80a20c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 80a1fdc:	493b      	ldreq	r1, [pc, #236]	; (80a20cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a1fde:	4798      	blx	r3
    if (attr.has_function) {
 80a1fe0:	792b      	ldrb	r3, [r5, #4]
 80a1fe2:	0758      	lsls	r0, r3, #29
 80a1fe4:	d51d      	bpl.n	80a2022 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a1fe6:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80a1fe8:	460b      	mov	r3, r1
 80a1fea:	461a      	mov	r2, r3
    for (; *s; ++s) {
 80a1fec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a1ff0:	b160      	cbz	r0, 80a200c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 80a1ff2:	2820      	cmp	r0, #32
 80a1ff4:	d108      	bne.n	80a2008 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 80a1ff6:	4619      	mov	r1, r3
 80a1ff8:	e7f7      	b.n	80a1fea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 80a1ffa:	4835      	ldr	r0, [pc, #212]	; (80a20d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 80a1ffc:	f000 fcbb 	bl	80a2976 <_ZN5spark12NetworkClass9listeningEv>
 80a2000:	2800      	cmp	r0, #0
 80a2002:	d0ac      	beq.n	80a1f5e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 80a2004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 80a2008:	2828      	cmp	r0, #40	; 0x28
 80a200a:	d1ee      	bne.n	80a1fea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 80a200c:	6823      	ldr	r3, [r4, #0]
 80a200e:	1a52      	subs	r2, r2, r1
 80a2010:	4620      	mov	r0, r4
 80a2012:	68db      	ldr	r3, [r3, #12]
 80a2014:	4798      	blx	r3
        write("(): ", 4);
 80a2016:	6823      	ldr	r3, [r4, #0]
 80a2018:	2204      	movs	r2, #4
 80a201a:	4620      	mov	r0, r4
 80a201c:	68db      	ldr	r3, [r3, #12]
 80a201e:	492d      	ldr	r1, [pc, #180]	; (80a20d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 80a2020:	4798      	blx	r3
    return log_level_name(level, nullptr);
 80a2022:	2100      	movs	r1, #0
 80a2024:	4638      	mov	r0, r7
 80a2026:	f7fe fe3d 	bl	80a0ca4 <log_level_name>
 80a202a:	4601      	mov	r1, r0
    write(s);
 80a202c:	4620      	mov	r0, r4
 80a202e:	f7ff f992 	bl	80a1356 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 80a2032:	6823      	ldr	r3, [r4, #0]
 80a2034:	2202      	movs	r2, #2
 80a2036:	4620      	mov	r0, r4
 80a2038:	68db      	ldr	r3, [r3, #12]
 80a203a:	4924      	ldr	r1, [pc, #144]	; (80a20cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a203c:	4798      	blx	r3
    if (msg) {
 80a203e:	b11e      	cbz	r6, 80a2048 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 80a2040:	4631      	mov	r1, r6
 80a2042:	4620      	mov	r0, r4
 80a2044:	f7ff f987 	bl	80a1356 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 80a2048:	792b      	ldrb	r3, [r5, #4]
 80a204a:	f013 0f30 	tst.w	r3, #48	; 0x30
 80a204e:	d02c      	beq.n	80a20aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 80a2050:	6823      	ldr	r3, [r4, #0]
 80a2052:	4921      	ldr	r1, [pc, #132]	; (80a20d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 80a2054:	68db      	ldr	r3, [r3, #12]
 80a2056:	2202      	movs	r2, #2
 80a2058:	4620      	mov	r0, r4
 80a205a:	4798      	blx	r3
        if (attr.has_code) {
 80a205c:	792b      	ldrb	r3, [r5, #4]
 80a205e:	06d9      	lsls	r1, r3, #27
 80a2060:	d50a      	bpl.n	80a2078 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 80a2062:	6823      	ldr	r3, [r4, #0]
 80a2064:	2207      	movs	r2, #7
 80a2066:	4620      	mov	r0, r4
 80a2068:	491c      	ldr	r1, [pc, #112]	; (80a20dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80a206a:	68db      	ldr	r3, [r3, #12]
 80a206c:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 80a206e:	4620      	mov	r0, r4
 80a2070:	69aa      	ldr	r2, [r5, #24]
 80a2072:	491b      	ldr	r1, [pc, #108]	; (80a20e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 80a2074:	f7ff f989 	bl	80a138a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 80a2078:	792b      	ldrb	r3, [r5, #4]
 80a207a:	069a      	lsls	r2, r3, #26
 80a207c:	d511      	bpl.n	80a20a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 80a207e:	06db      	lsls	r3, r3, #27
 80a2080:	d505      	bpl.n	80a208e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 80a2082:	6823      	ldr	r3, [r4, #0]
 80a2084:	2202      	movs	r2, #2
 80a2086:	4620      	mov	r0, r4
 80a2088:	68db      	ldr	r3, [r3, #12]
 80a208a:	490f      	ldr	r1, [pc, #60]	; (80a20c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 80a208c:	4798      	blx	r3
            write("details = ", 10);
 80a208e:	6823      	ldr	r3, [r4, #0]
 80a2090:	4620      	mov	r0, r4
 80a2092:	4914      	ldr	r1, [pc, #80]	; (80a20e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 80a2094:	220a      	movs	r2, #10
 80a2096:	68db      	ldr	r3, [r3, #12]
 80a2098:	4798      	blx	r3
            write(attr.details);
 80a209a:	4620      	mov	r0, r4
 80a209c:	69e9      	ldr	r1, [r5, #28]
 80a209e:	f7ff f95a 	bl	80a1356 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 80a20a2:	215d      	movs	r1, #93	; 0x5d
 80a20a4:	4620      	mov	r0, r4
 80a20a6:	f7ff f964 	bl	80a1372 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 80a20aa:	6823      	ldr	r3, [r4, #0]
 80a20ac:	4620      	mov	r0, r4
}
 80a20ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 80a20b2:	2202      	movs	r2, #2
 80a20b4:	68db      	ldr	r3, [r3, #12]
 80a20b6:	490c      	ldr	r1, [pc, #48]	; (80a20e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 80a20b8:	4718      	bx	r3
 80a20ba:	bf00      	nop
 80a20bc:	080a42e4 	.word	0x080a42e4
 80a20c0:	080a42eb 	.word	0x080a42eb
 80a20c4:	080a42ee 	.word	0x080a42ee
 80a20c8:	080a42f1 	.word	0x080a42f1
 80a20cc:	080a42f6 	.word	0x080a42f6
 80a20d0:	200005a4 	.word	0x200005a4
 80a20d4:	080a42f4 	.word	0x080a42f4
 80a20d8:	080a42f9 	.word	0x080a42f9
 80a20dc:	080a42fc 	.word	0x080a42fc
 80a20e0:	080a4304 	.word	0x080a4304
 80a20e4:	080a4307 	.word	0x080a4307
 80a20e8:	080a4312 	.word	0x080a4312

080a20ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a20ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a20f0:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
 80a20f2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a20f6:	4605      	mov	r5, r0
 80a20f8:	460f      	mov	r7, r1
 80a20fa:	4690      	mov	r8, r2
 80a20fc:	461e      	mov	r6, r3
 80a20fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 80a2100:	f000 fa6e 	bl	80a25e0 <_Z16_fetch_usbserialv>
 80a2104:	4581      	cmp	r9, r0
 80a2106:	d105      	bne.n	80a2114 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 80a2108:	4849      	ldr	r0, [pc, #292]	; (80a2230 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 80a210a:	f000 fc34 	bl	80a2976 <_ZN5spark12NetworkClass9listeningEv>
 80a210e:	2800      	cmp	r0, #0
 80a2110:	f040 808a 	bne.w	80a2228 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 80a2114:	f04f 0900 	mov.w	r9, #0
    JSONStreamWriter json(*this->stream());
 80a2118:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 80a211a:	4a46      	ldr	r2, [pc, #280]	; (80a2234 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 80a211c:	a801      	add	r0, sp, #4
 80a211e:	9201      	str	r2, [sp, #4]
 80a2120:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 80a2122:	f88d 9008 	strb.w	r9, [sp, #8]
 80a2126:	f000 fd9e 	bl	80a2c66 <_ZN5spark10JSONWriter11beginObjectEv>
 80a212a:	4649      	mov	r1, r9
 80a212c:	4640      	mov	r0, r8
 80a212e:	f7fe fdb9 	bl	80a0ca4 <log_level_name>
 80a2132:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 80a2134:	4940      	ldr	r1, [pc, #256]	; (80a2238 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 80a2136:	2201      	movs	r2, #1
 80a2138:	a801      	add	r0, sp, #4
 80a213a:	f000 fe1d 	bl	80a2d78 <_ZN5spark10JSONWriter4nameEPKcj>
 80a213e:	4641      	mov	r1, r8
 80a2140:	f7ff f8fc 	bl	80a133c <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 80a2144:	b13f      	cbz	r7, 80a2156 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 80a2146:	493d      	ldr	r1, [pc, #244]	; (80a223c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 80a2148:	2201      	movs	r2, #1
 80a214a:	a801      	add	r0, sp, #4
 80a214c:	f000 fe14 	bl	80a2d78 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2150:	4639      	mov	r1, r7
 80a2152:	f7ff f8f3 	bl	80a133c <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 80a2156:	b13e      	cbz	r6, 80a2168 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 80a2158:	4939      	ldr	r1, [pc, #228]	; (80a2240 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 80a215a:	2201      	movs	r2, #1
 80a215c:	a801      	add	r0, sp, #4
 80a215e:	f000 fe0b 	bl	80a2d78 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2162:	4631      	mov	r1, r6
 80a2164:	f7ff f8ea 	bl	80a133c <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 80a2168:	7923      	ldrb	r3, [r4, #4]
 80a216a:	07df      	lsls	r7, r3, #31
 80a216c:	d50e      	bpl.n	80a218c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 80a216e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 80a2170:	212f      	movs	r1, #47	; 0x2f
 80a2172:	4630      	mov	r0, r6
 80a2174:	f001 ff71 	bl	80a405a <strrchr>
    if (s1) {
 80a2178:	b100      	cbz	r0, 80a217c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 80a217a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 80a217c:	4931      	ldr	r1, [pc, #196]	; (80a2244 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 80a217e:	2201      	movs	r2, #1
 80a2180:	a801      	add	r0, sp, #4
 80a2182:	f000 fdf9 	bl	80a2d78 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2186:	4631      	mov	r1, r6
 80a2188:	f7ff f8d8 	bl	80a133c <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 80a218c:	7923      	ldrb	r3, [r4, #4]
 80a218e:	079e      	lsls	r6, r3, #30
 80a2190:	d507      	bpl.n	80a21a2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 80a2192:	492d      	ldr	r1, [pc, #180]	; (80a2248 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 80a2194:	2202      	movs	r2, #2
 80a2196:	a801      	add	r0, sp, #4
 80a2198:	f000 fdee 	bl	80a2d78 <_ZN5spark10JSONWriter4nameEPKcj>
 80a219c:	68e1      	ldr	r1, [r4, #12]
 80a219e:	f000 fd6f 	bl	80a2c80 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 80a21a2:	7923      	ldrb	r3, [r4, #4]
 80a21a4:	0758      	lsls	r0, r3, #29
 80a21a6:	d514      	bpl.n	80a21d2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a21a8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80a21aa:	4633      	mov	r3, r6
 80a21ac:	461f      	mov	r7, r3
    for (; *s; ++s) {
 80a21ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a21b2:	b12a      	cbz	r2, 80a21c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 80a21b4:	2a20      	cmp	r2, #32
 80a21b6:	d101      	bne.n	80a21bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 80a21b8:	461e      	mov	r6, r3
 80a21ba:	e7f7      	b.n	80a21ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 80a21bc:	2a28      	cmp	r2, #40	; 0x28
 80a21be:	d1f5      	bne.n	80a21ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 80a21c0:	2202      	movs	r2, #2
 80a21c2:	4922      	ldr	r1, [pc, #136]	; (80a224c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 80a21c4:	a801      	add	r0, sp, #4
 80a21c6:	f000 fdd7 	bl	80a2d78 <_ZN5spark10JSONWriter4nameEPKcj>
 80a21ca:	4631      	mov	r1, r6
 80a21cc:	1bba      	subs	r2, r7, r6
 80a21ce:	f000 fde2 	bl	80a2d96 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 80a21d2:	7923      	ldrb	r3, [r4, #4]
 80a21d4:	0719      	lsls	r1, r3, #28
 80a21d6:	d507      	bpl.n	80a21e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 80a21d8:	491d      	ldr	r1, [pc, #116]	; (80a2250 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 80a21da:	2201      	movs	r2, #1
 80a21dc:	a801      	add	r0, sp, #4
 80a21de:	f000 fdcb 	bl	80a2d78 <_ZN5spark10JSONWriter4nameEPKcj>
 80a21e2:	6961      	ldr	r1, [r4, #20]
 80a21e4:	f000 fd5e 	bl	80a2ca4 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 80a21e8:	7923      	ldrb	r3, [r4, #4]
 80a21ea:	06da      	lsls	r2, r3, #27
 80a21ec:	d508      	bpl.n	80a2200 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 80a21ee:	2204      	movs	r2, #4
 80a21f0:	4918      	ldr	r1, [pc, #96]	; (80a2254 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 80a21f2:	eb0d 0002 	add.w	r0, sp, r2
 80a21f6:	f000 fdbf 	bl	80a2d78 <_ZN5spark10JSONWriter4nameEPKcj>
 80a21fa:	69a1      	ldr	r1, [r4, #24]
 80a21fc:	f000 fd40 	bl	80a2c80 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 80a2200:	7923      	ldrb	r3, [r4, #4]
 80a2202:	069b      	lsls	r3, r3, #26
 80a2204:	d507      	bpl.n	80a2216 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 80a2206:	4914      	ldr	r1, [pc, #80]	; (80a2258 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 80a2208:	2206      	movs	r2, #6
 80a220a:	a801      	add	r0, sp, #4
 80a220c:	f000 fdb4 	bl	80a2d78 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2210:	69e1      	ldr	r1, [r4, #28]
 80a2212:	f7ff f893 	bl	80a133c <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 80a2216:	a801      	add	r0, sp, #4
 80a2218:	f000 fd0f 	bl	80a2c3a <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
 80a221c:	6a28      	ldr	r0, [r5, #32]
 80a221e:	2202      	movs	r2, #2
 80a2220:	6803      	ldr	r3, [r0, #0]
 80a2222:	490e      	ldr	r1, [pc, #56]	; (80a225c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 80a2224:	68db      	ldr	r3, [r3, #12]
 80a2226:	4798      	blx	r3
}
 80a2228:	b005      	add	sp, #20
 80a222a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a222e:	bf00      	nop
 80a2230:	200005a4 	.word	0x200005a4
 80a2234:	080a4338 	.word	0x080a4338
 80a2238:	080a42be 	.word	0x080a42be
 80a223c:	080a4315 	.word	0x080a4315
 80a2240:	080a4317 	.word	0x080a4317
 80a2244:	080a4319 	.word	0x080a4319
 80a2248:	080a431b 	.word	0x080a431b
 80a224c:	080a431e 	.word	0x080a431e
 80a2250:	080a4321 	.word	0x080a4321
 80a2254:	080a4323 	.word	0x080a4323
 80a2258:	080a4328 	.word	0x080a4328
 80a225c:	080a4312 	.word	0x080a4312

080a2260 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2260:	4b02      	ldr	r3, [pc, #8]	; (80a226c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2262:	681a      	ldr	r2, [r3, #0]
 80a2264:	4b02      	ldr	r3, [pc, #8]	; (80a2270 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2266:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a2268:	4770      	bx	lr
 80a226a:	bf00      	nop
 80a226c:	2000000c 	.word	0x2000000c
 80a2270:	2000012c 	.word	0x2000012c

080a2274 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2274:	2100      	movs	r1, #0
 80a2276:	f7fe bd2d 	b.w	80a0cd4 <system_delay_ms>

080a227a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a227a:	b510      	push	{r4, lr}
 80a227c:	4604      	mov	r4, r0
 80a227e:	f7fd ff8d 	bl	80a019c <_ZNSt14_Function_baseD1Ev>
 80a2282:	4620      	mov	r0, r4
 80a2284:	bd10      	pop	{r4, pc}
	...

080a2288 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a2288:	2300      	movs	r3, #0
 80a228a:	4803      	ldr	r0, [pc, #12]	; (80a2298 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a228c:	4a03      	ldr	r2, [pc, #12]	; (80a229c <_GLOBAL__sub_I_RGB+0x14>)
 80a228e:	4904      	ldr	r1, [pc, #16]	; (80a22a0 <_GLOBAL__sub_I_RGB+0x18>)
 80a2290:	6083      	str	r3, [r0, #8]
 80a2292:	f000 be97 	b.w	80a2fc4 <__aeabi_atexit>
 80a2296:	bf00      	nop
 80a2298:	20000130 	.word	0x20000130
 80a229c:	20000078 	.word	0x20000078
 80a22a0:	080a227b 	.word	0x080a227b

080a22a4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a22a4:	4b01      	ldr	r3, [pc, #4]	; (80a22ac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a22a6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a22a8:	4770      	bx	lr
 80a22aa:	bf00      	nop
 80a22ac:	20000010 	.word	0x20000010

080a22b0 <serialEventRun>:
{
 80a22b0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a22b2:	4b13      	ldr	r3, [pc, #76]	; (80a2300 <serialEventRun+0x50>)
 80a22b4:	b143      	cbz	r3, 80a22c8 <serialEventRun+0x18>
 80a22b6:	f000 f993 	bl	80a25e0 <_Z16_fetch_usbserialv>
 80a22ba:	6803      	ldr	r3, [r0, #0]
 80a22bc:	691b      	ldr	r3, [r3, #16]
 80a22be:	4798      	blx	r3
 80a22c0:	2800      	cmp	r0, #0
 80a22c2:	dd01      	ble.n	80a22c8 <serialEventRun+0x18>
        serialEvent();
 80a22c4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a22c8:	4b0e      	ldr	r3, [pc, #56]	; (80a2304 <serialEventRun+0x54>)
 80a22ca:	b143      	cbz	r3, 80a22de <serialEventRun+0x2e>
 80a22cc:	f000 fa4a 	bl	80a2764 <_Z22__fetch_global_Serial1v>
 80a22d0:	6803      	ldr	r3, [r0, #0]
 80a22d2:	691b      	ldr	r3, [r3, #16]
 80a22d4:	4798      	blx	r3
 80a22d6:	2800      	cmp	r0, #0
 80a22d8:	dd01      	ble.n	80a22de <serialEventRun+0x2e>
        serialEvent1();
 80a22da:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a22de:	4b0a      	ldr	r3, [pc, #40]	; (80a2308 <serialEventRun+0x58>)
 80a22e0:	b10b      	cbz	r3, 80a22e6 <serialEventRun+0x36>
 80a22e2:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a22e6:	4b09      	ldr	r3, [pc, #36]	; (80a230c <serialEventRun+0x5c>)
 80a22e8:	b143      	cbz	r3, 80a22fc <serialEventRun+0x4c>
 80a22ea:	f000 f9b7 	bl	80a265c <_Z17_fetch_usbserial1v>
 80a22ee:	6803      	ldr	r3, [r0, #0]
 80a22f0:	691b      	ldr	r3, [r3, #16]
 80a22f2:	4798      	blx	r3
 80a22f4:	2800      	cmp	r0, #0
 80a22f6:	dd01      	ble.n	80a22fc <serialEventRun+0x4c>
        usbSerialEvent1();
 80a22f8:	f3af 8000 	nop.w
}
 80a22fc:	bd08      	pop	{r3, pc}
 80a22fe:	bf00      	nop
	...

080a2310 <_post_loop>:
{
 80a2310:	b508      	push	{r3, lr}
	serialEventRun();
 80a2312:	f7ff ffcd 	bl	80a22b0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2316:	f7fe fb83 	bl	80a0a20 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a231a:	4b01      	ldr	r3, [pc, #4]	; (80a2320 <_post_loop+0x10>)
 80a231c:	6018      	str	r0, [r3, #0]
}
 80a231e:	bd08      	pop	{r3, pc}
 80a2320:	200005bc 	.word	0x200005bc

080a2324 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2324:	4802      	ldr	r0, [pc, #8]	; (80a2330 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2326:	4a03      	ldr	r2, [pc, #12]	; (80a2334 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2328:	4903      	ldr	r1, [pc, #12]	; (80a2338 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a232a:	1a12      	subs	r2, r2, r0
 80a232c:	f001 bdfe 	b.w	80a3f2c <memcpy>
 80a2330:	40024000 	.word	0x40024000
 80a2334:	40024004 	.word	0x40024004
 80a2338:	080a46f8 	.word	0x080a46f8

080a233c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a233c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a233e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2340:	461a      	mov	r2, r3
 80a2342:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2346:	9300      	str	r3, [sp, #0]
 80a2348:	f7fe fcde 	bl	80a0d08 <system_ctrl_set_result>
}
 80a234c:	b003      	add	sp, #12
 80a234e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2354 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a2354:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2356:	8843      	ldrh	r3, [r0, #2]
 80a2358:	2b0a      	cmp	r3, #10
 80a235a:	d008      	beq.n	80a236e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a235c:	2b50      	cmp	r3, #80	; 0x50
 80a235e:	d10b      	bne.n	80a2378 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a2360:	4b09      	ldr	r3, [pc, #36]	; (80a2388 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2362:	681b      	ldr	r3, [r3, #0]
 80a2364:	b14b      	cbz	r3, 80a237a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a2366:	b003      	add	sp, #12
 80a2368:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a236c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a236e:	f7ff ffe5 	bl	80a233c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a2372:	b003      	add	sp, #12
 80a2374:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2378:	2300      	movs	r3, #0
 80a237a:	461a      	mov	r2, r3
 80a237c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2380:	9300      	str	r3, [sp, #0]
 80a2382:	f7fe fcc1 	bl	80a0d08 <system_ctrl_set_result>
}
 80a2386:	e7f4      	b.n	80a2372 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a2388:	20000144 	.word	0x20000144

080a238c <module_user_init_hook>:
{
 80a238c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a238e:	4c12      	ldr	r4, [pc, #72]	; (80a23d8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2390:	2100      	movs	r1, #0
 80a2392:	4812      	ldr	r0, [pc, #72]	; (80a23dc <module_user_init_hook+0x50>)
 80a2394:	f7fe fd52 	bl	80a0e3c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2398:	4d11      	ldr	r5, [pc, #68]	; (80a23e0 <module_user_init_hook+0x54>)
 80a239a:	6823      	ldr	r3, [r4, #0]
 80a239c:	42ab      	cmp	r3, r5
 80a239e:	bf0c      	ite	eq
 80a23a0:	2201      	moveq	r2, #1
 80a23a2:	2200      	movne	r2, #0
 80a23a4:	4b0f      	ldr	r3, [pc, #60]	; (80a23e4 <module_user_init_hook+0x58>)
 80a23a6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a23a8:	d002      	beq.n	80a23b0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a23aa:	f7ff ffbb 	bl	80a2324 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a23ae:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a23b0:	f7fe fb26 	bl	80a0a00 <HAL_RNG_GetRandomNumber>
 80a23b4:	4604      	mov	r4, r0
    srand(seed);
 80a23b6:	f001 fde9 	bl	80a3f8c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a23ba:	4b0b      	ldr	r3, [pc, #44]	; (80a23e8 <module_user_init_hook+0x5c>)
 80a23bc:	b113      	cbz	r3, 80a23c4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a23be:	4620      	mov	r0, r4
 80a23c0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a23c4:	2100      	movs	r1, #0
 80a23c6:	4808      	ldr	r0, [pc, #32]	; (80a23e8 <module_user_init_hook+0x5c>)
 80a23c8:	f7fe fd10 	bl	80a0dec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a23cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a23d0:	2100      	movs	r1, #0
 80a23d2:	4806      	ldr	r0, [pc, #24]	; (80a23ec <module_user_init_hook+0x60>)
 80a23d4:	f7fe bc8e 	b.w	80a0cf4 <system_ctrl_set_app_request_handler>
 80a23d8:	40024000 	.word	0x40024000
 80a23dc:	080a22a5 	.word	0x080a22a5
 80a23e0:	9a271c1e 	.word	0x9a271c1e
 80a23e4:	20000140 	.word	0x20000140
 80a23e8:	00000000 	.word	0x00000000
 80a23ec:	080a2355 	.word	0x080a2355

080a23f0 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a23f0:	b510      	push	{r4, lr}
 80a23f2:	b088      	sub	sp, #32
 80a23f4:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a23f6:	4668      	mov	r0, sp
 80a23f8:	f7fe fe36 	bl	80a1068 <_ZN6StringC1EPKc>
    return (*fn)(p);
 80a23fc:	4669      	mov	r1, sp
 80a23fe:	a804      	add	r0, sp, #16
 80a2400:	f7fe fe7c 	bl	80a10fc <_ZN6StringC1ERKS_>
 80a2404:	a804      	add	r0, sp, #16
 80a2406:	47a0      	blx	r4
 80a2408:	4604      	mov	r4, r0
 80a240a:	a804      	add	r0, sp, #16
 80a240c:	f7fe fde2 	bl	80a0fd4 <_ZN6StringD1Ev>
    String p(param);
 80a2410:	4668      	mov	r0, sp
 80a2412:	f7fe fddf 	bl	80a0fd4 <_ZN6StringD1Ev>
}
 80a2416:	4620      	mov	r0, r4
 80a2418:	b008      	add	sp, #32
 80a241a:	bd10      	pop	{r4, pc}

080a241c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a241c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a241e:	2300      	movs	r3, #0
         size = sizeof(*this);
 80a2420:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 80a2422:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 80a2426:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a2428:	4669      	mov	r1, sp
 80a242a:	461a      	mov	r2, r3
 80a242c:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80a242e:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80a2432:	f8ad 4000 	strh.w	r4, [sp]
 80a2436:	f7fe fcc1 	bl	80a0dbc <spark_function>
}
 80a243a:	b004      	add	sp, #16
 80a243c:	bd10      	pop	{r4, pc}

080a243e <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a243e:	4770      	bx	lr

080a2440 <_ZN9IPAddressD0Ev>:
 80a2440:	b510      	push	{r4, lr}
 80a2442:	4604      	mov	r4, r0
 80a2444:	2118      	movs	r1, #24
 80a2446:	f000 fdc2 	bl	80a2fce <_ZdlPvj>
 80a244a:	4620      	mov	r0, r4
 80a244c:	bd10      	pop	{r4, pc}

080a244e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a244e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2450:	460e      	mov	r6, r1
 80a2452:	2400      	movs	r4, #0
 80a2454:	f100 0708 	add.w	r7, r0, #8
 80a2458:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a245a:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a245e:	220a      	movs	r2, #10
 80a2460:	4630      	mov	r0, r6
 80a2462:	f7fe feb6 	bl	80a11d2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2466:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2468:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a246a:	d101      	bne.n	80a2470 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a246c:	4620      	mov	r0, r4
 80a246e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a2470:	2c00      	cmp	r4, #0
 80a2472:	d0f2      	beq.n	80a245a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2474:	212e      	movs	r1, #46	; 0x2e
 80a2476:	4630      	mov	r0, r6
 80a2478:	f7fe fe9c 	bl	80a11b4 <_ZN5Print5printEc>
 80a247c:	4404      	add	r4, r0
 80a247e:	e7ec      	b.n	80a245a <_ZNK9IPAddress7printToER5Print+0xc>

080a2480 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a2480:	b510      	push	{r4, lr}
 80a2482:	4604      	mov	r4, r0
 80a2484:	4b04      	ldr	r3, [pc, #16]	; (80a2498 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2486:	2211      	movs	r2, #17
 80a2488:	2100      	movs	r1, #0
 80a248a:	f840 3b04 	str.w	r3, [r0], #4
 80a248e:	f001 fd75 	bl	80a3f7c <memset>
}
 80a2492:	4620      	mov	r0, r4
 80a2494:	bd10      	pop	{r4, pc}
 80a2496:	bf00      	nop
 80a2498:	080a43cc 	.word	0x080a43cc

080a249c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a249c:	4603      	mov	r3, r0
 80a249e:	4a07      	ldr	r2, [pc, #28]	; (80a24bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a24a0:	b510      	push	{r4, lr}
 80a24a2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a24a6:	f101 0210 	add.w	r2, r1, #16
 80a24aa:	f851 4b04 	ldr.w	r4, [r1], #4
 80a24ae:	4291      	cmp	r1, r2
 80a24b0:	f843 4b04 	str.w	r4, [r3], #4
 80a24b4:	d1f9      	bne.n	80a24aa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a24b6:	780a      	ldrb	r2, [r1, #0]
 80a24b8:	701a      	strb	r2, [r3, #0]
}
 80a24ba:	bd10      	pop	{r4, pc}
 80a24bc:	080a43cc 	.word	0x080a43cc

080a24c0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a24c0:	4a02      	ldr	r2, [pc, #8]	; (80a24cc <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a24c2:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a24c6:	2204      	movs	r2, #4
 80a24c8:	7502      	strb	r2, [r0, #20]
}
 80a24ca:	4770      	bx	lr
 80a24cc:	080a43cc 	.word	0x080a43cc

080a24d0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a24d0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a24d2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a24d6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a24da:	2304      	movs	r3, #4
 80a24dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a24e0:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a24e4:	6044      	str	r4, [r0, #4]
 80a24e6:	7503      	strb	r3, [r0, #20]
}
 80a24e8:	bd10      	pop	{r4, pc}
	...

080a24ec <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a24ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a24ee:	4d04      	ldr	r5, [pc, #16]	; (80a2500 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a24f0:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a24f2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a24f6:	9500      	str	r5, [sp, #0]
 80a24f8:	f7ff ffea 	bl	80a24d0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a24fc:	b003      	add	sp, #12
 80a24fe:	bd30      	pop	{r4, r5, pc}
 80a2500:	080a43cc 	.word	0x080a43cc

080a2504 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2504:	7441      	strb	r1, [r0, #17]
}
 80a2506:	4770      	bx	lr

080a2508 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2508:	4770      	bx	lr

080a250a <_ZN9USBSerial4readEv>:
{
 80a250a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a250c:	2100      	movs	r1, #0
 80a250e:	7c00      	ldrb	r0, [r0, #16]
 80a2510:	f7fe fb98 	bl	80a0c44 <HAL_USB_USART_Receive_Data>
}
 80a2514:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2518:	bd08      	pop	{r3, pc}

080a251a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a251a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a251c:	2101      	movs	r1, #1
 80a251e:	7c00      	ldrb	r0, [r0, #16]
 80a2520:	f7fe fb90 	bl	80a0c44 <HAL_USB_USART_Receive_Data>
}
 80a2524:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2528:	bd08      	pop	{r3, pc}

080a252a <_ZN9USBSerial17availableForWriteEv>:
{
 80a252a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a252c:	7c00      	ldrb	r0, [r0, #16]
 80a252e:	f7fe fb81 	bl	80a0c34 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2532:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2536:	bd08      	pop	{r3, pc}

080a2538 <_ZN9USBSerial9availableEv>:
{
 80a2538:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a253a:	7c00      	ldrb	r0, [r0, #16]
 80a253c:	f7fe fb72 	bl	80a0c24 <HAL_USB_USART_Available_Data>
}
 80a2540:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2544:	bd08      	pop	{r3, pc}

080a2546 <_ZN9USBSerial5writeEh>:
{
 80a2546:	b538      	push	{r3, r4, r5, lr}
 80a2548:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a254a:	7c00      	ldrb	r0, [r0, #16]
{
 80a254c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a254e:	f7fe fb71 	bl	80a0c34 <HAL_USB_USART_Available_Data_For_Write>
 80a2552:	2800      	cmp	r0, #0
 80a2554:	dc01      	bgt.n	80a255a <_ZN9USBSerial5writeEh+0x14>
 80a2556:	7c60      	ldrb	r0, [r4, #17]
 80a2558:	b128      	cbz	r0, 80a2566 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a255a:	4629      	mov	r1, r5
 80a255c:	7c20      	ldrb	r0, [r4, #16]
 80a255e:	f7fe fb79 	bl	80a0c54 <HAL_USB_USART_Send_Data>
 80a2562:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a2566:	bd38      	pop	{r3, r4, r5, pc}

080a2568 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a2568:	7c00      	ldrb	r0, [r0, #16]
 80a256a:	f7fe bb7b 	b.w	80a0c64 <HAL_USB_USART_Flush_Data>

080a256e <_ZN9USBSerialD0Ev>:
 80a256e:	b510      	push	{r4, lr}
 80a2570:	4604      	mov	r4, r0
 80a2572:	2114      	movs	r1, #20
 80a2574:	f000 fd2b 	bl	80a2fce <_ZdlPvj>
 80a2578:	4620      	mov	r0, r4
 80a257a:	bd10      	pop	{r4, pc}

080a257c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a257c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a257e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2582:	4604      	mov	r4, r0
 80a2584:	4608      	mov	r0, r1
 80a2586:	2100      	movs	r1, #0
 80a2588:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a258c:	4b04      	ldr	r3, [pc, #16]	; (80a25a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a258e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2590:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a2592:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a2594:	4611      	mov	r1, r2
  _blocking = true;
 80a2596:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a2598:	f7fe fb2c 	bl	80a0bf4 <HAL_USB_USART_Init>
}
 80a259c:	4620      	mov	r0, r4
 80a259e:	bd10      	pop	{r4, pc}
 80a25a0:	080a43e0 	.word	0x080a43e0

080a25a4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a25a4:	2200      	movs	r2, #0
 80a25a6:	7c00      	ldrb	r0, [r0, #16]
 80a25a8:	f7fe bb2c 	b.w	80a0c04 <HAL_USB_USART_Begin>

080a25ac <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 80a25ac:	7c00      	ldrb	r0, [r0, #16]
 80a25ae:	f7fe bb31 	b.w	80a0c14 <HAL_USB_USART_End>
	...

080a25b4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a25b4:	b510      	push	{r4, lr}
 80a25b6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a25b8:	2214      	movs	r2, #20
 80a25ba:	2100      	movs	r1, #0
 80a25bc:	f001 fcde 	bl	80a3f7c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a25c0:	4b05      	ldr	r3, [pc, #20]	; (80a25d8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a25c2:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a25c4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a25c6:	4b05      	ldr	r3, [pc, #20]	; (80a25dc <_Z19acquireSerialBufferv+0x28>)
 80a25c8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a25ca:	f240 1301 	movw	r3, #257	; 0x101
 80a25ce:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a25d0:	2381      	movs	r3, #129	; 0x81
 80a25d2:	8223      	strh	r3, [r4, #16]
}
 80a25d4:	bd10      	pop	{r4, pc}
 80a25d6:	bf00      	nop
 80a25d8:	20000178 	.word	0x20000178
 80a25dc:	20000279 	.word	0x20000279

080a25e0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a25e0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a25e2:	4d0f      	ldr	r5, [pc, #60]	; (80a2620 <_Z16_fetch_usbserialv+0x40>)
{
 80a25e4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a25e6:	a801      	add	r0, sp, #4
 80a25e8:	f7ff ffe4 	bl	80a25b4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a25ec:	7829      	ldrb	r1, [r5, #0]
 80a25ee:	f3bf 8f5b 	dmb	ish
 80a25f2:	f011 0401 	ands.w	r4, r1, #1
 80a25f6:	d110      	bne.n	80a261a <_Z16_fetch_usbserialv+0x3a>
 80a25f8:	4628      	mov	r0, r5
 80a25fa:	f7fd fd5d 	bl	80a00b8 <__cxa_guard_acquire>
 80a25fe:	b160      	cbz	r0, 80a261a <_Z16_fetch_usbserialv+0x3a>
 80a2600:	4621      	mov	r1, r4
 80a2602:	aa01      	add	r2, sp, #4
 80a2604:	4807      	ldr	r0, [pc, #28]	; (80a2624 <_Z16_fetch_usbserialv+0x44>)
 80a2606:	f7ff ffb9 	bl	80a257c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a260a:	4628      	mov	r0, r5
 80a260c:	f7fd fd59 	bl	80a00c2 <__cxa_guard_release>
 80a2610:	4a05      	ldr	r2, [pc, #20]	; (80a2628 <_Z16_fetch_usbserialv+0x48>)
 80a2612:	4906      	ldr	r1, [pc, #24]	; (80a262c <_Z16_fetch_usbserialv+0x4c>)
 80a2614:	4803      	ldr	r0, [pc, #12]	; (80a2624 <_Z16_fetch_usbserialv+0x44>)
 80a2616:	f000 fcd5 	bl	80a2fc4 <__aeabi_atexit>
	return _usbserial;
}
 80a261a:	4802      	ldr	r0, [pc, #8]	; (80a2624 <_Z16_fetch_usbserialv+0x44>)
 80a261c:	b007      	add	sp, #28
 80a261e:	bd30      	pop	{r4, r5, pc}
 80a2620:	20000148 	.word	0x20000148
 80a2624:	20000150 	.word	0x20000150
 80a2628:	20000078 	.word	0x20000078
 80a262c:	080a2509 	.word	0x080a2509

080a2630 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2630:	b510      	push	{r4, lr}
 80a2632:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2634:	2214      	movs	r2, #20
 80a2636:	2100      	movs	r1, #0
 80a2638:	f001 fca0 	bl	80a3f7c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a263c:	4b05      	ldr	r3, [pc, #20]	; (80a2654 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a263e:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a2640:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2642:	4b05      	ldr	r3, [pc, #20]	; (80a2658 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2644:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2646:	f240 1301 	movw	r3, #257	; 0x101
 80a264a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a264c:	2381      	movs	r3, #129	; 0x81
 80a264e:	8223      	strh	r3, [r4, #16]
}
 80a2650:	bd10      	pop	{r4, pc}
 80a2652:	bf00      	nop
 80a2654:	200002fa 	.word	0x200002fa
 80a2658:	200003fb 	.word	0x200003fb

080a265c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a265c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a265e:	4c0f      	ldr	r4, [pc, #60]	; (80a269c <_Z17_fetch_usbserial1v+0x40>)
{
 80a2660:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2662:	a801      	add	r0, sp, #4
 80a2664:	f7ff ffe4 	bl	80a2630 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2668:	7823      	ldrb	r3, [r4, #0]
 80a266a:	f3bf 8f5b 	dmb	ish
 80a266e:	07db      	lsls	r3, r3, #31
 80a2670:	d410      	bmi.n	80a2694 <_Z17_fetch_usbserial1v+0x38>
 80a2672:	4620      	mov	r0, r4
 80a2674:	f7fd fd20 	bl	80a00b8 <__cxa_guard_acquire>
 80a2678:	b160      	cbz	r0, 80a2694 <_Z17_fetch_usbserial1v+0x38>
 80a267a:	2101      	movs	r1, #1
 80a267c:	aa01      	add	r2, sp, #4
 80a267e:	4808      	ldr	r0, [pc, #32]	; (80a26a0 <_Z17_fetch_usbserial1v+0x44>)
 80a2680:	f7ff ff7c 	bl	80a257c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2684:	4620      	mov	r0, r4
 80a2686:	f7fd fd1c 	bl	80a00c2 <__cxa_guard_release>
 80a268a:	4a06      	ldr	r2, [pc, #24]	; (80a26a4 <_Z17_fetch_usbserial1v+0x48>)
 80a268c:	4906      	ldr	r1, [pc, #24]	; (80a26a8 <_Z17_fetch_usbserial1v+0x4c>)
 80a268e:	4804      	ldr	r0, [pc, #16]	; (80a26a0 <_Z17_fetch_usbserial1v+0x44>)
 80a2690:	f000 fc98 	bl	80a2fc4 <__aeabi_atexit>
  return _usbserial1;
}
 80a2694:	4802      	ldr	r0, [pc, #8]	; (80a26a0 <_Z17_fetch_usbserial1v+0x44>)
 80a2696:	b006      	add	sp, #24
 80a2698:	bd10      	pop	{r4, pc}
 80a269a:	bf00      	nop
 80a269c:	2000014c 	.word	0x2000014c
 80a26a0:	20000164 	.word	0x20000164
 80a26a4:	20000078 	.word	0x20000078
 80a26a8:	080a2509 	.word	0x080a2509

080a26ac <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a26ac:	4770      	bx	lr

080a26ae <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a26ae:	7441      	strb	r1, [r0, #17]
}
 80a26b0:	4770      	bx	lr

080a26b2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a26b2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a26b4:	7c00      	ldrb	r0, [r0, #16]
 80a26b6:	f7fe fa1b 	bl	80a0af0 <hal_usart_available_data_for_write>
}
 80a26ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a26be:	bd08      	pop	{r3, pc}

080a26c0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a26c0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a26c2:	7c00      	ldrb	r0, [r0, #16]
 80a26c4:	f7fe f9ec 	bl	80a0aa0 <hal_usart_available>
}
 80a26c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a26cc:	bd08      	pop	{r3, pc}

080a26ce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a26ce:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a26d0:	7c00      	ldrb	r0, [r0, #16]
 80a26d2:	f7fe f9f5 	bl	80a0ac0 <hal_usart_peek>
}
 80a26d6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a26da:	bd08      	pop	{r3, pc}

080a26dc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a26dc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a26de:	7c00      	ldrb	r0, [r0, #16]
 80a26e0:	f7fe f9e6 	bl	80a0ab0 <hal_usart_read>
}
 80a26e4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a26e8:	bd08      	pop	{r3, pc}

080a26ea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a26ea:	7c00      	ldrb	r0, [r0, #16]
 80a26ec:	f7fe b9f0 	b.w	80a0ad0 <hal_usart_flush>

080a26f0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a26f0:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a26f2:	7c46      	ldrb	r6, [r0, #17]
{
 80a26f4:	4604      	mov	r4, r0
 80a26f6:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a26f8:	b12e      	cbz	r6, 80a2706 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a26fa:	4629      	mov	r1, r5
 80a26fc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a26fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a2702:	f7fe b9c5 	b.w	80a0a90 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2706:	7c00      	ldrb	r0, [r0, #16]
 80a2708:	f7fe f9f2 	bl	80a0af0 <hal_usart_available_data_for_write>
 80a270c:	2800      	cmp	r0, #0
 80a270e:	dcf4      	bgt.n	80a26fa <_ZN11USARTSerial5writeEh+0xa>
}
 80a2710:	4630      	mov	r0, r6
 80a2712:	bd70      	pop	{r4, r5, r6, pc}

080a2714 <_ZN11USARTSerialD0Ev>:
 80a2714:	b510      	push	{r4, lr}
 80a2716:	4604      	mov	r4, r0
 80a2718:	2114      	movs	r1, #20
 80a271a:	f000 fc58 	bl	80a2fce <_ZdlPvj>
 80a271e:	4620      	mov	r0, r4
 80a2720:	bd10      	pop	{r4, pc}
	...

080a2724 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a2724:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a2728:	b510      	push	{r4, lr}
 80a272a:	4604      	mov	r4, r0
 80a272c:	4608      	mov	r0, r1
 80a272e:	4611      	mov	r1, r2
 80a2730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2734:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a2738:	4a04      	ldr	r2, [pc, #16]	; (80a274c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a273a:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a273c:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a273e:	2201      	movs	r2, #1
 80a2740:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a2742:	461a      	mov	r2, r3
 80a2744:	f7fe f994 	bl	80a0a70 <hal_usart_init>
}
 80a2748:	4620      	mov	r0, r4
 80a274a:	bd10      	pop	{r4, pc}
 80a274c:	080a4410 	.word	0x080a4410

080a2750 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80a2750:	2300      	movs	r3, #0
 80a2752:	7c00      	ldrb	r0, [r0, #16]
 80a2754:	f7fe b9d4 	b.w	80a0b00 <hal_usart_begin_config>

080a2758 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 80a2758:	2200      	movs	r2, #0
 80a275a:	f7ff bff9 	b.w	80a2750 <_ZN11USARTSerial5beginEmm>

080a275e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 80a275e:	7c00      	ldrb	r0, [r0, #16]
 80a2760:	f7fe b98e 	b.w	80a0a80 <hal_usart_end>

080a2764 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2764:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2766:	4d0d      	ldr	r5, [pc, #52]	; (80a279c <_Z22__fetch_global_Serial1v+0x38>)
 80a2768:	7829      	ldrb	r1, [r5, #0]
 80a276a:	f3bf 8f5b 	dmb	ish
 80a276e:	f011 0401 	ands.w	r4, r1, #1
 80a2772:	d111      	bne.n	80a2798 <_Z22__fetch_global_Serial1v+0x34>
 80a2774:	4628      	mov	r0, r5
 80a2776:	f7fd fc9f 	bl	80a00b8 <__cxa_guard_acquire>
 80a277a:	b168      	cbz	r0, 80a2798 <_Z22__fetch_global_Serial1v+0x34>
 80a277c:	4621      	mov	r1, r4
 80a277e:	4a08      	ldr	r2, [pc, #32]	; (80a27a0 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2780:	4b08      	ldr	r3, [pc, #32]	; (80a27a4 <_Z22__fetch_global_Serial1v+0x40>)
 80a2782:	4809      	ldr	r0, [pc, #36]	; (80a27a8 <_Z22__fetch_global_Serial1v+0x44>)
 80a2784:	f7ff ffce 	bl	80a2724 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a2788:	4628      	mov	r0, r5
 80a278a:	f7fd fc9a 	bl	80a00c2 <__cxa_guard_release>
 80a278e:	4a07      	ldr	r2, [pc, #28]	; (80a27ac <_Z22__fetch_global_Serial1v+0x48>)
 80a2790:	4907      	ldr	r1, [pc, #28]	; (80a27b0 <_Z22__fetch_global_Serial1v+0x4c>)
 80a2792:	4805      	ldr	r0, [pc, #20]	; (80a27a8 <_Z22__fetch_global_Serial1v+0x44>)
 80a2794:	f000 fc16 	bl	80a2fc4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2798:	4803      	ldr	r0, [pc, #12]	; (80a27a8 <_Z22__fetch_global_Serial1v+0x44>)
 80a279a:	bd38      	pop	{r3, r4, r5, pc}
 80a279c:	2000047c 	.word	0x2000047c
 80a27a0:	20000480 	.word	0x20000480
 80a27a4:	20000504 	.word	0x20000504
 80a27a8:	20000588 	.word	0x20000588
 80a27ac:	20000078 	.word	0x20000078
 80a27b0:	080a26ad 	.word	0x080a26ad

080a27b4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a27b4:	4770      	bx	lr

080a27b6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a27b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a27b8:	4606      	mov	r6, r0
 80a27ba:	4615      	mov	r5, r2
 80a27bc:	460c      	mov	r4, r1
 80a27be:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a27c0:	42bc      	cmp	r4, r7
 80a27c2:	d006      	beq.n	80a27d2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a27c4:	6833      	ldr	r3, [r6, #0]
 80a27c6:	4630      	mov	r0, r6
 80a27c8:	689b      	ldr	r3, [r3, #8]
 80a27ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a27ce:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a27d0:	e7f6      	b.n	80a27c0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a27d2:	4628      	mov	r0, r5
 80a27d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a27d6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a27d6:	2200      	movs	r2, #0
 80a27d8:	7c00      	ldrb	r0, [r0, #16]
 80a27da:	f7fe b9c1 	b.w	80a0b60 <hal_i2c_write>

080a27de <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a27de:	2100      	movs	r1, #0
 80a27e0:	7c00      	ldrb	r0, [r0, #16]
 80a27e2:	f7fe b9c5 	b.w	80a0b70 <hal_i2c_available>

080a27e6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a27e6:	2100      	movs	r1, #0
 80a27e8:	7c00      	ldrb	r0, [r0, #16]
 80a27ea:	f7fe b9c9 	b.w	80a0b80 <hal_i2c_read>

080a27ee <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a27ee:	2100      	movs	r1, #0
 80a27f0:	7c00      	ldrb	r0, [r0, #16]
 80a27f2:	f7fe b9cd 	b.w	80a0b90 <hal_i2c_peek>

080a27f6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a27f6:	2100      	movs	r1, #0
 80a27f8:	7c00      	ldrb	r0, [r0, #16]
 80a27fa:	f7fe b9d1 	b.w	80a0ba0 <hal_i2c_flush>

080a27fe <_ZN7TwoWireD0Ev>:
 80a27fe:	b510      	push	{r4, lr}
 80a2800:	4604      	mov	r4, r0
 80a2802:	2114      	movs	r1, #20
 80a2804:	f000 fbe3 	bl	80a2fce <_ZdlPvj>
 80a2808:	4620      	mov	r0, r4
 80a280a:	bd10      	pop	{r4, pc}

080a280c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a280c:	b510      	push	{r4, lr}
 80a280e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2812:	4604      	mov	r4, r0
 80a2814:	4608      	mov	r0, r1
 80a2816:	2100      	movs	r1, #0
 80a2818:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a281c:	4b03      	ldr	r3, [pc, #12]	; (80a282c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a281e:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a2820:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a2822:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a2824:	f7fe f9cc 	bl	80a0bc0 <hal_i2c_init>
}
 80a2828:	4620      	mov	r0, r4
 80a282a:	bd10      	pop	{r4, pc}
 80a282c:	080a4440 	.word	0x080a4440

080a2830 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 80a2830:	2200      	movs	r2, #0
 80a2832:	7c00      	ldrb	r0, [r0, #16]
 80a2834:	f7fe b96c 	b.w	80a0b10 <hal_i2c_set_speed>

080a2838 <_ZN7TwoWire12stretchClockEb>:
  hal_i2c_stretch_clock(_i2c, stretch, NULL);
 80a2838:	2200      	movs	r2, #0
 80a283a:	7c00      	ldrb	r0, [r0, #16]
 80a283c:	f7fe b970 	b.w	80a0b20 <hal_i2c_stretch_clock>

080a2840 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a2840:	2300      	movs	r3, #0
 80a2842:	7c00      	ldrb	r0, [r0, #16]
 80a2844:	461a      	mov	r2, r3
 80a2846:	4619      	mov	r1, r3
 80a2848:	f7fe b972 	b.w	80a0b30 <hal_i2c_begin>

080a284c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a284c:	2200      	movs	r2, #0
 80a284e:	7c00      	ldrb	r0, [r0, #16]
 80a2850:	f7fe b976 	b.w	80a0b40 <hal_i2c_begin_transmission>

080a2854 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a2854:	2200      	movs	r2, #0
 80a2856:	7c00      	ldrb	r0, [r0, #16]
 80a2858:	f7fe b97a 	b.w	80a0b50 <hal_i2c_end_transmission>

080a285c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a285c:	2101      	movs	r1, #1
 80a285e:	f7ff bff9 	b.w	80a2854 <_ZN7TwoWire15endTransmissionEh>

080a2862 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a2862:	2200      	movs	r2, #0
 80a2864:	6840      	ldr	r0, [r0, #4]
 80a2866:	4611      	mov	r1, r2
 80a2868:	f7fe ba70 	b.w	80a0d4c <network_ready>

080a286c <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a286c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a286e:	4615      	mov	r5, r2
 80a2870:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2872:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a2874:	460e      	mov	r6, r1
 80a2876:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a2878:	2100      	movs	r1, #0
 80a287a:	a803      	add	r0, sp, #12
 80a287c:	f001 fb7e 	bl	80a3f7c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2880:	4628      	mov	r0, r5
 80a2882:	f001 fbd0 	bl	80a4026 <strlen>
 80a2886:	2700      	movs	r7, #0
 80a2888:	b281      	uxth	r1, r0
 80a288a:	6873      	ldr	r3, [r6, #4]
 80a288c:	4628      	mov	r0, r5
 80a288e:	9700      	str	r7, [sp, #0]
 80a2890:	aa03      	add	r2, sp, #12
 80a2892:	f7fe f9ef 	bl	80a0c74 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2896:	b130      	cbz	r0, 80a28a6 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a2898:	4639      	mov	r1, r7
 80a289a:	4620      	mov	r0, r4
 80a289c:	f7ff fe10 	bl	80a24c0 <_ZN9IPAddressC1Em>
    }
 80a28a0:	4620      	mov	r0, r4
 80a28a2:	b009      	add	sp, #36	; 0x24
 80a28a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a28a6:	4620      	mov	r0, r4
 80a28a8:	a903      	add	r1, sp, #12
 80a28aa:	f7ff fdf7 	bl	80a249c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a28ae:	e7f7      	b.n	80a28a0 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a28b0 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a28b0:	2200      	movs	r2, #0
 80a28b2:	6840      	ldr	r0, [r0, #4]
 80a28b4:	4611      	mov	r1, r2
 80a28b6:	f7fe ba69 	b.w	80a0d8c <network_listening>

080a28ba <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a28ba:	2200      	movs	r2, #0
 80a28bc:	6840      	ldr	r0, [r0, #4]
 80a28be:	4611      	mov	r1, r2
 80a28c0:	f7fe ba74 	b.w	80a0dac <network_get_listen_timeout>

080a28c4 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a28c4:	2200      	movs	r2, #0
 80a28c6:	6840      	ldr	r0, [r0, #4]
 80a28c8:	f7fe ba68 	b.w	80a0d9c <network_set_listen_timeout>

080a28cc <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a28cc:	2200      	movs	r2, #0
 80a28ce:	6840      	ldr	r0, [r0, #4]
 80a28d0:	f081 0101 	eor.w	r1, r1, #1
 80a28d4:	f7fe ba52 	b.w	80a0d7c <network_listen>

080a28d8 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a28d8:	2300      	movs	r3, #0
 80a28da:	6840      	ldr	r0, [r0, #4]
 80a28dc:	461a      	mov	r2, r3
 80a28de:	4619      	mov	r1, r3
 80a28e0:	f7fe ba44 	b.w	80a0d6c <network_off>

080a28e4 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a28e4:	2200      	movs	r2, #0
 80a28e6:	6840      	ldr	r0, [r0, #4]
 80a28e8:	4611      	mov	r1, r2
 80a28ea:	f7fe ba1f 	b.w	80a0d2c <network_connecting>

080a28ee <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a28ee:	2200      	movs	r2, #0
 80a28f0:	2102      	movs	r1, #2
 80a28f2:	6840      	ldr	r0, [r0, #4]
 80a28f4:	f7fe ba22 	b.w	80a0d3c <network_disconnect>

080a28f8 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a28f8:	2300      	movs	r3, #0
 80a28fa:	6840      	ldr	r0, [r0, #4]
 80a28fc:	461a      	mov	r2, r3
 80a28fe:	f7fe ba0d 	b.w	80a0d1c <network_connect>
	...

080a2904 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2904:	2204      	movs	r2, #4
 80a2906:	4b02      	ldr	r3, [pc, #8]	; (80a2910 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2908:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a290a:	4a02      	ldr	r2, [pc, #8]	; (80a2914 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a290c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a290e:	4770      	bx	lr
 80a2910:	2000059c 	.word	0x2000059c
 80a2914:	080a4468 	.word	0x080a4468

080a2918 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2918:	2300      	movs	r3, #0
 80a291a:	6840      	ldr	r0, [r0, #4]
 80a291c:	461a      	mov	r2, r3
 80a291e:	f7fe b9fd 	b.w	80a0d1c <network_connect>

080a2922 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2922:	2200      	movs	r2, #0
 80a2924:	2102      	movs	r1, #2
 80a2926:	6840      	ldr	r0, [r0, #4]
 80a2928:	f7fe ba08 	b.w	80a0d3c <network_disconnect>

080a292c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a292c:	2200      	movs	r2, #0
 80a292e:	6840      	ldr	r0, [r0, #4]
 80a2930:	4611      	mov	r1, r2
 80a2932:	f7fe b9fb 	b.w	80a0d2c <network_connecting>

080a2936 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2936:	2200      	movs	r2, #0
 80a2938:	6840      	ldr	r0, [r0, #4]
 80a293a:	4611      	mov	r1, r2
 80a293c:	f7fe ba06 	b.w	80a0d4c <network_ready>

080a2940 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2940:	2300      	movs	r3, #0
 80a2942:	6840      	ldr	r0, [r0, #4]
 80a2944:	461a      	mov	r2, r3
 80a2946:	4619      	mov	r1, r3
 80a2948:	f7fe ba08 	b.w	80a0d5c <network_on>

080a294c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a294c:	2300      	movs	r3, #0
 80a294e:	6840      	ldr	r0, [r0, #4]
 80a2950:	461a      	mov	r2, r3
 80a2952:	4619      	mov	r1, r3
 80a2954:	f7fe ba0a 	b.w	80a0d6c <network_off>

080a2958 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2958:	2200      	movs	r2, #0
 80a295a:	6840      	ldr	r0, [r0, #4]
 80a295c:	f081 0101 	eor.w	r1, r1, #1
 80a2960:	f7fe ba0c 	b.w	80a0d7c <network_listen>

080a2964 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2964:	2200      	movs	r2, #0
 80a2966:	6840      	ldr	r0, [r0, #4]
 80a2968:	f7fe ba18 	b.w	80a0d9c <network_set_listen_timeout>

080a296c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a296c:	2200      	movs	r2, #0
 80a296e:	6840      	ldr	r0, [r0, #4]
 80a2970:	4611      	mov	r1, r2
 80a2972:	f7fe ba1b 	b.w	80a0dac <network_get_listen_timeout>

080a2976 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2976:	2200      	movs	r2, #0
 80a2978:	6840      	ldr	r0, [r0, #4]
 80a297a:	4611      	mov	r1, r2
 80a297c:	f7fe ba06 	b.w	80a0d8c <network_listening>

080a2980 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2980:	b570      	push	{r4, r5, r6, lr}
 80a2982:	4615      	mov	r5, r2
 80a2984:	b08e      	sub	sp, #56	; 0x38
 80a2986:	4604      	mov	r4, r0
    IPAddress addr;
 80a2988:	a808      	add	r0, sp, #32
 80a298a:	f7ff fd79 	bl	80a2480 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a298e:	2211      	movs	r2, #17
 80a2990:	2100      	movs	r1, #0
 80a2992:	a803      	add	r0, sp, #12
 80a2994:	f001 faf2 	bl	80a3f7c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2998:	2600      	movs	r6, #0
 80a299a:	4628      	mov	r0, r5
 80a299c:	f001 fb43 	bl	80a4026 <strlen>
 80a29a0:	4b0a      	ldr	r3, [pc, #40]	; (80a29cc <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a29a2:	9600      	str	r6, [sp, #0]
 80a29a4:	b281      	uxth	r1, r0
 80a29a6:	685b      	ldr	r3, [r3, #4]
 80a29a8:	4628      	mov	r0, r5
 80a29aa:	aa03      	add	r2, sp, #12
 80a29ac:	f7fe f962 	bl	80a0c74 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a29b0:	b130      	cbz	r0, 80a29c0 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a29b2:	4631      	mov	r1, r6
 80a29b4:	4620      	mov	r0, r4
 80a29b6:	f7ff fd83 	bl	80a24c0 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a29ba:	4620      	mov	r0, r4
 80a29bc:	b00e      	add	sp, #56	; 0x38
 80a29be:	bd70      	pop	{r4, r5, r6, pc}
 80a29c0:	4620      	mov	r0, r4
 80a29c2:	a903      	add	r1, sp, #12
 80a29c4:	f7ff fd6a 	bl	80a249c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a29c8:	e7f7      	b.n	80a29ba <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a29ca:	bf00      	nop
 80a29cc:	2000059c 	.word	0x2000059c

080a29d0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a29d0:	4b02      	ldr	r3, [pc, #8]	; (80a29dc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a29d2:	4a03      	ldr	r2, [pc, #12]	; (80a29e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a29d4:	601a      	str	r2, [r3, #0]
 80a29d6:	2200      	movs	r2, #0
 80a29d8:	605a      	str	r2, [r3, #4]

} // spark
 80a29da:	4770      	bx	lr
 80a29dc:	200005a4 	.word	0x200005a4
 80a29e0:	080a449c 	.word	0x080a449c

080a29e4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 80a29e4:	2201      	movs	r2, #1
 80a29e6:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 80a29ea:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80a29ee:	4618      	mov	r0, r3
 80a29f0:	2901      	cmp	r1, #1
 80a29f2:	d108      	bne.n	80a2a06 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 80a29f4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80a29f8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 80a29fc:	3a01      	subs	r2, #1
 80a29fe:	f103 0310 	add.w	r3, r3, #16
 80a2a02:	d1f2      	bne.n	80a29ea <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 80a2a04:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 80a2a06:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 80a2a08:	bf04      	itt	eq
 80a2a0a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 80a2a0e:	1852      	addeq	r2, r2, r1
 80a2a10:	e7f4      	b.n	80a29fc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

080a2a12 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 80a2a12:	b40e      	push	{r1, r2, r3}
 80a2a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2a18:	b087      	sub	sp, #28
 80a2a1a:	af00      	add	r7, sp, #0
 80a2a1c:	f107 0534 	add.w	r5, r7, #52	; 0x34
 80a2a20:	f855 8b04 	ldr.w	r8, [r5], #4
 80a2a24:	4604      	mov	r4, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a2a26:	462b      	mov	r3, r5
 80a2a28:	4642      	mov	r2, r8
 80a2a2a:	2110      	movs	r1, #16
 80a2a2c:	f107 0008 	add.w	r0, r7, #8
    va_start(args, fmt);
 80a2a30:	607d      	str	r5, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a2a32:	f7fe f9fb 	bl	80a0e2c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 80a2a36:	280f      	cmp	r0, #15
 80a2a38:	d91b      	bls.n	80a2a72 <_ZN5spark10JSONWriter6printfEPKcz+0x60>
        char buf[n + 1]; // Use larger buffer
 80a2a3a:	f100 0308 	add.w	r3, r0, #8
 80a2a3e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 80a2a42:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 80a2a44:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a2a48:	4642      	mov	r2, r8
 80a2a4a:	1c41      	adds	r1, r0, #1
 80a2a4c:	462b      	mov	r3, r5
 80a2a4e:	4668      	mov	r0, sp
        va_start(args, fmt);
 80a2a50:	607d      	str	r5, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a2a52:	f7fe f9eb 	bl	80a0e2c <vsnprintf>
        if (n > 0) {
 80a2a56:	1e02      	subs	r2, r0, #0
 80a2a58:	dd04      	ble.n	80a2a64 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 80a2a5a:	6823      	ldr	r3, [r4, #0]
 80a2a5c:	4669      	mov	r1, sp
 80a2a5e:	4620      	mov	r0, r4
 80a2a60:	689b      	ldr	r3, [r3, #8]
 80a2a62:	4798      	blx	r3
 80a2a64:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 80a2a66:	371c      	adds	r7, #28
 80a2a68:	46bd      	mov	sp, r7
 80a2a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a2a6e:	b003      	add	sp, #12
 80a2a70:	4770      	bx	lr
    } else if (n > 0) {
 80a2a72:	2800      	cmp	r0, #0
 80a2a74:	d0f7      	beq.n	80a2a66 <_ZN5spark10JSONWriter6printfEPKcz+0x54>
        write(buf, n);
 80a2a76:	6823      	ldr	r3, [r4, #0]
 80a2a78:	4602      	mov	r2, r0
 80a2a7a:	689b      	ldr	r3, [r3, #8]
 80a2a7c:	4620      	mov	r0, r4
 80a2a7e:	f107 0108 	add.w	r1, r7, #8
 80a2a82:	4798      	blx	r3
}
 80a2a84:	e7ef      	b.n	80a2a66 <_ZN5spark10JSONWriter6printfEPKcz+0x54>

080a2a86 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a2a86:	b510      	push	{r4, lr}
 80a2a88:	4604      	mov	r4, r0
          _M_dispose();
 80a2a8a:	6803      	ldr	r3, [r0, #0]
 80a2a8c:	689b      	ldr	r3, [r3, #8]
 80a2a8e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a2a90:	68a3      	ldr	r3, [r4, #8]
 80a2a92:	3b01      	subs	r3, #1
 80a2a94:	60a3      	str	r3, [r4, #8]
 80a2a96:	b92b      	cbnz	r3, 80a2aa4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80a2a98:	6823      	ldr	r3, [r4, #0]
 80a2a9a:	4620      	mov	r0, r4
    }
 80a2a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80a2aa0:	68db      	ldr	r3, [r3, #12]
 80a2aa2:	4718      	bx	r3
    }
 80a2aa4:	bd10      	pop	{r4, pc}

080a2aa6 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
 80a2aa6:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80a2aa8:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 80a2aaa:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80a2aae:	2201      	movs	r2, #1
 80a2ab0:	689b      	ldr	r3, [r3, #8]
 80a2ab2:	f10d 0107 	add.w	r1, sp, #7
 80a2ab6:	4798      	blx	r3
}
 80a2ab8:	b003      	add	sp, #12
 80a2aba:	f85d fb04 	ldr.w	pc, [sp], #4

080a2abe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
 80a2abe:	b538      	push	{r3, r4, r5, lr}
 80a2ac0:	680b      	ldr	r3, [r1, #0]
 80a2ac2:	4604      	mov	r4, r0
 80a2ac4:	6003      	str	r3, [r0, #0]
 80a2ac6:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 80a2ac8:	6843      	ldr	r3, [r0, #4]
 80a2aca:	429d      	cmp	r5, r3
 80a2acc:	d00c      	beq.n	80a2ae8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
 80a2ace:	b115      	cbz	r5, 80a2ad6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
 80a2ad0:	686b      	ldr	r3, [r5, #4]
 80a2ad2:	3301      	adds	r3, #1
 80a2ad4:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 80a2ad6:	6860      	ldr	r0, [r4, #4]
 80a2ad8:	b128      	cbz	r0, 80a2ae6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
 80a2ada:	6843      	ldr	r3, [r0, #4]
 80a2adc:	3b01      	subs	r3, #1
 80a2ade:	6043      	str	r3, [r0, #4]
 80a2ae0:	b90b      	cbnz	r3, 80a2ae6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
 80a2ae2:	f7ff ffd0 	bl	80a2a86 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 80a2ae6:	6065      	str	r5, [r4, #4]
    class __shared_ptr
 80a2ae8:	4620      	mov	r0, r4
 80a2aea:	bd38      	pop	{r3, r4, r5, pc}

080a2aec <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a2aec:	460b      	mov	r3, r1
 80a2aee:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80a2af0:	2200      	movs	r2, #0
 80a2af2:	b510      	push	{r4, lr}
 80a2af4:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a2af6:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 80a2afa:	6083      	str	r3, [r0, #8]
    if (t) {
 80a2afc:	b90b      	cbnz	r3, 80a2b02 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 80a2afe:	4620      	mov	r0, r4
 80a2b00:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 80a2b02:	f7ff ffdc 	bl	80a2abe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
 80a2b06:	e7fa      	b.n	80a2afe <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

080a2b08 <_ZNK5spark9JSONValue4typeEv>:
spark::JSONType spark::JSONValue::type() const {
 80a2b08:	4603      	mov	r3, r0
    if (!t_) {
 80a2b0a:	6880      	ldr	r0, [r0, #8]
 80a2b0c:	b320      	cbz	r0, 80a2b58 <_ZNK5spark9JSONValue4typeEv+0x50>
    switch (t_->type) {
 80a2b0e:	7802      	ldrb	r2, [r0, #0]
 80a2b10:	2a03      	cmp	r2, #3
 80a2b12:	d81a      	bhi.n	80a2b4a <_ZNK5spark9JSONValue4typeEv+0x42>
 80a2b14:	e8df f002 	tbb	[pc, r2]
 80a2b18:	1b021704 	.word	0x1b021704
 80a2b1c:	2005      	movs	r0, #5
 80a2b1e:	4770      	bx	lr
        const char c = d_->json[t_->start];
 80a2b20:	681b      	ldr	r3, [r3, #0]
 80a2b22:	685a      	ldr	r2, [r3, #4]
 80a2b24:	6843      	ldr	r3, [r0, #4]
 80a2b26:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 80a2b28:	282d      	cmp	r0, #45	; 0x2d
 80a2b2a:	d012      	beq.n	80a2b52 <_ZNK5spark9JSONValue4typeEv+0x4a>
 80a2b2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a2b30:	2b09      	cmp	r3, #9
 80a2b32:	d90e      	bls.n	80a2b52 <_ZNK5spark9JSONValue4typeEv+0x4a>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 80a2b34:	2874      	cmp	r0, #116	; 0x74
 80a2b36:	d00e      	beq.n	80a2b56 <_ZNK5spark9JSONValue4typeEv+0x4e>
 80a2b38:	2866      	cmp	r0, #102	; 0x66
 80a2b3a:	d00c      	beq.n	80a2b56 <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 80a2b3c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 80a2b40:	4258      	negs	r0, r3
 80a2b42:	4158      	adcs	r0, r3
 80a2b44:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 80a2b46:	2006      	movs	r0, #6
 80a2b48:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 80a2b4a:	2000      	movs	r0, #0
 80a2b4c:	4770      	bx	lr
        return JSON_TYPE_STRING;
 80a2b4e:	2004      	movs	r0, #4
 80a2b50:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 80a2b52:	2003      	movs	r0, #3
 80a2b54:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 80a2b56:	2002      	movs	r0, #2
}
 80a2b58:	4770      	bx	lr

080a2b5a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 80a2b5a:	b510      	push	{r4, lr}
 80a2b5c:	4604      	mov	r4, r0
    switch (type()) {
 80a2b5e:	f7ff ffd3 	bl	80a2b08 <_ZNK5spark9JSONValue4typeEv>
 80a2b62:	2802      	cmp	r0, #2
 80a2b64:	d00e      	beq.n	80a2b84 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 80a2b66:	1ec3      	subs	r3, r0, #3
 80a2b68:	b2db      	uxtb	r3, r3
 80a2b6a:	2b01      	cmp	r3, #1
 80a2b6c:	d814      	bhi.n	80a2b98 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 80a2b6e:	6822      	ldr	r2, [r4, #0]
 80a2b70:	68a3      	ldr	r3, [r4, #8]
 80a2b72:	6850      	ldr	r0, [r2, #4]
 80a2b74:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 80a2b76:	220a      	movs	r2, #10
}
 80a2b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 80a2b7c:	2100      	movs	r1, #0
 80a2b7e:	4418      	add	r0, r3
 80a2b80:	f001 bafa 	b.w	80a4178 <strtol>
        const char* const s = d_->json + t_->start;
 80a2b84:	6822      	ldr	r2, [r4, #0]
 80a2b86:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 80a2b88:	6852      	ldr	r2, [r2, #4]
 80a2b8a:	685b      	ldr	r3, [r3, #4]
 80a2b8c:	5cd0      	ldrb	r0, [r2, r3]
 80a2b8e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 80a2b92:	4258      	negs	r0, r3
 80a2b94:	4158      	adcs	r0, r3
}
 80a2b96:	bd10      	pop	{r4, pc}
    switch (type()) {
 80a2b98:	2000      	movs	r0, #0
 80a2b9a:	e7fc      	b.n	80a2b96 <_ZNK5spark9JSONValue5toIntEv+0x3c>

080a2b9c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a2b9c:	460b      	mov	r3, r1
 80a2b9e:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80a2ba0:	2200      	movs	r2, #0
 80a2ba2:	b510      	push	{r4, lr}
 80a2ba4:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a2ba6:	e9c0 2200 	strd	r2, r2, [r0]
        n_(0) {
 80a2baa:	480d      	ldr	r0, [pc, #52]	; (80a2be0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 80a2bac:	e9c4 0202 	strd	r0, r2, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 80a2bb0:	b1a3      	cbz	r3, 80a2bdc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 80a2bb2:	781a      	ldrb	r2, [r3, #0]
 80a2bb4:	2a03      	cmp	r2, #3
 80a2bb6:	d006      	beq.n	80a2bc6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 80a2bb8:	b982      	cbnz	r2, 80a2bdc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 80a2bba:	680a      	ldr	r2, [r1, #0]
 80a2bbc:	6850      	ldr	r0, [r2, #4]
 80a2bbe:	685a      	ldr	r2, [r3, #4]
 80a2bc0:	5c82      	ldrb	r2, [r0, r2]
 80a2bc2:	2a6e      	cmp	r2, #110	; 0x6e
 80a2bc4:	d007      	beq.n	80a2bd6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 80a2bc6:	680a      	ldr	r2, [r1, #0]
 80a2bc8:	6858      	ldr	r0, [r3, #4]
 80a2bca:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 80a2bcc:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 80a2bce:	4402      	add	r2, r0
            n_ = t->end - t->start;
 80a2bd0:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 80a2bd2:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 80a2bd4:	60e3      	str	r3, [r4, #12]
 80a2bd6:	4620      	mov	r0, r4
 80a2bd8:	f7ff ff71 	bl	80a2abe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80a2bdc:	4620      	mov	r0, r4
 80a2bde:	bd10      	pop	{r4, pc}
 80a2be0:	080a4314 	.word	0x080a4314

080a2be4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a2be4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 80a2be6:	2500      	movs	r5, #0
 80a2be8:	460b      	mov	r3, r1
 80a2bea:	4604      	mov	r4, r0
 80a2bec:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 80a2bee:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 80a2bf2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80a2bf6:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 80a2bfa:	b14b      	cbz	r3, 80a2c10 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 80a2bfc:	781a      	ldrb	r2, [r3, #0]
 80a2bfe:	2a01      	cmp	r2, #1
 80a2c00:	d106      	bne.n	80a2c10 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 80a2c02:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 80a2c06:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 80a2c08:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 80a2c0a:	6143      	str	r3, [r0, #20]
 80a2c0c:	f7ff ff57 	bl	80a2abe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80a2c10:	4620      	mov	r0, r4
 80a2c12:	bd38      	pop	{r3, r4, r5, pc}

080a2c14 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 80a2c14:	b510      	push	{r4, lr}
    if (!n_) {
 80a2c16:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 80a2c18:	4604      	mov	r4, r0
    if (!n_) {
 80a2c1a:	b163      	cbz	r3, 80a2c36 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 80a2c1c:	6880      	ldr	r0, [r0, #8]
    --n_;
 80a2c1e:	3b01      	subs	r3, #1
    k_ = t_; // Name
 80a2c20:	60e0      	str	r0, [r4, #12]
    ++t_;
 80a2c22:	3010      	adds	r0, #16
 80a2c24:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 80a2c26:	6120      	str	r0, [r4, #16]
    --n_;
 80a2c28:	6163      	str	r3, [r4, #20]
    if (n_) {
 80a2c2a:	b113      	cbz	r3, 80a2c32 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 80a2c2c:	f7ff feda 	bl	80a29e4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 80a2c30:	60a0      	str	r0, [r4, #8]
    return true;
 80a2c32:	2001      	movs	r0, #1
 80a2c34:	e000      	b.n	80a2c38 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 80a2c36:	4618      	mov	r0, r3
}
 80a2c38:	bd10      	pop	{r4, pc}

080a2c3a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 80a2c3a:	b510      	push	{r4, lr}
    write('}');
 80a2c3c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 80a2c3e:	4604      	mov	r4, r0
    write('}');
 80a2c40:	f7ff ff31 	bl	80a2aa6 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 80a2c44:	2301      	movs	r3, #1
}
 80a2c46:	4620      	mov	r0, r4
    state_ = NEXT;
 80a2c48:	7123      	strb	r3, [r4, #4]
}
 80a2c4a:	bd10      	pop	{r4, pc}

080a2c4c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 80a2c4c:	b508      	push	{r3, lr}
    switch (state_) {
 80a2c4e:	7903      	ldrb	r3, [r0, #4]
 80a2c50:	2b01      	cmp	r3, #1
 80a2c52:	d002      	beq.n	80a2c5a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 80a2c54:	2b02      	cmp	r3, #2
 80a2c56:	d004      	beq.n	80a2c62 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 80a2c58:	bd08      	pop	{r3, pc}
        write(',');
 80a2c5a:	212c      	movs	r1, #44	; 0x2c
        write(':');
 80a2c5c:	f7ff ff23 	bl	80a2aa6 <_ZN5spark10JSONWriter5writeEc>
}
 80a2c60:	e7fa      	b.n	80a2c58 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 80a2c62:	213a      	movs	r1, #58	; 0x3a
 80a2c64:	e7fa      	b.n	80a2c5c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

080a2c66 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 80a2c66:	b510      	push	{r4, lr}
 80a2c68:	4604      	mov	r4, r0
    writeSeparator();
 80a2c6a:	f7ff ffef 	bl	80a2c4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 80a2c6e:	4620      	mov	r0, r4
 80a2c70:	217b      	movs	r1, #123	; 0x7b
 80a2c72:	f7ff ff18 	bl	80a2aa6 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 80a2c76:	2300      	movs	r3, #0
}
 80a2c78:	4620      	mov	r0, r4
    state_ = BEGIN;
 80a2c7a:	7123      	strb	r3, [r4, #4]
}
 80a2c7c:	bd10      	pop	{r4, pc}
	...

080a2c80 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 80a2c80:	b538      	push	{r3, r4, r5, lr}
 80a2c82:	4604      	mov	r4, r0
 80a2c84:	460d      	mov	r5, r1
    writeSeparator();
 80a2c86:	f7ff ffe1 	bl	80a2c4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 80a2c8a:	6823      	ldr	r3, [r4, #0]
 80a2c8c:	4620      	mov	r0, r4
 80a2c8e:	462a      	mov	r2, r5
 80a2c90:	68db      	ldr	r3, [r3, #12]
 80a2c92:	4903      	ldr	r1, [pc, #12]	; (80a2ca0 <_ZN5spark10JSONWriter5valueEi+0x20>)
 80a2c94:	4798      	blx	r3
    state_ = NEXT;
 80a2c96:	2301      	movs	r3, #1
}
 80a2c98:	4620      	mov	r0, r4
    state_ = NEXT;
 80a2c9a:	7123      	strb	r3, [r4, #4]
}
 80a2c9c:	bd38      	pop	{r3, r4, r5, pc}
 80a2c9e:	bf00      	nop
 80a2ca0:	080a42ee 	.word	0x080a42ee

080a2ca4 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 80a2ca4:	b538      	push	{r3, r4, r5, lr}
 80a2ca6:	4604      	mov	r4, r0
 80a2ca8:	460d      	mov	r5, r1
    writeSeparator();
 80a2caa:	f7ff ffcf 	bl	80a2c4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 80a2cae:	6823      	ldr	r3, [r4, #0]
 80a2cb0:	4620      	mov	r0, r4
 80a2cb2:	462a      	mov	r2, r5
 80a2cb4:	68db      	ldr	r3, [r3, #12]
 80a2cb6:	4903      	ldr	r1, [pc, #12]	; (80a2cc4 <_ZN5spark10JSONWriter5valueEj+0x20>)
 80a2cb8:	4798      	blx	r3
    state_ = NEXT;
 80a2cba:	2301      	movs	r3, #1
}
 80a2cbc:	4620      	mov	r0, r4
    state_ = NEXT;
 80a2cbe:	7123      	strb	r3, [r4, #4]
}
 80a2cc0:	bd38      	pop	{r3, r4, r5, pc}
 80a2cc2:	bf00      	nop
 80a2cc4:	080a44c8 	.word	0x080a44c8

080a2cc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a2cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2ccc:	460d      	mov	r5, r1
 80a2cce:	4617      	mov	r7, r2
    write('"');
 80a2cd0:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a2cd2:	4604      	mov	r4, r0
    write('"');
 80a2cd4:	f7ff fee7 	bl	80a2aa6 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
 80a2cd8:	4629      	mov	r1, r5
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 80a2cda:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80a2d74 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
    const char* const end = str + size;
 80a2cde:	442f      	add	r7, r5
    while (s != end) {
 80a2ce0:	42bd      	cmp	r5, r7
 80a2ce2:	462a      	mov	r2, r5
 80a2ce4:	d038      	beq.n	80a2d58 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
 80a2ce6:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 80a2cea:	2e22      	cmp	r6, #34	; 0x22
 80a2cec:	d003      	beq.n	80a2cf6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80a2cee:	2e5c      	cmp	r6, #92	; 0x5c
 80a2cf0:	d001      	beq.n	80a2cf6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80a2cf2:	2e1f      	cmp	r6, #31
 80a2cf4:	d8f4      	bhi.n	80a2ce0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 80a2cf6:	6823      	ldr	r3, [r4, #0]
 80a2cf8:	1a52      	subs	r2, r2, r1
 80a2cfa:	4620      	mov	r0, r4
 80a2cfc:	689b      	ldr	r3, [r3, #8]
 80a2cfe:	4798      	blx	r3
            write('\\');
 80a2d00:	215c      	movs	r1, #92	; 0x5c
 80a2d02:	4620      	mov	r0, r4
 80a2d04:	f7ff fecf 	bl	80a2aa6 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 80a2d08:	2e0d      	cmp	r6, #13
 80a2d0a:	d80a      	bhi.n	80a2d22 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
 80a2d0c:	2e07      	cmp	r6, #7
 80a2d0e:	d91c      	bls.n	80a2d4a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80a2d10:	f1a6 0308 	sub.w	r3, r6, #8
 80a2d14:	2b05      	cmp	r3, #5
 80a2d16:	d818      	bhi.n	80a2d4a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80a2d18:	e8df f003 	tbb	[pc, r3]
 80a2d1c:	17110f0d 	.word	0x17110f0d
 80a2d20:	1513      	.short	0x1513
 80a2d22:	2e22      	cmp	r6, #34	; 0x22
 80a2d24:	d001      	beq.n	80a2d2a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80a2d26:	2e5c      	cmp	r6, #92	; 0x5c
 80a2d28:	d10f      	bne.n	80a2d4a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
 80a2d2a:	4631      	mov	r1, r6
                write('b');
 80a2d2c:	4620      	mov	r0, r4
 80a2d2e:	f7ff feba 	bl	80a2aa6 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 80a2d32:	4629      	mov	r1, r5
    while (s != end) {
 80a2d34:	e7d4      	b.n	80a2ce0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 80a2d36:	2162      	movs	r1, #98	; 0x62
 80a2d38:	e7f8      	b.n	80a2d2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
 80a2d3a:	2174      	movs	r1, #116	; 0x74
 80a2d3c:	e7f6      	b.n	80a2d2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
 80a2d3e:	216e      	movs	r1, #110	; 0x6e
 80a2d40:	e7f4      	b.n	80a2d2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
 80a2d42:	2166      	movs	r1, #102	; 0x66
 80a2d44:	e7f2      	b.n	80a2d2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
 80a2d46:	2172      	movs	r1, #114	; 0x72
 80a2d48:	e7f0      	b.n	80a2d2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
 80a2d4a:	6823      	ldr	r3, [r4, #0]
 80a2d4c:	4632      	mov	r2, r6
 80a2d4e:	4641      	mov	r1, r8
 80a2d50:	4620      	mov	r0, r4
 80a2d52:	68db      	ldr	r3, [r3, #12]
 80a2d54:	4798      	blx	r3
                break;
 80a2d56:	e7ec      	b.n	80a2d32 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
 80a2d58:	428d      	cmp	r5, r1
 80a2d5a:	d004      	beq.n	80a2d66 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
 80a2d5c:	6823      	ldr	r3, [r4, #0]
 80a2d5e:	4620      	mov	r0, r4
 80a2d60:	689b      	ldr	r3, [r3, #8]
 80a2d62:	1a6a      	subs	r2, r5, r1
 80a2d64:	4798      	blx	r3
    }
    write('"');
 80a2d66:	2122      	movs	r1, #34	; 0x22
 80a2d68:	4620      	mov	r0, r4
 80a2d6a:	f7ff fe9c 	bl	80a2aa6 <_ZN5spark10JSONWriter5writeEc>
}
 80a2d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2d72:	bf00      	nop
 80a2d74:	080a44cb 	.word	0x080a44cb

080a2d78 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 80a2d78:	b570      	push	{r4, r5, r6, lr}
 80a2d7a:	4604      	mov	r4, r0
 80a2d7c:	460d      	mov	r5, r1
 80a2d7e:	4616      	mov	r6, r2
    writeSeparator();
 80a2d80:	f7ff ff64 	bl	80a2c4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 80a2d84:	4620      	mov	r0, r4
 80a2d86:	4632      	mov	r2, r6
 80a2d88:	4629      	mov	r1, r5
 80a2d8a:	f7ff ff9d 	bl	80a2cc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 80a2d8e:	2302      	movs	r3, #2
}
 80a2d90:	4620      	mov	r0, r4
    state_ = VALUE;
 80a2d92:	7123      	strb	r3, [r4, #4]
}
 80a2d94:	bd70      	pop	{r4, r5, r6, pc}

080a2d96 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 80a2d96:	b570      	push	{r4, r5, r6, lr}
 80a2d98:	4604      	mov	r4, r0
 80a2d9a:	460d      	mov	r5, r1
 80a2d9c:	4616      	mov	r6, r2
    writeSeparator();
 80a2d9e:	f7ff ff55 	bl	80a2c4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 80a2da2:	4620      	mov	r0, r4
 80a2da4:	4632      	mov	r2, r6
 80a2da6:	4629      	mov	r1, r5
 80a2da8:	f7ff ff8e 	bl	80a2cc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 80a2dac:	2301      	movs	r3, #1
}
 80a2dae:	4620      	mov	r0, r4
    state_ = NEXT;
 80a2db0:	7123      	strb	r3, [r4, #4]
}
 80a2db2:	bd70      	pop	{r4, r5, r6, pc}

080a2db4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a2db4:	b510      	push	{r4, lr}
 80a2db6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2db8:	6880      	ldr	r0, [r0, #8]
 80a2dba:	b108      	cbz	r0, 80a2dc0 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a2dbc:	f7fd fe40 	bl	80a0a40 <os_mutex_recursive_destroy>
 80a2dc0:	4620      	mov	r0, r4
 80a2dc2:	bd10      	pop	{r4, pc}

080a2dc4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2dc4:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a2dc6:	b570      	push	{r4, r5, r6, lr}
 80a2dc8:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a2dca:	d901      	bls.n	80a2dd0 <pinAvailable+0xc>
    return false;
 80a2dcc:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2dce:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2dd0:	f1a0 030d 	sub.w	r3, r0, #13
 80a2dd4:	2b02      	cmp	r3, #2
 80a2dd6:	d90b      	bls.n	80a2df0 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2dd8:	2801      	cmp	r0, #1
 80a2dda:	d826      	bhi.n	80a2e2a <pinAvailable+0x66>
 80a2ddc:	f000 f8ca 	bl	80a2f74 <_Z19__fetch_global_Wirev>
 80a2de0:	2100      	movs	r1, #0
 80a2de2:	7c00      	ldrb	r0, [r0, #16]
 80a2de4:	f7fd fee4 	bl	80a0bb0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2de8:	f080 0001 	eor.w	r0, r0, #1
 80a2dec:	b2c0      	uxtb	r0, r0
 80a2dee:	e7ee      	b.n	80a2dce <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2df0:	4e13      	ldr	r6, [pc, #76]	; (80a2e40 <pinAvailable+0x7c>)
 80a2df2:	7831      	ldrb	r1, [r6, #0]
 80a2df4:	f3bf 8f5b 	dmb	ish
 80a2df8:	f011 0501 	ands.w	r5, r1, #1
 80a2dfc:	d10f      	bne.n	80a2e1e <pinAvailable+0x5a>
 80a2dfe:	4630      	mov	r0, r6
 80a2e00:	f7fd f95a 	bl	80a00b8 <__cxa_guard_acquire>
 80a2e04:	b158      	cbz	r0, 80a2e1e <pinAvailable+0x5a>
 80a2e06:	4629      	mov	r1, r5
 80a2e08:	480e      	ldr	r0, [pc, #56]	; (80a2e44 <pinAvailable+0x80>)
 80a2e0a:	f7fe f81f 	bl	80a0e4c <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2e0e:	4630      	mov	r0, r6
 80a2e10:	f7fd f957 	bl	80a00c2 <__cxa_guard_release>
 80a2e14:	4a0c      	ldr	r2, [pc, #48]	; (80a2e48 <pinAvailable+0x84>)
 80a2e16:	490d      	ldr	r1, [pc, #52]	; (80a2e4c <pinAvailable+0x88>)
 80a2e18:	480a      	ldr	r0, [pc, #40]	; (80a2e44 <pinAvailable+0x80>)
 80a2e1a:	f000 f8d3 	bl	80a2fc4 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2e1e:	4b09      	ldr	r3, [pc, #36]	; (80a2e44 <pinAvailable+0x80>)
 80a2e20:	7818      	ldrb	r0, [r3, #0]
 80a2e22:	f7fd fedf 	bl	80a0be4 <hal_spi_is_enabled>
 80a2e26:	2800      	cmp	r0, #0
 80a2e28:	d1d0      	bne.n	80a2dcc <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2e2a:	3c12      	subs	r4, #18
 80a2e2c:	2c01      	cmp	r4, #1
 80a2e2e:	d805      	bhi.n	80a2e3c <pinAvailable+0x78>
 80a2e30:	f7ff fc98 	bl	80a2764 <_Z22__fetch_global_Serial1v>
 80a2e34:	7c00      	ldrb	r0, [r0, #16]
 80a2e36:	f7fd fe53 	bl	80a0ae0 <hal_usart_is_enabled>
 80a2e3a:	e7d5      	b.n	80a2de8 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a2e3c:	2001      	movs	r0, #1
 80a2e3e:	e7c6      	b.n	80a2dce <pinAvailable+0xa>
 80a2e40:	200005ac 	.word	0x200005ac
 80a2e44:	200005b0 	.word	0x200005b0
 80a2e48:	20000078 	.word	0x20000078
 80a2e4c:	080a2db5 	.word	0x080a2db5

080a2e50 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2e50:	2817      	cmp	r0, #23
{
 80a2e52:	b538      	push	{r3, r4, r5, lr}
 80a2e54:	4604      	mov	r4, r0
 80a2e56:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2e58:	d80a      	bhi.n	80a2e70 <pinMode+0x20>
 80a2e5a:	29ff      	cmp	r1, #255	; 0xff
 80a2e5c:	d008      	beq.n	80a2e70 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a2e5e:	f7ff ffb1 	bl	80a2dc4 <pinAvailable>
 80a2e62:	b128      	cbz	r0, 80a2e70 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a2e64:	4629      	mov	r1, r5
 80a2e66:	4620      	mov	r0, r4
}
 80a2e68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a2e6c:	f7fd bda8 	b.w	80a09c0 <HAL_Pin_Mode>
}
 80a2e70:	bd38      	pop	{r3, r4, r5, pc}

080a2e72 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2e72:	b538      	push	{r3, r4, r5, lr}
 80a2e74:	4604      	mov	r4, r0
 80a2e76:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2e78:	f7fd fdaa 	bl	80a09d0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2e7c:	28ff      	cmp	r0, #255	; 0xff
 80a2e7e:	d010      	beq.n	80a2ea2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a2e80:	2806      	cmp	r0, #6
 80a2e82:	d804      	bhi.n	80a2e8e <digitalWrite+0x1c>
 80a2e84:	234d      	movs	r3, #77	; 0x4d
 80a2e86:	fa23 f000 	lsr.w	r0, r3, r0
 80a2e8a:	07c3      	lsls	r3, r0, #31
 80a2e8c:	d409      	bmi.n	80a2ea2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2e8e:	4620      	mov	r0, r4
 80a2e90:	f7ff ff98 	bl	80a2dc4 <pinAvailable>
 80a2e94:	b128      	cbz	r0, 80a2ea2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2e96:	4629      	mov	r1, r5
 80a2e98:	4620      	mov	r0, r4
}
 80a2e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a2e9e:	f7fd bd9f 	b.w	80a09e0 <HAL_GPIO_Write>
}
 80a2ea2:	bd38      	pop	{r3, r4, r5, pc}

080a2ea4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2ea4:	b510      	push	{r4, lr}
 80a2ea6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2ea8:	f7fd fd92 	bl	80a09d0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a2eac:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a2eae:	b2db      	uxtb	r3, r3
 80a2eb0:	2b01      	cmp	r3, #1
 80a2eb2:	d908      	bls.n	80a2ec6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2eb4:	4620      	mov	r0, r4
 80a2eb6:	f7ff ff85 	bl	80a2dc4 <pinAvailable>
 80a2eba:	b120      	cbz	r0, 80a2ec6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2ebc:	4620      	mov	r0, r4
}
 80a2ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a2ec2:	f7fd bd95 	b.w	80a09f0 <HAL_GPIO_Read>
}
 80a2ec6:	2000      	movs	r0, #0
 80a2ec8:	bd10      	pop	{r4, pc}

080a2eca <shiftIn>:
  }

  return hal_pwm_get_max_frequency(pin);
}

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
 80a2eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2ece:	2500      	movs	r5, #0
 80a2ed0:	4690      	mov	r8, r2
  uint8_t value = 0;
 80a2ed2:	462c      	mov	r4, r5
  uint8_t i;

  for (i = 0; i < 8; ++i) {
    digitalWrite(clockPin, HIGH);
 80a2ed4:	460e      	mov	r6, r1
 80a2ed6:	4607      	mov	r7, r0
 80a2ed8:	4630      	mov	r0, r6
 80a2eda:	2101      	movs	r1, #1
 80a2edc:	f7ff ffc9 	bl	80a2e72 <digitalWrite>
    if (bitOrder == LSBFIRST)
 80a2ee0:	b264      	sxtb	r4, r4
      value |= digitalRead(dataPin) << i;
 80a2ee2:	4638      	mov	r0, r7
    if (bitOrder == LSBFIRST)
 80a2ee4:	f1b8 0f00 	cmp.w	r8, #0
 80a2ee8:	d10e      	bne.n	80a2f08 <shiftIn+0x3e>
      value |= digitalRead(dataPin) << i;
 80a2eea:	f7ff ffdb 	bl	80a2ea4 <digitalRead>
 80a2eee:	40a8      	lsls	r0, r5
    else
      value |= digitalRead(dataPin) << (7 - i);
 80a2ef0:	4304      	orrs	r4, r0
    digitalWrite(clockPin, LOW);
 80a2ef2:	2100      	movs	r1, #0
 80a2ef4:	4630      	mov	r0, r6
 80a2ef6:	3501      	adds	r5, #1
 80a2ef8:	f7ff ffbb 	bl	80a2e72 <digitalWrite>
  for (i = 0; i < 8; ++i) {
 80a2efc:	2d08      	cmp	r5, #8
      value |= digitalRead(dataPin) << (7 - i);
 80a2efe:	b2e4      	uxtb	r4, r4
  for (i = 0; i < 8; ++i) {
 80a2f00:	d1ea      	bne.n	80a2ed8 <shiftIn+0xe>
  }
  return value;
}
 80a2f02:	4620      	mov	r0, r4
 80a2f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      value |= digitalRead(dataPin) << (7 - i);
 80a2f08:	f7ff ffcc 	bl	80a2ea4 <digitalRead>
 80a2f0c:	f1c5 0307 	rsb	r3, r5, #7
 80a2f10:	4098      	lsls	r0, r3
 80a2f12:	e7ed      	b.n	80a2ef0 <shiftIn+0x26>

080a2f14 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2f14:	2300      	movs	r3, #0
 80a2f16:	b513      	push	{r0, r1, r4, lr}
 80a2f18:	4c07      	ldr	r4, [pc, #28]	; (80a2f38 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2f1a:	461a      	mov	r2, r3
 80a2f1c:	4619      	mov	r1, r3
 80a2f1e:	4620      	mov	r0, r4
 80a2f20:	9300      	str	r3, [sp, #0]
 80a2f22:	f7ff fae3 	bl	80a24ec <_ZN9IPAddressC1Ehhhh>
 80a2f26:	4620      	mov	r0, r4
 80a2f28:	4a04      	ldr	r2, [pc, #16]	; (80a2f3c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2f2a:	4905      	ldr	r1, [pc, #20]	; (80a2f40 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2f2c:	b002      	add	sp, #8
 80a2f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2f32:	f000 b847 	b.w	80a2fc4 <__aeabi_atexit>
 80a2f36:	bf00      	nop
 80a2f38:	200005c0 	.word	0x200005c0
 80a2f3c:	20000078 	.word	0x20000078
 80a2f40:	080a243f 	.word	0x080a243f

080a2f44 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a2f44:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a2f46:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a2f48:	2520      	movs	r5, #32
 80a2f4a:	8043      	strh	r3, [r0, #2]
 80a2f4c:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2f4e:	4e08      	ldr	r6, [pc, #32]	; (80a2f70 <_Z17acquireWireBufferv+0x2c>)
{
 80a2f50:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2f52:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2f54:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a2f56:	6085      	str	r5, [r0, #8]
 80a2f58:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2f5a:	4628      	mov	r0, r5
 80a2f5c:	f000 f83b 	bl	80a2fd6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2f60:	4631      	mov	r1, r6
	};
 80a2f62:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2f64:	4628      	mov	r0, r5
 80a2f66:	f000 f836 	bl	80a2fd6 <_ZnajRKSt9nothrow_t>
	};
 80a2f6a:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a2f6c:	4620      	mov	r0, r4
 80a2f6e:	bd70      	pop	{r4, r5, r6, pc}
 80a2f70:	080a44d1 	.word	0x080a44d1

080a2f74 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2f74:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2f76:	4d0f      	ldr	r5, [pc, #60]	; (80a2fb4 <_Z19__fetch_global_Wirev+0x40>)
{
 80a2f78:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2f7a:	7829      	ldrb	r1, [r5, #0]
 80a2f7c:	f3bf 8f5b 	dmb	ish
 80a2f80:	f011 0401 	ands.w	r4, r1, #1
 80a2f84:	d113      	bne.n	80a2fae <_Z19__fetch_global_Wirev+0x3a>
 80a2f86:	4628      	mov	r0, r5
 80a2f88:	f7fd f896 	bl	80a00b8 <__cxa_guard_acquire>
 80a2f8c:	b178      	cbz	r0, 80a2fae <_Z19__fetch_global_Wirev+0x3a>
 80a2f8e:	a801      	add	r0, sp, #4
 80a2f90:	f7ff ffd8 	bl	80a2f44 <_Z17acquireWireBufferv>
 80a2f94:	4621      	mov	r1, r4
 80a2f96:	aa01      	add	r2, sp, #4
 80a2f98:	4807      	ldr	r0, [pc, #28]	; (80a2fb8 <_Z19__fetch_global_Wirev+0x44>)
 80a2f9a:	f7ff fc37 	bl	80a280c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a2f9e:	4628      	mov	r0, r5
 80a2fa0:	f7fd f88f 	bl	80a00c2 <__cxa_guard_release>
 80a2fa4:	4a05      	ldr	r2, [pc, #20]	; (80a2fbc <_Z19__fetch_global_Wirev+0x48>)
 80a2fa6:	4906      	ldr	r1, [pc, #24]	; (80a2fc0 <_Z19__fetch_global_Wirev+0x4c>)
 80a2fa8:	4803      	ldr	r0, [pc, #12]	; (80a2fb8 <_Z19__fetch_global_Wirev+0x44>)
 80a2faa:	f000 f80b 	bl	80a2fc4 <__aeabi_atexit>
	return wire;
}
 80a2fae:	4802      	ldr	r0, [pc, #8]	; (80a2fb8 <_Z19__fetch_global_Wirev+0x44>)
 80a2fb0:	b007      	add	sp, #28
 80a2fb2:	bd30      	pop	{r4, r5, pc}
 80a2fb4:	200005d8 	.word	0x200005d8
 80a2fb8:	200005dc 	.word	0x200005dc
 80a2fbc:	20000078 	.word	0x20000078
 80a2fc0:	080a27b5 	.word	0x080a27b5

080a2fc4 <__aeabi_atexit>:
 80a2fc4:	460b      	mov	r3, r1
 80a2fc6:	4601      	mov	r1, r0
 80a2fc8:	4618      	mov	r0, r3
 80a2fca:	f000 bfa1 	b.w	80a3f10 <__cxa_atexit>

080a2fce <_ZdlPvj>:
 80a2fce:	f7fd b866 	b.w	80a009e <_ZdlPv>

080a2fd2 <_ZnwjRKSt9nothrow_t>:
 80a2fd2:	f7fd b860 	b.w	80a0096 <_Znwj>

080a2fd6 <_ZnajRKSt9nothrow_t>:
 80a2fd6:	f7fd b860 	b.w	80a009a <_Znaj>
	...

080a2fdc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a2fdc:	4901      	ldr	r1, [pc, #4]	; (80a2fe4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a2fde:	f000 b8fb 	b.w	80a31d8 <_ZNKSt9type_infoeqERKS_>
 80a2fe2:	bf00      	nop
 80a2fe4:	080a44ec 	.word	0x080a44ec

080a2fe8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a2fe8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a2fea:	2400      	movs	r4, #0
 80a2fec:	2310      	movs	r3, #16
 80a2fee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a2ff2:	6803      	ldr	r3, [r0, #0]
 80a2ff4:	4615      	mov	r5, r2
 80a2ff6:	699e      	ldr	r6, [r3, #24]
 80a2ff8:	6812      	ldr	r2, [r2, #0]
 80a2ffa:	466b      	mov	r3, sp
 80a2ffc:	9400      	str	r4, [sp, #0]
 80a2ffe:	f88d 4004 	strb.w	r4, [sp, #4]
 80a3002:	47b0      	blx	r6
 80a3004:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a3008:	f003 0306 	and.w	r3, r3, #6
 80a300c:	2b06      	cmp	r3, #6
 80a300e:	bf09      	itett	eq
 80a3010:	2001      	moveq	r0, #1
 80a3012:	4620      	movne	r0, r4
 80a3014:	9b00      	ldreq	r3, [sp, #0]
 80a3016:	602b      	streq	r3, [r5, #0]
 80a3018:	b004      	add	sp, #16
 80a301a:	bd70      	pop	{r4, r5, r6, pc}

080a301c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a301c:	9800      	ldr	r0, [sp, #0]
 80a301e:	4290      	cmp	r0, r2
 80a3020:	bf14      	ite	ne
 80a3022:	2001      	movne	r0, #1
 80a3024:	2006      	moveq	r0, #6
 80a3026:	4770      	bx	lr

080a3028 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a3028:	b510      	push	{r4, lr}
 80a302a:	4604      	mov	r4, r0
 80a302c:	4b02      	ldr	r3, [pc, #8]	; (80a3038 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a302e:	6003      	str	r3, [r0, #0]
 80a3030:	f000 f8cf 	bl	80a31d2 <_ZNSt9type_infoD1Ev>
 80a3034:	4620      	mov	r0, r4
 80a3036:	bd10      	pop	{r4, pc}
 80a3038:	080a452c 	.word	0x080a452c

080a303c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a303c:	b510      	push	{r4, lr}
 80a303e:	4604      	mov	r4, r0
 80a3040:	f7ff fff2 	bl	80a3028 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a3044:	4620      	mov	r0, r4
 80a3046:	2108      	movs	r1, #8
 80a3048:	f7ff ffc1 	bl	80a2fce <_ZdlPvj>
 80a304c:	4620      	mov	r0, r4
 80a304e:	bd10      	pop	{r4, pc}

080a3050 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a3050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3054:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a3058:	461f      	mov	r7, r3
 80a305a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a305e:	4598      	cmp	r8, r3
 80a3060:	4606      	mov	r6, r0
 80a3062:	4615      	mov	r5, r2
 80a3064:	d107      	bne.n	80a3076 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a3066:	9907      	ldr	r1, [sp, #28]
 80a3068:	f000 f8b6 	bl	80a31d8 <_ZNKSt9type_infoeqERKS_>
 80a306c:	b118      	cbz	r0, 80a3076 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a306e:	7165      	strb	r5, [r4, #5]
 80a3070:	2000      	movs	r0, #0
 80a3072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3076:	4639      	mov	r1, r7
 80a3078:	4630      	mov	r0, r6
 80a307a:	f000 f8ad 	bl	80a31d8 <_ZNKSt9type_infoeqERKS_>
 80a307e:	2800      	cmp	r0, #0
 80a3080:	d0f6      	beq.n	80a3070 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a3082:	2301      	movs	r3, #1
 80a3084:	f8c4 8000 	str.w	r8, [r4]
 80a3088:	7125      	strb	r5, [r4, #4]
 80a308a:	71a3      	strb	r3, [r4, #6]
 80a308c:	e7f0      	b.n	80a3070 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a308e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a308e:	b538      	push	{r3, r4, r5, lr}
 80a3090:	4615      	mov	r5, r2
 80a3092:	461c      	mov	r4, r3
 80a3094:	f000 f8a0 	bl	80a31d8 <_ZNKSt9type_infoeqERKS_>
 80a3098:	b120      	cbz	r0, 80a30a4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a309a:	2308      	movs	r3, #8
 80a309c:	60e3      	str	r3, [r4, #12]
 80a309e:	2306      	movs	r3, #6
 80a30a0:	6025      	str	r5, [r4, #0]
 80a30a2:	7123      	strb	r3, [r4, #4]
 80a30a4:	bd38      	pop	{r3, r4, r5, pc}

080a30a6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a30a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a30aa:	4605      	mov	r5, r0
 80a30ac:	460c      	mov	r4, r1
 80a30ae:	4616      	mov	r6, r2
 80a30b0:	461f      	mov	r7, r3
 80a30b2:	f000 f891 	bl	80a31d8 <_ZNKSt9type_infoeqERKS_>
 80a30b6:	b948      	cbnz	r0, 80a30cc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a30b8:	2f03      	cmp	r7, #3
 80a30ba:	d807      	bhi.n	80a30cc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a30bc:	6823      	ldr	r3, [r4, #0]
 80a30be:	4632      	mov	r2, r6
 80a30c0:	4629      	mov	r1, r5
 80a30c2:	4620      	mov	r0, r4
 80a30c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a30c8:	695b      	ldr	r3, [r3, #20]
 80a30ca:	4718      	bx	r3
 80a30cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a30d0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a30d0:	b510      	push	{r4, lr}
 80a30d2:	4604      	mov	r4, r0
 80a30d4:	4b02      	ldr	r3, [pc, #8]	; (80a30e0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a30d6:	6003      	str	r3, [r0, #0]
 80a30d8:	f7ff ffa6 	bl	80a3028 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a30dc:	4620      	mov	r0, r4
 80a30de:	bd10      	pop	{r4, pc}
 80a30e0:	080a458c 	.word	0x080a458c

080a30e4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a30e4:	b510      	push	{r4, lr}
 80a30e6:	4604      	mov	r4, r0
 80a30e8:	f7ff fff2 	bl	80a30d0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a30ec:	4620      	mov	r0, r4
 80a30ee:	210c      	movs	r1, #12
 80a30f0:	f7ff ff6d 	bl	80a2fce <_ZdlPvj>
 80a30f4:	4620      	mov	r0, r4
 80a30f6:	bd10      	pop	{r4, pc}

080a30f8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a30f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a30fc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a3100:	4606      	mov	r6, r0
 80a3102:	4590      	cmp	r8, r2
 80a3104:	460f      	mov	r7, r1
 80a3106:	4615      	mov	r5, r2
 80a3108:	461c      	mov	r4, r3
 80a310a:	d00b      	beq.n	80a3124 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a310c:	68b0      	ldr	r0, [r6, #8]
 80a310e:	462a      	mov	r2, r5
 80a3110:	6803      	ldr	r3, [r0, #0]
 80a3112:	f8cd 8018 	str.w	r8, [sp, #24]
 80a3116:	6a1e      	ldr	r6, [r3, #32]
 80a3118:	4639      	mov	r1, r7
 80a311a:	4623      	mov	r3, r4
 80a311c:	46b4      	mov	ip, r6
 80a311e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a3122:	4760      	bx	ip
 80a3124:	4619      	mov	r1, r3
 80a3126:	f000 f857 	bl	80a31d8 <_ZNKSt9type_infoeqERKS_>
 80a312a:	2800      	cmp	r0, #0
 80a312c:	d0ee      	beq.n	80a310c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a312e:	2006      	movs	r0, #6
 80a3130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3134 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a3134:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3138:	460d      	mov	r5, r1
 80a313a:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a313e:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a3142:	4619      	mov	r1, r3
 80a3144:	4681      	mov	r9, r0
 80a3146:	4617      	mov	r7, r2
 80a3148:	4698      	mov	r8, r3
 80a314a:	f000 f845 	bl	80a31d8 <_ZNKSt9type_infoeqERKS_>
 80a314e:	b190      	cbz	r0, 80a3176 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a3150:	2d00      	cmp	r5, #0
 80a3152:	6034      	str	r4, [r6, #0]
 80a3154:	7137      	strb	r7, [r6, #4]
 80a3156:	db09      	blt.n	80a316c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a3158:	442c      	add	r4, r5
 80a315a:	45a2      	cmp	sl, r4
 80a315c:	bf0c      	ite	eq
 80a315e:	2406      	moveq	r4, #6
 80a3160:	2401      	movne	r4, #1
 80a3162:	71b4      	strb	r4, [r6, #6]
 80a3164:	2000      	movs	r0, #0
 80a3166:	b001      	add	sp, #4
 80a3168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a316c:	3502      	adds	r5, #2
 80a316e:	d1f9      	bne.n	80a3164 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a3170:	2301      	movs	r3, #1
 80a3172:	71b3      	strb	r3, [r6, #6]
 80a3174:	e7f6      	b.n	80a3164 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a3176:	4554      	cmp	r4, sl
 80a3178:	d106      	bne.n	80a3188 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a317a:	4659      	mov	r1, fp
 80a317c:	4648      	mov	r0, r9
 80a317e:	f000 f82b 	bl	80a31d8 <_ZNKSt9type_infoeqERKS_>
 80a3182:	b108      	cbz	r0, 80a3188 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a3184:	7177      	strb	r7, [r6, #5]
 80a3186:	e7ed      	b.n	80a3164 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a3188:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a318c:	463a      	mov	r2, r7
 80a318e:	6803      	ldr	r3, [r0, #0]
 80a3190:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a3194:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a3198:	69dc      	ldr	r4, [r3, #28]
 80a319a:	4629      	mov	r1, r5
 80a319c:	4643      	mov	r3, r8
 80a319e:	46a4      	mov	ip, r4
 80a31a0:	b001      	add	sp, #4
 80a31a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a31a6:	4760      	bx	ip

080a31a8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a31a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a31ac:	4607      	mov	r7, r0
 80a31ae:	460c      	mov	r4, r1
 80a31b0:	4615      	mov	r5, r2
 80a31b2:	461e      	mov	r6, r3
 80a31b4:	f7ff ff6b 	bl	80a308e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a31b8:	b948      	cbnz	r0, 80a31ce <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a31ba:	68b8      	ldr	r0, [r7, #8]
 80a31bc:	462a      	mov	r2, r5
 80a31be:	6803      	ldr	r3, [r0, #0]
 80a31c0:	4621      	mov	r1, r4
 80a31c2:	699f      	ldr	r7, [r3, #24]
 80a31c4:	4633      	mov	r3, r6
 80a31c6:	46bc      	mov	ip, r7
 80a31c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a31cc:	4760      	bx	ip
 80a31ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a31d2 <_ZNSt9type_infoD1Ev>:
 80a31d2:	4770      	bx	lr

080a31d4 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a31d4:	2000      	movs	r0, #0
 80a31d6:	4770      	bx	lr

080a31d8 <_ZNKSt9type_infoeqERKS_>:
 80a31d8:	4281      	cmp	r1, r0
 80a31da:	b508      	push	{r3, lr}
 80a31dc:	d00e      	beq.n	80a31fc <_ZNKSt9type_infoeqERKS_+0x24>
 80a31de:	6840      	ldr	r0, [r0, #4]
 80a31e0:	7803      	ldrb	r3, [r0, #0]
 80a31e2:	2b2a      	cmp	r3, #42	; 0x2a
 80a31e4:	d00c      	beq.n	80a3200 <_ZNKSt9type_infoeqERKS_+0x28>
 80a31e6:	6849      	ldr	r1, [r1, #4]
 80a31e8:	780b      	ldrb	r3, [r1, #0]
 80a31ea:	2b2a      	cmp	r3, #42	; 0x2a
 80a31ec:	bf08      	it	eq
 80a31ee:	3101      	addeq	r1, #1
 80a31f0:	f000 ff07 	bl	80a4002 <strcmp>
 80a31f4:	fab0 f080 	clz	r0, r0
 80a31f8:	0940      	lsrs	r0, r0, #5
 80a31fa:	bd08      	pop	{r3, pc}
 80a31fc:	2001      	movs	r0, #1
 80a31fe:	e7fc      	b.n	80a31fa <_ZNKSt9type_infoeqERKS_+0x22>
 80a3200:	2000      	movs	r0, #0
 80a3202:	e7fa      	b.n	80a31fa <_ZNKSt9type_infoeqERKS_+0x22>

080a3204 <__aeabi_drsub>:
 80a3204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3208:	e002      	b.n	80a3210 <__adddf3>
 80a320a:	bf00      	nop

080a320c <__aeabi_dsub>:
 80a320c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a3210 <__adddf3>:
 80a3210:	b530      	push	{r4, r5, lr}
 80a3212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a321a:	ea94 0f05 	teq	r4, r5
 80a321e:	bf08      	it	eq
 80a3220:	ea90 0f02 	teqeq	r0, r2
 80a3224:	bf1f      	itttt	ne
 80a3226:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a322a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a322e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a3232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3236:	f000 80e2 	beq.w	80a33fe <__adddf3+0x1ee>
 80a323a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a323e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a3242:	bfb8      	it	lt
 80a3244:	426d      	neglt	r5, r5
 80a3246:	dd0c      	ble.n	80a3262 <__adddf3+0x52>
 80a3248:	442c      	add	r4, r5
 80a324a:	ea80 0202 	eor.w	r2, r0, r2
 80a324e:	ea81 0303 	eor.w	r3, r1, r3
 80a3252:	ea82 0000 	eor.w	r0, r2, r0
 80a3256:	ea83 0101 	eor.w	r1, r3, r1
 80a325a:	ea80 0202 	eor.w	r2, r0, r2
 80a325e:	ea81 0303 	eor.w	r3, r1, r3
 80a3262:	2d36      	cmp	r5, #54	; 0x36
 80a3264:	bf88      	it	hi
 80a3266:	bd30      	pophi	{r4, r5, pc}
 80a3268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a326c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3278:	d002      	beq.n	80a3280 <__adddf3+0x70>
 80a327a:	4240      	negs	r0, r0
 80a327c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a328c:	d002      	beq.n	80a3294 <__adddf3+0x84>
 80a328e:	4252      	negs	r2, r2
 80a3290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3294:	ea94 0f05 	teq	r4, r5
 80a3298:	f000 80a7 	beq.w	80a33ea <__adddf3+0x1da>
 80a329c:	f1a4 0401 	sub.w	r4, r4, #1
 80a32a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80a32a4:	db0d      	blt.n	80a32c2 <__adddf3+0xb2>
 80a32a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a32aa:	fa22 f205 	lsr.w	r2, r2, r5
 80a32ae:	1880      	adds	r0, r0, r2
 80a32b0:	f141 0100 	adc.w	r1, r1, #0
 80a32b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80a32b8:	1880      	adds	r0, r0, r2
 80a32ba:	fa43 f305 	asr.w	r3, r3, r5
 80a32be:	4159      	adcs	r1, r3
 80a32c0:	e00e      	b.n	80a32e0 <__adddf3+0xd0>
 80a32c2:	f1a5 0520 	sub.w	r5, r5, #32
 80a32c6:	f10e 0e20 	add.w	lr, lr, #32
 80a32ca:	2a01      	cmp	r2, #1
 80a32cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a32d0:	bf28      	it	cs
 80a32d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a32d6:	fa43 f305 	asr.w	r3, r3, r5
 80a32da:	18c0      	adds	r0, r0, r3
 80a32dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a32e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a32e4:	d507      	bpl.n	80a32f6 <__adddf3+0xe6>
 80a32e6:	f04f 0e00 	mov.w	lr, #0
 80a32ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80a32ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a32f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a32f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a32fa:	d31b      	bcc.n	80a3334 <__adddf3+0x124>
 80a32fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a3300:	d30c      	bcc.n	80a331c <__adddf3+0x10c>
 80a3302:	0849      	lsrs	r1, r1, #1
 80a3304:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a330c:	f104 0401 	add.w	r4, r4, #1
 80a3310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3318:	f080 809a 	bcs.w	80a3450 <__adddf3+0x240>
 80a331c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3320:	bf08      	it	eq
 80a3322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3326:	f150 0000 	adcs.w	r0, r0, #0
 80a332a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a332e:	ea41 0105 	orr.w	r1, r1, r5
 80a3332:	bd30      	pop	{r4, r5, pc}
 80a3334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3338:	4140      	adcs	r0, r0
 80a333a:	eb41 0101 	adc.w	r1, r1, r1
 80a333e:	3c01      	subs	r4, #1
 80a3340:	bf28      	it	cs
 80a3342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a3346:	d2e9      	bcs.n	80a331c <__adddf3+0x10c>
 80a3348:	f091 0f00 	teq	r1, #0
 80a334c:	bf04      	itt	eq
 80a334e:	4601      	moveq	r1, r0
 80a3350:	2000      	moveq	r0, #0
 80a3352:	fab1 f381 	clz	r3, r1
 80a3356:	bf08      	it	eq
 80a3358:	3320      	addeq	r3, #32
 80a335a:	f1a3 030b 	sub.w	r3, r3, #11
 80a335e:	f1b3 0220 	subs.w	r2, r3, #32
 80a3362:	da0c      	bge.n	80a337e <__adddf3+0x16e>
 80a3364:	320c      	adds	r2, #12
 80a3366:	dd08      	ble.n	80a337a <__adddf3+0x16a>
 80a3368:	f102 0c14 	add.w	ip, r2, #20
 80a336c:	f1c2 020c 	rsb	r2, r2, #12
 80a3370:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3374:	fa21 f102 	lsr.w	r1, r1, r2
 80a3378:	e00c      	b.n	80a3394 <__adddf3+0x184>
 80a337a:	f102 0214 	add.w	r2, r2, #20
 80a337e:	bfd8      	it	le
 80a3380:	f1c2 0c20 	rsble	ip, r2, #32
 80a3384:	fa01 f102 	lsl.w	r1, r1, r2
 80a3388:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a338c:	bfdc      	itt	le
 80a338e:	ea41 010c 	orrle.w	r1, r1, ip
 80a3392:	4090      	lslle	r0, r2
 80a3394:	1ae4      	subs	r4, r4, r3
 80a3396:	bfa2      	ittt	ge
 80a3398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a339c:	4329      	orrge	r1, r5
 80a339e:	bd30      	popge	{r4, r5, pc}
 80a33a0:	ea6f 0404 	mvn.w	r4, r4
 80a33a4:	3c1f      	subs	r4, #31
 80a33a6:	da1c      	bge.n	80a33e2 <__adddf3+0x1d2>
 80a33a8:	340c      	adds	r4, #12
 80a33aa:	dc0e      	bgt.n	80a33ca <__adddf3+0x1ba>
 80a33ac:	f104 0414 	add.w	r4, r4, #20
 80a33b0:	f1c4 0220 	rsb	r2, r4, #32
 80a33b4:	fa20 f004 	lsr.w	r0, r0, r4
 80a33b8:	fa01 f302 	lsl.w	r3, r1, r2
 80a33bc:	ea40 0003 	orr.w	r0, r0, r3
 80a33c0:	fa21 f304 	lsr.w	r3, r1, r4
 80a33c4:	ea45 0103 	orr.w	r1, r5, r3
 80a33c8:	bd30      	pop	{r4, r5, pc}
 80a33ca:	f1c4 040c 	rsb	r4, r4, #12
 80a33ce:	f1c4 0220 	rsb	r2, r4, #32
 80a33d2:	fa20 f002 	lsr.w	r0, r0, r2
 80a33d6:	fa01 f304 	lsl.w	r3, r1, r4
 80a33da:	ea40 0003 	orr.w	r0, r0, r3
 80a33de:	4629      	mov	r1, r5
 80a33e0:	bd30      	pop	{r4, r5, pc}
 80a33e2:	fa21 f004 	lsr.w	r0, r1, r4
 80a33e6:	4629      	mov	r1, r5
 80a33e8:	bd30      	pop	{r4, r5, pc}
 80a33ea:	f094 0f00 	teq	r4, #0
 80a33ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a33f2:	bf06      	itte	eq
 80a33f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a33f8:	3401      	addeq	r4, #1
 80a33fa:	3d01      	subne	r5, #1
 80a33fc:	e74e      	b.n	80a329c <__adddf3+0x8c>
 80a33fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3402:	bf18      	it	ne
 80a3404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3408:	d029      	beq.n	80a345e <__adddf3+0x24e>
 80a340a:	ea94 0f05 	teq	r4, r5
 80a340e:	bf08      	it	eq
 80a3410:	ea90 0f02 	teqeq	r0, r2
 80a3414:	d005      	beq.n	80a3422 <__adddf3+0x212>
 80a3416:	ea54 0c00 	orrs.w	ip, r4, r0
 80a341a:	bf04      	itt	eq
 80a341c:	4619      	moveq	r1, r3
 80a341e:	4610      	moveq	r0, r2
 80a3420:	bd30      	pop	{r4, r5, pc}
 80a3422:	ea91 0f03 	teq	r1, r3
 80a3426:	bf1e      	ittt	ne
 80a3428:	2100      	movne	r1, #0
 80a342a:	2000      	movne	r0, #0
 80a342c:	bd30      	popne	{r4, r5, pc}
 80a342e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a3432:	d105      	bne.n	80a3440 <__adddf3+0x230>
 80a3434:	0040      	lsls	r0, r0, #1
 80a3436:	4149      	adcs	r1, r1
 80a3438:	bf28      	it	cs
 80a343a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a343e:	bd30      	pop	{r4, r5, pc}
 80a3440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3444:	bf3c      	itt	cc
 80a3446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a344a:	bd30      	popcc	{r4, r5, pc}
 80a344c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3458:	f04f 0000 	mov.w	r0, #0
 80a345c:	bd30      	pop	{r4, r5, pc}
 80a345e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3462:	bf1a      	itte	ne
 80a3464:	4619      	movne	r1, r3
 80a3466:	4610      	movne	r0, r2
 80a3468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a346c:	bf1c      	itt	ne
 80a346e:	460b      	movne	r3, r1
 80a3470:	4602      	movne	r2, r0
 80a3472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3476:	bf06      	itte	eq
 80a3478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a347c:	ea91 0f03 	teqeq	r1, r3
 80a3480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3484:	bd30      	pop	{r4, r5, pc}
 80a3486:	bf00      	nop

080a3488 <__aeabi_ui2d>:
 80a3488:	f090 0f00 	teq	r0, #0
 80a348c:	bf04      	itt	eq
 80a348e:	2100      	moveq	r1, #0
 80a3490:	4770      	bxeq	lr
 80a3492:	b530      	push	{r4, r5, lr}
 80a3494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a349c:	f04f 0500 	mov.w	r5, #0
 80a34a0:	f04f 0100 	mov.w	r1, #0
 80a34a4:	e750      	b.n	80a3348 <__adddf3+0x138>
 80a34a6:	bf00      	nop

080a34a8 <__aeabi_i2d>:
 80a34a8:	f090 0f00 	teq	r0, #0
 80a34ac:	bf04      	itt	eq
 80a34ae:	2100      	moveq	r1, #0
 80a34b0:	4770      	bxeq	lr
 80a34b2:	b530      	push	{r4, r5, lr}
 80a34b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a34b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a34bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a34c0:	bf48      	it	mi
 80a34c2:	4240      	negmi	r0, r0
 80a34c4:	f04f 0100 	mov.w	r1, #0
 80a34c8:	e73e      	b.n	80a3348 <__adddf3+0x138>
 80a34ca:	bf00      	nop

080a34cc <__aeabi_f2d>:
 80a34cc:	0042      	lsls	r2, r0, #1
 80a34ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a34d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a34d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a34da:	bf1f      	itttt	ne
 80a34dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a34e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a34e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a34e8:	4770      	bxne	lr
 80a34ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a34ee:	bf08      	it	eq
 80a34f0:	4770      	bxeq	lr
 80a34f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a34f6:	bf04      	itt	eq
 80a34f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a34fc:	4770      	bxeq	lr
 80a34fe:	b530      	push	{r4, r5, lr}
 80a3500:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a350c:	e71c      	b.n	80a3348 <__adddf3+0x138>
 80a350e:	bf00      	nop

080a3510 <__aeabi_ul2d>:
 80a3510:	ea50 0201 	orrs.w	r2, r0, r1
 80a3514:	bf08      	it	eq
 80a3516:	4770      	bxeq	lr
 80a3518:	b530      	push	{r4, r5, lr}
 80a351a:	f04f 0500 	mov.w	r5, #0
 80a351e:	e00a      	b.n	80a3536 <__aeabi_l2d+0x16>

080a3520 <__aeabi_l2d>:
 80a3520:	ea50 0201 	orrs.w	r2, r0, r1
 80a3524:	bf08      	it	eq
 80a3526:	4770      	bxeq	lr
 80a3528:	b530      	push	{r4, r5, lr}
 80a352a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a352e:	d502      	bpl.n	80a3536 <__aeabi_l2d+0x16>
 80a3530:	4240      	negs	r0, r0
 80a3532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a353a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a353e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a3542:	f43f aed8 	beq.w	80a32f6 <__adddf3+0xe6>
 80a3546:	f04f 0203 	mov.w	r2, #3
 80a354a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a354e:	bf18      	it	ne
 80a3550:	3203      	addne	r2, #3
 80a3552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3556:	bf18      	it	ne
 80a3558:	3203      	addne	r2, #3
 80a355a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a355e:	f1c2 0320 	rsb	r3, r2, #32
 80a3562:	fa00 fc03 	lsl.w	ip, r0, r3
 80a3566:	fa20 f002 	lsr.w	r0, r0, r2
 80a356a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a356e:	ea40 000e 	orr.w	r0, r0, lr
 80a3572:	fa21 f102 	lsr.w	r1, r1, r2
 80a3576:	4414      	add	r4, r2
 80a3578:	e6bd      	b.n	80a32f6 <__adddf3+0xe6>
 80a357a:	bf00      	nop

080a357c <__aeabi_dmul>:
 80a357c:	b570      	push	{r4, r5, r6, lr}
 80a357e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a358a:	bf1d      	ittte	ne
 80a358c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3590:	ea94 0f0c 	teqne	r4, ip
 80a3594:	ea95 0f0c 	teqne	r5, ip
 80a3598:	f000 f8de 	bleq	80a3758 <__aeabi_dmul+0x1dc>
 80a359c:	442c      	add	r4, r5
 80a359e:	ea81 0603 	eor.w	r6, r1, r3
 80a35a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a35a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a35aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a35ae:	bf18      	it	ne
 80a35b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a35b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a35b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a35bc:	d038      	beq.n	80a3630 <__aeabi_dmul+0xb4>
 80a35be:	fba0 ce02 	umull	ip, lr, r0, r2
 80a35c2:	f04f 0500 	mov.w	r5, #0
 80a35c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a35ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a35ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a35d2:	f04f 0600 	mov.w	r6, #0
 80a35d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a35da:	f09c 0f00 	teq	ip, #0
 80a35de:	bf18      	it	ne
 80a35e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80a35e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a35e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a35ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a35f0:	d204      	bcs.n	80a35fc <__aeabi_dmul+0x80>
 80a35f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a35f6:	416d      	adcs	r5, r5
 80a35f8:	eb46 0606 	adc.w	r6, r6, r6
 80a35fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a360c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3614:	bf88      	it	hi
 80a3616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a361a:	d81e      	bhi.n	80a365a <__aeabi_dmul+0xde>
 80a361c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3620:	bf08      	it	eq
 80a3622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a3626:	f150 0000 	adcs.w	r0, r0, #0
 80a362a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a362e:	bd70      	pop	{r4, r5, r6, pc}
 80a3630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a3634:	ea46 0101 	orr.w	r1, r6, r1
 80a3638:	ea40 0002 	orr.w	r0, r0, r2
 80a363c:	ea81 0103 	eor.w	r1, r1, r3
 80a3640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a3644:	bfc2      	ittt	gt
 80a3646:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a364a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a364e:	bd70      	popgt	{r4, r5, r6, pc}
 80a3650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3654:	f04f 0e00 	mov.w	lr, #0
 80a3658:	3c01      	subs	r4, #1
 80a365a:	f300 80ab 	bgt.w	80a37b4 <__aeabi_dmul+0x238>
 80a365e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a3662:	bfde      	ittt	le
 80a3664:	2000      	movle	r0, #0
 80a3666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a366a:	bd70      	pople	{r4, r5, r6, pc}
 80a366c:	f1c4 0400 	rsb	r4, r4, #0
 80a3670:	3c20      	subs	r4, #32
 80a3672:	da35      	bge.n	80a36e0 <__aeabi_dmul+0x164>
 80a3674:	340c      	adds	r4, #12
 80a3676:	dc1b      	bgt.n	80a36b0 <__aeabi_dmul+0x134>
 80a3678:	f104 0414 	add.w	r4, r4, #20
 80a367c:	f1c4 0520 	rsb	r5, r4, #32
 80a3680:	fa00 f305 	lsl.w	r3, r0, r5
 80a3684:	fa20 f004 	lsr.w	r0, r0, r4
 80a3688:	fa01 f205 	lsl.w	r2, r1, r5
 80a368c:	ea40 0002 	orr.w	r0, r0, r2
 80a3690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a3694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a369c:	fa21 f604 	lsr.w	r6, r1, r4
 80a36a0:	eb42 0106 	adc.w	r1, r2, r6
 80a36a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a36a8:	bf08      	it	eq
 80a36aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a36ae:	bd70      	pop	{r4, r5, r6, pc}
 80a36b0:	f1c4 040c 	rsb	r4, r4, #12
 80a36b4:	f1c4 0520 	rsb	r5, r4, #32
 80a36b8:	fa00 f304 	lsl.w	r3, r0, r4
 80a36bc:	fa20 f005 	lsr.w	r0, r0, r5
 80a36c0:	fa01 f204 	lsl.w	r2, r1, r4
 80a36c4:	ea40 0002 	orr.w	r0, r0, r2
 80a36c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a36cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a36d0:	f141 0100 	adc.w	r1, r1, #0
 80a36d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a36d8:	bf08      	it	eq
 80a36da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a36de:	bd70      	pop	{r4, r5, r6, pc}
 80a36e0:	f1c4 0520 	rsb	r5, r4, #32
 80a36e4:	fa00 f205 	lsl.w	r2, r0, r5
 80a36e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80a36ec:	fa20 f304 	lsr.w	r3, r0, r4
 80a36f0:	fa01 f205 	lsl.w	r2, r1, r5
 80a36f4:	ea43 0302 	orr.w	r3, r3, r2
 80a36f8:	fa21 f004 	lsr.w	r0, r1, r4
 80a36fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3700:	fa21 f204 	lsr.w	r2, r1, r4
 80a3704:	ea20 0002 	bic.w	r0, r0, r2
 80a3708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a370c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3710:	bf08      	it	eq
 80a3712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3716:	bd70      	pop	{r4, r5, r6, pc}
 80a3718:	f094 0f00 	teq	r4, #0
 80a371c:	d10f      	bne.n	80a373e <__aeabi_dmul+0x1c2>
 80a371e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a3722:	0040      	lsls	r0, r0, #1
 80a3724:	eb41 0101 	adc.w	r1, r1, r1
 80a3728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a372c:	bf08      	it	eq
 80a372e:	3c01      	subeq	r4, #1
 80a3730:	d0f7      	beq.n	80a3722 <__aeabi_dmul+0x1a6>
 80a3732:	ea41 0106 	orr.w	r1, r1, r6
 80a3736:	f095 0f00 	teq	r5, #0
 80a373a:	bf18      	it	ne
 80a373c:	4770      	bxne	lr
 80a373e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a3742:	0052      	lsls	r2, r2, #1
 80a3744:	eb43 0303 	adc.w	r3, r3, r3
 80a3748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a374c:	bf08      	it	eq
 80a374e:	3d01      	subeq	r5, #1
 80a3750:	d0f7      	beq.n	80a3742 <__aeabi_dmul+0x1c6>
 80a3752:	ea43 0306 	orr.w	r3, r3, r6
 80a3756:	4770      	bx	lr
 80a3758:	ea94 0f0c 	teq	r4, ip
 80a375c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3760:	bf18      	it	ne
 80a3762:	ea95 0f0c 	teqne	r5, ip
 80a3766:	d00c      	beq.n	80a3782 <__aeabi_dmul+0x206>
 80a3768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a376c:	bf18      	it	ne
 80a376e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3772:	d1d1      	bne.n	80a3718 <__aeabi_dmul+0x19c>
 80a3774:	ea81 0103 	eor.w	r1, r1, r3
 80a3778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a377c:	f04f 0000 	mov.w	r0, #0
 80a3780:	bd70      	pop	{r4, r5, r6, pc}
 80a3782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3786:	bf06      	itte	eq
 80a3788:	4610      	moveq	r0, r2
 80a378a:	4619      	moveq	r1, r3
 80a378c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3790:	d019      	beq.n	80a37c6 <__aeabi_dmul+0x24a>
 80a3792:	ea94 0f0c 	teq	r4, ip
 80a3796:	d102      	bne.n	80a379e <__aeabi_dmul+0x222>
 80a3798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a379c:	d113      	bne.n	80a37c6 <__aeabi_dmul+0x24a>
 80a379e:	ea95 0f0c 	teq	r5, ip
 80a37a2:	d105      	bne.n	80a37b0 <__aeabi_dmul+0x234>
 80a37a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a37a8:	bf1c      	itt	ne
 80a37aa:	4610      	movne	r0, r2
 80a37ac:	4619      	movne	r1, r3
 80a37ae:	d10a      	bne.n	80a37c6 <__aeabi_dmul+0x24a>
 80a37b0:	ea81 0103 	eor.w	r1, r1, r3
 80a37b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a37b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a37bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a37c0:	f04f 0000 	mov.w	r0, #0
 80a37c4:	bd70      	pop	{r4, r5, r6, pc}
 80a37c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a37ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a37ce:	bd70      	pop	{r4, r5, r6, pc}

080a37d0 <__aeabi_ddiv>:
 80a37d0:	b570      	push	{r4, r5, r6, lr}
 80a37d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a37d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a37da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a37de:	bf1d      	ittte	ne
 80a37e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a37e4:	ea94 0f0c 	teqne	r4, ip
 80a37e8:	ea95 0f0c 	teqne	r5, ip
 80a37ec:	f000 f8a7 	bleq	80a393e <__aeabi_ddiv+0x16e>
 80a37f0:	eba4 0405 	sub.w	r4, r4, r5
 80a37f4:	ea81 0e03 	eor.w	lr, r1, r3
 80a37f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a37fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3800:	f000 8088 	beq.w	80a3914 <__aeabi_ddiv+0x144>
 80a3804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a380c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a381c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3828:	429d      	cmp	r5, r3
 80a382a:	bf08      	it	eq
 80a382c:	4296      	cmpeq	r6, r2
 80a382e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a3832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a3836:	d202      	bcs.n	80a383e <__aeabi_ddiv+0x6e>
 80a3838:	085b      	lsrs	r3, r3, #1
 80a383a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a383e:	1ab6      	subs	r6, r6, r2
 80a3840:	eb65 0503 	sbc.w	r5, r5, r3
 80a3844:	085b      	lsrs	r3, r3, #1
 80a3846:	ea4f 0232 	mov.w	r2, r2, rrx
 80a384a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a384e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a3852:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3856:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a385a:	bf22      	ittt	cs
 80a385c:	1ab6      	subcs	r6, r6, r2
 80a385e:	4675      	movcs	r5, lr
 80a3860:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3864:	085b      	lsrs	r3, r3, #1
 80a3866:	ea4f 0232 	mov.w	r2, r2, rrx
 80a386a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a386e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3872:	bf22      	ittt	cs
 80a3874:	1ab6      	subcs	r6, r6, r2
 80a3876:	4675      	movcs	r5, lr
 80a3878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a387c:	085b      	lsrs	r3, r3, #1
 80a387e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3882:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3886:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a388a:	bf22      	ittt	cs
 80a388c:	1ab6      	subcs	r6, r6, r2
 80a388e:	4675      	movcs	r5, lr
 80a3890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3894:	085b      	lsrs	r3, r3, #1
 80a3896:	ea4f 0232 	mov.w	r2, r2, rrx
 80a389a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a389e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a38a2:	bf22      	ittt	cs
 80a38a4:	1ab6      	subcs	r6, r6, r2
 80a38a6:	4675      	movcs	r5, lr
 80a38a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a38ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80a38b0:	d018      	beq.n	80a38e4 <__aeabi_ddiv+0x114>
 80a38b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a38b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a38ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a38be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a38c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a38c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a38ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a38ce:	d1c0      	bne.n	80a3852 <__aeabi_ddiv+0x82>
 80a38d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a38d4:	d10b      	bne.n	80a38ee <__aeabi_ddiv+0x11e>
 80a38d6:	ea41 0100 	orr.w	r1, r1, r0
 80a38da:	f04f 0000 	mov.w	r0, #0
 80a38de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a38e2:	e7b6      	b.n	80a3852 <__aeabi_ddiv+0x82>
 80a38e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a38e8:	bf04      	itt	eq
 80a38ea:	4301      	orreq	r1, r0
 80a38ec:	2000      	moveq	r0, #0
 80a38ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a38f2:	bf88      	it	hi
 80a38f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a38f8:	f63f aeaf 	bhi.w	80a365a <__aeabi_dmul+0xde>
 80a38fc:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3900:	bf04      	itt	eq
 80a3902:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a390a:	f150 0000 	adcs.w	r0, r0, #0
 80a390e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3912:	bd70      	pop	{r4, r5, r6, pc}
 80a3914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a391c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3920:	bfc2      	ittt	gt
 80a3922:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a392a:	bd70      	popgt	{r4, r5, r6, pc}
 80a392c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3930:	f04f 0e00 	mov.w	lr, #0
 80a3934:	3c01      	subs	r4, #1
 80a3936:	e690      	b.n	80a365a <__aeabi_dmul+0xde>
 80a3938:	ea45 0e06 	orr.w	lr, r5, r6
 80a393c:	e68d      	b.n	80a365a <__aeabi_dmul+0xde>
 80a393e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3942:	ea94 0f0c 	teq	r4, ip
 80a3946:	bf08      	it	eq
 80a3948:	ea95 0f0c 	teqeq	r5, ip
 80a394c:	f43f af3b 	beq.w	80a37c6 <__aeabi_dmul+0x24a>
 80a3950:	ea94 0f0c 	teq	r4, ip
 80a3954:	d10a      	bne.n	80a396c <__aeabi_ddiv+0x19c>
 80a3956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a395a:	f47f af34 	bne.w	80a37c6 <__aeabi_dmul+0x24a>
 80a395e:	ea95 0f0c 	teq	r5, ip
 80a3962:	f47f af25 	bne.w	80a37b0 <__aeabi_dmul+0x234>
 80a3966:	4610      	mov	r0, r2
 80a3968:	4619      	mov	r1, r3
 80a396a:	e72c      	b.n	80a37c6 <__aeabi_dmul+0x24a>
 80a396c:	ea95 0f0c 	teq	r5, ip
 80a3970:	d106      	bne.n	80a3980 <__aeabi_ddiv+0x1b0>
 80a3972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3976:	f43f aefd 	beq.w	80a3774 <__aeabi_dmul+0x1f8>
 80a397a:	4610      	mov	r0, r2
 80a397c:	4619      	mov	r1, r3
 80a397e:	e722      	b.n	80a37c6 <__aeabi_dmul+0x24a>
 80a3980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3984:	bf18      	it	ne
 80a3986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a398a:	f47f aec5 	bne.w	80a3718 <__aeabi_dmul+0x19c>
 80a398e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3992:	f47f af0d 	bne.w	80a37b0 <__aeabi_dmul+0x234>
 80a3996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a399a:	f47f aeeb 	bne.w	80a3774 <__aeabi_dmul+0x1f8>
 80a399e:	e712      	b.n	80a37c6 <__aeabi_dmul+0x24a>

080a39a0 <__gedf2>:
 80a39a0:	f04f 3cff 	mov.w	ip, #4294967295
 80a39a4:	e006      	b.n	80a39b4 <__cmpdf2+0x4>
 80a39a6:	bf00      	nop

080a39a8 <__ledf2>:
 80a39a8:	f04f 0c01 	mov.w	ip, #1
 80a39ac:	e002      	b.n	80a39b4 <__cmpdf2+0x4>
 80a39ae:	bf00      	nop

080a39b0 <__cmpdf2>:
 80a39b0:	f04f 0c01 	mov.w	ip, #1
 80a39b4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a39b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a39bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a39c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a39c4:	bf18      	it	ne
 80a39c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a39ca:	d01b      	beq.n	80a3a04 <__cmpdf2+0x54>
 80a39cc:	b001      	add	sp, #4
 80a39ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a39d2:	bf0c      	ite	eq
 80a39d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a39d8:	ea91 0f03 	teqne	r1, r3
 80a39dc:	bf02      	ittt	eq
 80a39de:	ea90 0f02 	teqeq	r0, r2
 80a39e2:	2000      	moveq	r0, #0
 80a39e4:	4770      	bxeq	lr
 80a39e6:	f110 0f00 	cmn.w	r0, #0
 80a39ea:	ea91 0f03 	teq	r1, r3
 80a39ee:	bf58      	it	pl
 80a39f0:	4299      	cmppl	r1, r3
 80a39f2:	bf08      	it	eq
 80a39f4:	4290      	cmpeq	r0, r2
 80a39f6:	bf2c      	ite	cs
 80a39f8:	17d8      	asrcs	r0, r3, #31
 80a39fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a39fe:	f040 0001 	orr.w	r0, r0, #1
 80a3a02:	4770      	bx	lr
 80a3a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3a0c:	d102      	bne.n	80a3a14 <__cmpdf2+0x64>
 80a3a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3a12:	d107      	bne.n	80a3a24 <__cmpdf2+0x74>
 80a3a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3a1c:	d1d6      	bne.n	80a39cc <__cmpdf2+0x1c>
 80a3a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3a22:	d0d3      	beq.n	80a39cc <__cmpdf2+0x1c>
 80a3a24:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3a28:	4770      	bx	lr
 80a3a2a:	bf00      	nop

080a3a2c <__aeabi_cdrcmple>:
 80a3a2c:	4684      	mov	ip, r0
 80a3a2e:	4610      	mov	r0, r2
 80a3a30:	4662      	mov	r2, ip
 80a3a32:	468c      	mov	ip, r1
 80a3a34:	4619      	mov	r1, r3
 80a3a36:	4663      	mov	r3, ip
 80a3a38:	e000      	b.n	80a3a3c <__aeabi_cdcmpeq>
 80a3a3a:	bf00      	nop

080a3a3c <__aeabi_cdcmpeq>:
 80a3a3c:	b501      	push	{r0, lr}
 80a3a3e:	f7ff ffb7 	bl	80a39b0 <__cmpdf2>
 80a3a42:	2800      	cmp	r0, #0
 80a3a44:	bf48      	it	mi
 80a3a46:	f110 0f00 	cmnmi.w	r0, #0
 80a3a4a:	bd01      	pop	{r0, pc}

080a3a4c <__aeabi_dcmpeq>:
 80a3a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3a50:	f7ff fff4 	bl	80a3a3c <__aeabi_cdcmpeq>
 80a3a54:	bf0c      	ite	eq
 80a3a56:	2001      	moveq	r0, #1
 80a3a58:	2000      	movne	r0, #0
 80a3a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3a5e:	bf00      	nop

080a3a60 <__aeabi_dcmplt>:
 80a3a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3a64:	f7ff ffea 	bl	80a3a3c <__aeabi_cdcmpeq>
 80a3a68:	bf34      	ite	cc
 80a3a6a:	2001      	movcc	r0, #1
 80a3a6c:	2000      	movcs	r0, #0
 80a3a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3a72:	bf00      	nop

080a3a74 <__aeabi_dcmple>:
 80a3a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3a78:	f7ff ffe0 	bl	80a3a3c <__aeabi_cdcmpeq>
 80a3a7c:	bf94      	ite	ls
 80a3a7e:	2001      	movls	r0, #1
 80a3a80:	2000      	movhi	r0, #0
 80a3a82:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3a86:	bf00      	nop

080a3a88 <__aeabi_dcmpge>:
 80a3a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3a8c:	f7ff ffce 	bl	80a3a2c <__aeabi_cdrcmple>
 80a3a90:	bf94      	ite	ls
 80a3a92:	2001      	movls	r0, #1
 80a3a94:	2000      	movhi	r0, #0
 80a3a96:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3a9a:	bf00      	nop

080a3a9c <__aeabi_dcmpgt>:
 80a3a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3aa0:	f7ff ffc4 	bl	80a3a2c <__aeabi_cdrcmple>
 80a3aa4:	bf34      	ite	cc
 80a3aa6:	2001      	movcc	r0, #1
 80a3aa8:	2000      	movcs	r0, #0
 80a3aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3aae:	bf00      	nop

080a3ab0 <__aeabi_d2uiz>:
 80a3ab0:	004a      	lsls	r2, r1, #1
 80a3ab2:	d211      	bcs.n	80a3ad8 <__aeabi_d2uiz+0x28>
 80a3ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3ab8:	d211      	bcs.n	80a3ade <__aeabi_d2uiz+0x2e>
 80a3aba:	d50d      	bpl.n	80a3ad8 <__aeabi_d2uiz+0x28>
 80a3abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3ac4:	d40e      	bmi.n	80a3ae4 <__aeabi_d2uiz+0x34>
 80a3ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3ad2:	fa23 f002 	lsr.w	r0, r3, r2
 80a3ad6:	4770      	bx	lr
 80a3ad8:	f04f 0000 	mov.w	r0, #0
 80a3adc:	4770      	bx	lr
 80a3ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3ae2:	d102      	bne.n	80a3aea <__aeabi_d2uiz+0x3a>
 80a3ae4:	f04f 30ff 	mov.w	r0, #4294967295
 80a3ae8:	4770      	bx	lr
 80a3aea:	f04f 0000 	mov.w	r0, #0
 80a3aee:	4770      	bx	lr

080a3af0 <__gesf2>:
 80a3af0:	f04f 3cff 	mov.w	ip, #4294967295
 80a3af4:	e006      	b.n	80a3b04 <__cmpsf2+0x4>
 80a3af6:	bf00      	nop

080a3af8 <__lesf2>:
 80a3af8:	f04f 0c01 	mov.w	ip, #1
 80a3afc:	e002      	b.n	80a3b04 <__cmpsf2+0x4>
 80a3afe:	bf00      	nop

080a3b00 <__cmpsf2>:
 80a3b00:	f04f 0c01 	mov.w	ip, #1
 80a3b04:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3b08:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a3b0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3b10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3b14:	bf18      	it	ne
 80a3b16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3b1a:	d011      	beq.n	80a3b40 <__cmpsf2+0x40>
 80a3b1c:	b001      	add	sp, #4
 80a3b1e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a3b22:	bf18      	it	ne
 80a3b24:	ea90 0f01 	teqne	r0, r1
 80a3b28:	bf58      	it	pl
 80a3b2a:	ebb2 0003 	subspl.w	r0, r2, r3
 80a3b2e:	bf88      	it	hi
 80a3b30:	17c8      	asrhi	r0, r1, #31
 80a3b32:	bf38      	it	cc
 80a3b34:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a3b38:	bf18      	it	ne
 80a3b3a:	f040 0001 	orrne.w	r0, r0, #1
 80a3b3e:	4770      	bx	lr
 80a3b40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3b44:	d102      	bne.n	80a3b4c <__cmpsf2+0x4c>
 80a3b46:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a3b4a:	d105      	bne.n	80a3b58 <__cmpsf2+0x58>
 80a3b4c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a3b50:	d1e4      	bne.n	80a3b1c <__cmpsf2+0x1c>
 80a3b52:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a3b56:	d0e1      	beq.n	80a3b1c <__cmpsf2+0x1c>
 80a3b58:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3b5c:	4770      	bx	lr
 80a3b5e:	bf00      	nop

080a3b60 <__aeabi_cfrcmple>:
 80a3b60:	4684      	mov	ip, r0
 80a3b62:	4608      	mov	r0, r1
 80a3b64:	4661      	mov	r1, ip
 80a3b66:	e7ff      	b.n	80a3b68 <__aeabi_cfcmpeq>

080a3b68 <__aeabi_cfcmpeq>:
 80a3b68:	b50f      	push	{r0, r1, r2, r3, lr}
 80a3b6a:	f7ff ffc9 	bl	80a3b00 <__cmpsf2>
 80a3b6e:	2800      	cmp	r0, #0
 80a3b70:	bf48      	it	mi
 80a3b72:	f110 0f00 	cmnmi.w	r0, #0
 80a3b76:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a3b78 <__aeabi_fcmpeq>:
 80a3b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3b7c:	f7ff fff4 	bl	80a3b68 <__aeabi_cfcmpeq>
 80a3b80:	bf0c      	ite	eq
 80a3b82:	2001      	moveq	r0, #1
 80a3b84:	2000      	movne	r0, #0
 80a3b86:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3b8a:	bf00      	nop

080a3b8c <__aeabi_fcmplt>:
 80a3b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3b90:	f7ff ffea 	bl	80a3b68 <__aeabi_cfcmpeq>
 80a3b94:	bf34      	ite	cc
 80a3b96:	2001      	movcc	r0, #1
 80a3b98:	2000      	movcs	r0, #0
 80a3b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3b9e:	bf00      	nop

080a3ba0 <__aeabi_fcmple>:
 80a3ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3ba4:	f7ff ffe0 	bl	80a3b68 <__aeabi_cfcmpeq>
 80a3ba8:	bf94      	ite	ls
 80a3baa:	2001      	movls	r0, #1
 80a3bac:	2000      	movhi	r0, #0
 80a3bae:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3bb2:	bf00      	nop

080a3bb4 <__aeabi_fcmpge>:
 80a3bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3bb8:	f7ff ffd2 	bl	80a3b60 <__aeabi_cfrcmple>
 80a3bbc:	bf94      	ite	ls
 80a3bbe:	2001      	movls	r0, #1
 80a3bc0:	2000      	movhi	r0, #0
 80a3bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3bc6:	bf00      	nop

080a3bc8 <__aeabi_fcmpgt>:
 80a3bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3bcc:	f7ff ffc8 	bl	80a3b60 <__aeabi_cfrcmple>
 80a3bd0:	bf34      	ite	cc
 80a3bd2:	2001      	movcc	r0, #1
 80a3bd4:	2000      	movcs	r0, #0
 80a3bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3bda:	bf00      	nop

080a3bdc <__aeabi_uldivmod>:
 80a3bdc:	b953      	cbnz	r3, 80a3bf4 <__aeabi_uldivmod+0x18>
 80a3bde:	b94a      	cbnz	r2, 80a3bf4 <__aeabi_uldivmod+0x18>
 80a3be0:	2900      	cmp	r1, #0
 80a3be2:	bf08      	it	eq
 80a3be4:	2800      	cmpeq	r0, #0
 80a3be6:	bf1c      	itt	ne
 80a3be8:	f04f 31ff 	movne.w	r1, #4294967295
 80a3bec:	f04f 30ff 	movne.w	r0, #4294967295
 80a3bf0:	f000 b98c 	b.w	80a3f0c <__aeabi_idiv0>
 80a3bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 80a3bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a3bfc:	f000 f824 	bl	80a3c48 <__udivmoddi4>
 80a3c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a3c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3c08:	b004      	add	sp, #16
 80a3c0a:	4770      	bx	lr

080a3c0c <__aeabi_d2ulz>:
 80a3c0c:	b5d0      	push	{r4, r6, r7, lr}
 80a3c0e:	2200      	movs	r2, #0
 80a3c10:	4b0b      	ldr	r3, [pc, #44]	; (80a3c40 <__aeabi_d2ulz+0x34>)
 80a3c12:	4606      	mov	r6, r0
 80a3c14:	460f      	mov	r7, r1
 80a3c16:	f7ff fcb1 	bl	80a357c <__aeabi_dmul>
 80a3c1a:	f7ff ff49 	bl	80a3ab0 <__aeabi_d2uiz>
 80a3c1e:	4604      	mov	r4, r0
 80a3c20:	f7ff fc32 	bl	80a3488 <__aeabi_ui2d>
 80a3c24:	2200      	movs	r2, #0
 80a3c26:	4b07      	ldr	r3, [pc, #28]	; (80a3c44 <__aeabi_d2ulz+0x38>)
 80a3c28:	f7ff fca8 	bl	80a357c <__aeabi_dmul>
 80a3c2c:	4602      	mov	r2, r0
 80a3c2e:	460b      	mov	r3, r1
 80a3c30:	4630      	mov	r0, r6
 80a3c32:	4639      	mov	r1, r7
 80a3c34:	f7ff faea 	bl	80a320c <__aeabi_dsub>
 80a3c38:	f7ff ff3a 	bl	80a3ab0 <__aeabi_d2uiz>
 80a3c3c:	4621      	mov	r1, r4
 80a3c3e:	bdd0      	pop	{r4, r6, r7, pc}
 80a3c40:	3df00000 	.word	0x3df00000
 80a3c44:	41f00000 	.word	0x41f00000

080a3c48 <__udivmoddi4>:
 80a3c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3c4c:	9e08      	ldr	r6, [sp, #32]
 80a3c4e:	460d      	mov	r5, r1
 80a3c50:	4604      	mov	r4, r0
 80a3c52:	468e      	mov	lr, r1
 80a3c54:	2b00      	cmp	r3, #0
 80a3c56:	f040 8083 	bne.w	80a3d60 <__udivmoddi4+0x118>
 80a3c5a:	428a      	cmp	r2, r1
 80a3c5c:	4617      	mov	r7, r2
 80a3c5e:	d947      	bls.n	80a3cf0 <__udivmoddi4+0xa8>
 80a3c60:	fab2 f382 	clz	r3, r2
 80a3c64:	b14b      	cbz	r3, 80a3c7a <__udivmoddi4+0x32>
 80a3c66:	f1c3 0120 	rsb	r1, r3, #32
 80a3c6a:	fa05 fe03 	lsl.w	lr, r5, r3
 80a3c6e:	fa20 f101 	lsr.w	r1, r0, r1
 80a3c72:	409f      	lsls	r7, r3
 80a3c74:	ea41 0e0e 	orr.w	lr, r1, lr
 80a3c78:	409c      	lsls	r4, r3
 80a3c7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a3c7e:	fbbe fcf8 	udiv	ip, lr, r8
 80a3c82:	fa1f f987 	uxth.w	r9, r7
 80a3c86:	fb08 e21c 	mls	r2, r8, ip, lr
 80a3c8a:	fb0c f009 	mul.w	r0, ip, r9
 80a3c8e:	0c21      	lsrs	r1, r4, #16
 80a3c90:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a3c94:	4290      	cmp	r0, r2
 80a3c96:	d90a      	bls.n	80a3cae <__udivmoddi4+0x66>
 80a3c98:	18ba      	adds	r2, r7, r2
 80a3c9a:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a3c9e:	f080 8118 	bcs.w	80a3ed2 <__udivmoddi4+0x28a>
 80a3ca2:	4290      	cmp	r0, r2
 80a3ca4:	f240 8115 	bls.w	80a3ed2 <__udivmoddi4+0x28a>
 80a3ca8:	f1ac 0c02 	sub.w	ip, ip, #2
 80a3cac:	443a      	add	r2, r7
 80a3cae:	1a12      	subs	r2, r2, r0
 80a3cb0:	fbb2 f0f8 	udiv	r0, r2, r8
 80a3cb4:	fb08 2210 	mls	r2, r8, r0, r2
 80a3cb8:	fb00 f109 	mul.w	r1, r0, r9
 80a3cbc:	b2a4      	uxth	r4, r4
 80a3cbe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a3cc2:	42a1      	cmp	r1, r4
 80a3cc4:	d909      	bls.n	80a3cda <__udivmoddi4+0x92>
 80a3cc6:	193c      	adds	r4, r7, r4
 80a3cc8:	f100 32ff 	add.w	r2, r0, #4294967295
 80a3ccc:	f080 8103 	bcs.w	80a3ed6 <__udivmoddi4+0x28e>
 80a3cd0:	42a1      	cmp	r1, r4
 80a3cd2:	f240 8100 	bls.w	80a3ed6 <__udivmoddi4+0x28e>
 80a3cd6:	3802      	subs	r0, #2
 80a3cd8:	443c      	add	r4, r7
 80a3cda:	1a64      	subs	r4, r4, r1
 80a3cdc:	2100      	movs	r1, #0
 80a3cde:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a3ce2:	b11e      	cbz	r6, 80a3cec <__udivmoddi4+0xa4>
 80a3ce4:	2200      	movs	r2, #0
 80a3ce6:	40dc      	lsrs	r4, r3
 80a3ce8:	e9c6 4200 	strd	r4, r2, [r6]
 80a3cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3cf0:	b902      	cbnz	r2, 80a3cf4 <__udivmoddi4+0xac>
 80a3cf2:	deff      	udf	#255	; 0xff
 80a3cf4:	fab2 f382 	clz	r3, r2
 80a3cf8:	2b00      	cmp	r3, #0
 80a3cfa:	d14f      	bne.n	80a3d9c <__udivmoddi4+0x154>
 80a3cfc:	1a8d      	subs	r5, r1, r2
 80a3cfe:	2101      	movs	r1, #1
 80a3d00:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a3d04:	fa1f f882 	uxth.w	r8, r2
 80a3d08:	fbb5 fcfe 	udiv	ip, r5, lr
 80a3d0c:	fb0e 551c 	mls	r5, lr, ip, r5
 80a3d10:	fb08 f00c 	mul.w	r0, r8, ip
 80a3d14:	0c22      	lsrs	r2, r4, #16
 80a3d16:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a3d1a:	42a8      	cmp	r0, r5
 80a3d1c:	d907      	bls.n	80a3d2e <__udivmoddi4+0xe6>
 80a3d1e:	197d      	adds	r5, r7, r5
 80a3d20:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a3d24:	d202      	bcs.n	80a3d2c <__udivmoddi4+0xe4>
 80a3d26:	42a8      	cmp	r0, r5
 80a3d28:	f200 80e9 	bhi.w	80a3efe <__udivmoddi4+0x2b6>
 80a3d2c:	4694      	mov	ip, r2
 80a3d2e:	1a2d      	subs	r5, r5, r0
 80a3d30:	fbb5 f0fe 	udiv	r0, r5, lr
 80a3d34:	fb0e 5510 	mls	r5, lr, r0, r5
 80a3d38:	fb08 f800 	mul.w	r8, r8, r0
 80a3d3c:	b2a4      	uxth	r4, r4
 80a3d3e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a3d42:	45a0      	cmp	r8, r4
 80a3d44:	d907      	bls.n	80a3d56 <__udivmoddi4+0x10e>
 80a3d46:	193c      	adds	r4, r7, r4
 80a3d48:	f100 32ff 	add.w	r2, r0, #4294967295
 80a3d4c:	d202      	bcs.n	80a3d54 <__udivmoddi4+0x10c>
 80a3d4e:	45a0      	cmp	r8, r4
 80a3d50:	f200 80d9 	bhi.w	80a3f06 <__udivmoddi4+0x2be>
 80a3d54:	4610      	mov	r0, r2
 80a3d56:	eba4 0408 	sub.w	r4, r4, r8
 80a3d5a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a3d5e:	e7c0      	b.n	80a3ce2 <__udivmoddi4+0x9a>
 80a3d60:	428b      	cmp	r3, r1
 80a3d62:	d908      	bls.n	80a3d76 <__udivmoddi4+0x12e>
 80a3d64:	2e00      	cmp	r6, #0
 80a3d66:	f000 80b1 	beq.w	80a3ecc <__udivmoddi4+0x284>
 80a3d6a:	2100      	movs	r1, #0
 80a3d6c:	e9c6 0500 	strd	r0, r5, [r6]
 80a3d70:	4608      	mov	r0, r1
 80a3d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3d76:	fab3 f183 	clz	r1, r3
 80a3d7a:	2900      	cmp	r1, #0
 80a3d7c:	d14b      	bne.n	80a3e16 <__udivmoddi4+0x1ce>
 80a3d7e:	42ab      	cmp	r3, r5
 80a3d80:	d302      	bcc.n	80a3d88 <__udivmoddi4+0x140>
 80a3d82:	4282      	cmp	r2, r0
 80a3d84:	f200 80b9 	bhi.w	80a3efa <__udivmoddi4+0x2b2>
 80a3d88:	1a84      	subs	r4, r0, r2
 80a3d8a:	eb65 0303 	sbc.w	r3, r5, r3
 80a3d8e:	2001      	movs	r0, #1
 80a3d90:	469e      	mov	lr, r3
 80a3d92:	2e00      	cmp	r6, #0
 80a3d94:	d0aa      	beq.n	80a3cec <__udivmoddi4+0xa4>
 80a3d96:	e9c6 4e00 	strd	r4, lr, [r6]
 80a3d9a:	e7a7      	b.n	80a3cec <__udivmoddi4+0xa4>
 80a3d9c:	409f      	lsls	r7, r3
 80a3d9e:	f1c3 0220 	rsb	r2, r3, #32
 80a3da2:	40d1      	lsrs	r1, r2
 80a3da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a3da8:	fbb1 f0fe 	udiv	r0, r1, lr
 80a3dac:	fa1f f887 	uxth.w	r8, r7
 80a3db0:	fb0e 1110 	mls	r1, lr, r0, r1
 80a3db4:	fa24 f202 	lsr.w	r2, r4, r2
 80a3db8:	409d      	lsls	r5, r3
 80a3dba:	fb00 fc08 	mul.w	ip, r0, r8
 80a3dbe:	432a      	orrs	r2, r5
 80a3dc0:	0c15      	lsrs	r5, r2, #16
 80a3dc2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a3dc6:	45ac      	cmp	ip, r5
 80a3dc8:	fa04 f403 	lsl.w	r4, r4, r3
 80a3dcc:	d909      	bls.n	80a3de2 <__udivmoddi4+0x19a>
 80a3dce:	197d      	adds	r5, r7, r5
 80a3dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 80a3dd4:	f080 808f 	bcs.w	80a3ef6 <__udivmoddi4+0x2ae>
 80a3dd8:	45ac      	cmp	ip, r5
 80a3dda:	f240 808c 	bls.w	80a3ef6 <__udivmoddi4+0x2ae>
 80a3dde:	3802      	subs	r0, #2
 80a3de0:	443d      	add	r5, r7
 80a3de2:	eba5 050c 	sub.w	r5, r5, ip
 80a3de6:	fbb5 f1fe 	udiv	r1, r5, lr
 80a3dea:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a3dee:	fb01 f908 	mul.w	r9, r1, r8
 80a3df2:	b295      	uxth	r5, r2
 80a3df4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a3df8:	45a9      	cmp	r9, r5
 80a3dfa:	d907      	bls.n	80a3e0c <__udivmoddi4+0x1c4>
 80a3dfc:	197d      	adds	r5, r7, r5
 80a3dfe:	f101 32ff 	add.w	r2, r1, #4294967295
 80a3e02:	d274      	bcs.n	80a3eee <__udivmoddi4+0x2a6>
 80a3e04:	45a9      	cmp	r9, r5
 80a3e06:	d972      	bls.n	80a3eee <__udivmoddi4+0x2a6>
 80a3e08:	3902      	subs	r1, #2
 80a3e0a:	443d      	add	r5, r7
 80a3e0c:	eba5 0509 	sub.w	r5, r5, r9
 80a3e10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a3e14:	e778      	b.n	80a3d08 <__udivmoddi4+0xc0>
 80a3e16:	f1c1 0720 	rsb	r7, r1, #32
 80a3e1a:	408b      	lsls	r3, r1
 80a3e1c:	fa22 fc07 	lsr.w	ip, r2, r7
 80a3e20:	ea4c 0c03 	orr.w	ip, ip, r3
 80a3e24:	fa25 f407 	lsr.w	r4, r5, r7
 80a3e28:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a3e2c:	fbb4 f9fe 	udiv	r9, r4, lr
 80a3e30:	fa1f f88c 	uxth.w	r8, ip
 80a3e34:	fb0e 4419 	mls	r4, lr, r9, r4
 80a3e38:	fa20 f307 	lsr.w	r3, r0, r7
 80a3e3c:	fb09 fa08 	mul.w	sl, r9, r8
 80a3e40:	408d      	lsls	r5, r1
 80a3e42:	431d      	orrs	r5, r3
 80a3e44:	0c2b      	lsrs	r3, r5, #16
 80a3e46:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a3e4a:	45a2      	cmp	sl, r4
 80a3e4c:	fa02 f201 	lsl.w	r2, r2, r1
 80a3e50:	fa00 f301 	lsl.w	r3, r0, r1
 80a3e54:	d909      	bls.n	80a3e6a <__udivmoddi4+0x222>
 80a3e56:	eb1c 0404 	adds.w	r4, ip, r4
 80a3e5a:	f109 30ff 	add.w	r0, r9, #4294967295
 80a3e5e:	d248      	bcs.n	80a3ef2 <__udivmoddi4+0x2aa>
 80a3e60:	45a2      	cmp	sl, r4
 80a3e62:	d946      	bls.n	80a3ef2 <__udivmoddi4+0x2aa>
 80a3e64:	f1a9 0902 	sub.w	r9, r9, #2
 80a3e68:	4464      	add	r4, ip
 80a3e6a:	eba4 040a 	sub.w	r4, r4, sl
 80a3e6e:	fbb4 f0fe 	udiv	r0, r4, lr
 80a3e72:	fb0e 4410 	mls	r4, lr, r0, r4
 80a3e76:	fb00 fa08 	mul.w	sl, r0, r8
 80a3e7a:	b2ad      	uxth	r5, r5
 80a3e7c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a3e80:	45a2      	cmp	sl, r4
 80a3e82:	d908      	bls.n	80a3e96 <__udivmoddi4+0x24e>
 80a3e84:	eb1c 0404 	adds.w	r4, ip, r4
 80a3e88:	f100 35ff 	add.w	r5, r0, #4294967295
 80a3e8c:	d22d      	bcs.n	80a3eea <__udivmoddi4+0x2a2>
 80a3e8e:	45a2      	cmp	sl, r4
 80a3e90:	d92b      	bls.n	80a3eea <__udivmoddi4+0x2a2>
 80a3e92:	3802      	subs	r0, #2
 80a3e94:	4464      	add	r4, ip
 80a3e96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a3e9a:	fba0 8902 	umull	r8, r9, r0, r2
 80a3e9e:	eba4 040a 	sub.w	r4, r4, sl
 80a3ea2:	454c      	cmp	r4, r9
 80a3ea4:	46c6      	mov	lr, r8
 80a3ea6:	464d      	mov	r5, r9
 80a3ea8:	d319      	bcc.n	80a3ede <__udivmoddi4+0x296>
 80a3eaa:	d016      	beq.n	80a3eda <__udivmoddi4+0x292>
 80a3eac:	b15e      	cbz	r6, 80a3ec6 <__udivmoddi4+0x27e>
 80a3eae:	ebb3 020e 	subs.w	r2, r3, lr
 80a3eb2:	eb64 0405 	sbc.w	r4, r4, r5
 80a3eb6:	fa04 f707 	lsl.w	r7, r4, r7
 80a3eba:	fa22 f301 	lsr.w	r3, r2, r1
 80a3ebe:	431f      	orrs	r7, r3
 80a3ec0:	40cc      	lsrs	r4, r1
 80a3ec2:	e9c6 7400 	strd	r7, r4, [r6]
 80a3ec6:	2100      	movs	r1, #0
 80a3ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3ecc:	4631      	mov	r1, r6
 80a3ece:	4630      	mov	r0, r6
 80a3ed0:	e70c      	b.n	80a3cec <__udivmoddi4+0xa4>
 80a3ed2:	468c      	mov	ip, r1
 80a3ed4:	e6eb      	b.n	80a3cae <__udivmoddi4+0x66>
 80a3ed6:	4610      	mov	r0, r2
 80a3ed8:	e6ff      	b.n	80a3cda <__udivmoddi4+0x92>
 80a3eda:	4543      	cmp	r3, r8
 80a3edc:	d2e6      	bcs.n	80a3eac <__udivmoddi4+0x264>
 80a3ede:	ebb8 0e02 	subs.w	lr, r8, r2
 80a3ee2:	eb69 050c 	sbc.w	r5, r9, ip
 80a3ee6:	3801      	subs	r0, #1
 80a3ee8:	e7e0      	b.n	80a3eac <__udivmoddi4+0x264>
 80a3eea:	4628      	mov	r0, r5
 80a3eec:	e7d3      	b.n	80a3e96 <__udivmoddi4+0x24e>
 80a3eee:	4611      	mov	r1, r2
 80a3ef0:	e78c      	b.n	80a3e0c <__udivmoddi4+0x1c4>
 80a3ef2:	4681      	mov	r9, r0
 80a3ef4:	e7b9      	b.n	80a3e6a <__udivmoddi4+0x222>
 80a3ef6:	4608      	mov	r0, r1
 80a3ef8:	e773      	b.n	80a3de2 <__udivmoddi4+0x19a>
 80a3efa:	4608      	mov	r0, r1
 80a3efc:	e749      	b.n	80a3d92 <__udivmoddi4+0x14a>
 80a3efe:	f1ac 0c02 	sub.w	ip, ip, #2
 80a3f02:	443d      	add	r5, r7
 80a3f04:	e713      	b.n	80a3d2e <__udivmoddi4+0xe6>
 80a3f06:	3802      	subs	r0, #2
 80a3f08:	443c      	add	r4, r7
 80a3f0a:	e724      	b.n	80a3d56 <__udivmoddi4+0x10e>

080a3f0c <__aeabi_idiv0>:
 80a3f0c:	4770      	bx	lr
 80a3f0e:	bf00      	nop

080a3f10 <__cxa_atexit>:
 80a3f10:	b510      	push	{r4, lr}
 80a3f12:	4604      	mov	r4, r0
 80a3f14:	4804      	ldr	r0, [pc, #16]	; (80a3f28 <__cxa_atexit+0x18>)
 80a3f16:	4613      	mov	r3, r2
 80a3f18:	b120      	cbz	r0, 80a3f24 <__cxa_atexit+0x14>
 80a3f1a:	460a      	mov	r2, r1
 80a3f1c:	2002      	movs	r0, #2
 80a3f1e:	4621      	mov	r1, r4
 80a3f20:	f3af 8000 	nop.w
 80a3f24:	bd10      	pop	{r4, pc}
 80a3f26:	bf00      	nop
 80a3f28:	00000000 	.word	0x00000000

080a3f2c <memcpy>:
 80a3f2c:	440a      	add	r2, r1
 80a3f2e:	4291      	cmp	r1, r2
 80a3f30:	f100 33ff 	add.w	r3, r0, #4294967295
 80a3f34:	d100      	bne.n	80a3f38 <memcpy+0xc>
 80a3f36:	4770      	bx	lr
 80a3f38:	b510      	push	{r4, lr}
 80a3f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3f3e:	4291      	cmp	r1, r2
 80a3f40:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3f44:	d1f9      	bne.n	80a3f3a <memcpy+0xe>
 80a3f46:	bd10      	pop	{r4, pc}

080a3f48 <memmove>:
 80a3f48:	4288      	cmp	r0, r1
 80a3f4a:	b510      	push	{r4, lr}
 80a3f4c:	eb01 0402 	add.w	r4, r1, r2
 80a3f50:	d902      	bls.n	80a3f58 <memmove+0x10>
 80a3f52:	4284      	cmp	r4, r0
 80a3f54:	4623      	mov	r3, r4
 80a3f56:	d807      	bhi.n	80a3f68 <memmove+0x20>
 80a3f58:	1e43      	subs	r3, r0, #1
 80a3f5a:	42a1      	cmp	r1, r4
 80a3f5c:	d008      	beq.n	80a3f70 <memmove+0x28>
 80a3f5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a3f62:	f803 2f01 	strb.w	r2, [r3, #1]!
 80a3f66:	e7f8      	b.n	80a3f5a <memmove+0x12>
 80a3f68:	4601      	mov	r1, r0
 80a3f6a:	4402      	add	r2, r0
 80a3f6c:	428a      	cmp	r2, r1
 80a3f6e:	d100      	bne.n	80a3f72 <memmove+0x2a>
 80a3f70:	bd10      	pop	{r4, pc}
 80a3f72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a3f76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80a3f7a:	e7f7      	b.n	80a3f6c <memmove+0x24>

080a3f7c <memset>:
 80a3f7c:	4603      	mov	r3, r0
 80a3f7e:	4402      	add	r2, r0
 80a3f80:	4293      	cmp	r3, r2
 80a3f82:	d100      	bne.n	80a3f86 <memset+0xa>
 80a3f84:	4770      	bx	lr
 80a3f86:	f803 1b01 	strb.w	r1, [r3], #1
 80a3f8a:	e7f9      	b.n	80a3f80 <memset+0x4>

080a3f8c <srand>:
 80a3f8c:	b538      	push	{r3, r4, r5, lr}
 80a3f8e:	4b0d      	ldr	r3, [pc, #52]	; (80a3fc4 <srand+0x38>)
 80a3f90:	4604      	mov	r4, r0
 80a3f92:	681d      	ldr	r5, [r3, #0]
 80a3f94:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3f96:	b97b      	cbnz	r3, 80a3fb8 <srand+0x2c>
 80a3f98:	2018      	movs	r0, #24
 80a3f9a:	f7fc ff2f 	bl	80a0dfc <malloc>
 80a3f9e:	4a0a      	ldr	r2, [pc, #40]	; (80a3fc8 <srand+0x3c>)
 80a3fa0:	4b0a      	ldr	r3, [pc, #40]	; (80a3fcc <srand+0x40>)
 80a3fa2:	63a8      	str	r0, [r5, #56]	; 0x38
 80a3fa4:	e9c0 2300 	strd	r2, r3, [r0]
 80a3fa8:	4b09      	ldr	r3, [pc, #36]	; (80a3fd0 <srand+0x44>)
 80a3faa:	2201      	movs	r2, #1
 80a3fac:	6083      	str	r3, [r0, #8]
 80a3fae:	230b      	movs	r3, #11
 80a3fb0:	8183      	strh	r3, [r0, #12]
 80a3fb2:	2300      	movs	r3, #0
 80a3fb4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3fb8:	2200      	movs	r2, #0
 80a3fba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3fbc:	611c      	str	r4, [r3, #16]
 80a3fbe:	615a      	str	r2, [r3, #20]
 80a3fc0:	bd38      	pop	{r3, r4, r5, pc}
 80a3fc2:	bf00      	nop
 80a3fc4:	20000010 	.word	0x20000010
 80a3fc8:	abcd330e 	.word	0xabcd330e
 80a3fcc:	e66d1234 	.word	0xe66d1234
 80a3fd0:	0005deec 	.word	0x0005deec

080a3fd4 <strchr>:
 80a3fd4:	4603      	mov	r3, r0
 80a3fd6:	b2c9      	uxtb	r1, r1
 80a3fd8:	4618      	mov	r0, r3
 80a3fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3fde:	b112      	cbz	r2, 80a3fe6 <strchr+0x12>
 80a3fe0:	428a      	cmp	r2, r1
 80a3fe2:	d1f9      	bne.n	80a3fd8 <strchr+0x4>
 80a3fe4:	4770      	bx	lr
 80a3fe6:	2900      	cmp	r1, #0
 80a3fe8:	bf18      	it	ne
 80a3fea:	2000      	movne	r0, #0
 80a3fec:	4770      	bx	lr

080a3fee <strchrnul>:
 80a3fee:	b510      	push	{r4, lr}
 80a3ff0:	4604      	mov	r4, r0
 80a3ff2:	f7ff ffef 	bl	80a3fd4 <strchr>
 80a3ff6:	b918      	cbnz	r0, 80a4000 <strchrnul+0x12>
 80a3ff8:	4620      	mov	r0, r4
 80a3ffa:	f000 f814 	bl	80a4026 <strlen>
 80a3ffe:	4420      	add	r0, r4
 80a4000:	bd10      	pop	{r4, pc}

080a4002 <strcmp>:
 80a4002:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a4006:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a400a:	2a01      	cmp	r2, #1
 80a400c:	bf28      	it	cs
 80a400e:	429a      	cmpcs	r2, r3
 80a4010:	d0f7      	beq.n	80a4002 <strcmp>
 80a4012:	1ad0      	subs	r0, r2, r3
 80a4014:	4770      	bx	lr

080a4016 <strcpy>:
 80a4016:	4603      	mov	r3, r0
 80a4018:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a401c:	f803 2b01 	strb.w	r2, [r3], #1
 80a4020:	2a00      	cmp	r2, #0
 80a4022:	d1f9      	bne.n	80a4018 <strcpy+0x2>
 80a4024:	4770      	bx	lr

080a4026 <strlen>:
 80a4026:	4603      	mov	r3, r0
 80a4028:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a402c:	2a00      	cmp	r2, #0
 80a402e:	d1fb      	bne.n	80a4028 <strlen+0x2>
 80a4030:	1a18      	subs	r0, r3, r0
 80a4032:	3801      	subs	r0, #1
 80a4034:	4770      	bx	lr

080a4036 <strncmp>:
 80a4036:	b510      	push	{r4, lr}
 80a4038:	b16a      	cbz	r2, 80a4056 <strncmp+0x20>
 80a403a:	3901      	subs	r1, #1
 80a403c:	1884      	adds	r4, r0, r2
 80a403e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a4042:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a4046:	4293      	cmp	r3, r2
 80a4048:	d103      	bne.n	80a4052 <strncmp+0x1c>
 80a404a:	42a0      	cmp	r0, r4
 80a404c:	d001      	beq.n	80a4052 <strncmp+0x1c>
 80a404e:	2b00      	cmp	r3, #0
 80a4050:	d1f5      	bne.n	80a403e <strncmp+0x8>
 80a4052:	1a98      	subs	r0, r3, r2
 80a4054:	bd10      	pop	{r4, pc}
 80a4056:	4610      	mov	r0, r2
 80a4058:	e7fc      	b.n	80a4054 <strncmp+0x1e>

080a405a <strrchr>:
 80a405a:	b538      	push	{r3, r4, r5, lr}
 80a405c:	4603      	mov	r3, r0
 80a405e:	460c      	mov	r4, r1
 80a4060:	b969      	cbnz	r1, 80a407e <strrchr+0x24>
 80a4062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a4066:	f7ff bfb5 	b.w	80a3fd4 <strchr>
 80a406a:	4605      	mov	r5, r0
 80a406c:	1c43      	adds	r3, r0, #1
 80a406e:	4621      	mov	r1, r4
 80a4070:	4618      	mov	r0, r3
 80a4072:	f7ff ffaf 	bl	80a3fd4 <strchr>
 80a4076:	2800      	cmp	r0, #0
 80a4078:	d1f7      	bne.n	80a406a <strrchr+0x10>
 80a407a:	4628      	mov	r0, r5
 80a407c:	bd38      	pop	{r3, r4, r5, pc}
 80a407e:	2500      	movs	r5, #0
 80a4080:	e7f5      	b.n	80a406e <strrchr+0x14>
	...

080a4084 <_strtol_l.isra.0>:
 80a4084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4088:	468c      	mov	ip, r1
 80a408a:	4686      	mov	lr, r0
 80a408c:	4e39      	ldr	r6, [pc, #228]	; (80a4174 <_strtol_l.isra.0+0xf0>)
 80a408e:	4660      	mov	r0, ip
 80a4090:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a4094:	5da5      	ldrb	r5, [r4, r6]
 80a4096:	f015 0508 	ands.w	r5, r5, #8
 80a409a:	d1f8      	bne.n	80a408e <_strtol_l.isra.0+0xa>
 80a409c:	2c2d      	cmp	r4, #45	; 0x2d
 80a409e:	d133      	bne.n	80a4108 <_strtol_l.isra.0+0x84>
 80a40a0:	f04f 0801 	mov.w	r8, #1
 80a40a4:	f89c 4000 	ldrb.w	r4, [ip]
 80a40a8:	f100 0c02 	add.w	ip, r0, #2
 80a40ac:	2b00      	cmp	r3, #0
 80a40ae:	d05c      	beq.n	80a416a <_strtol_l.isra.0+0xe6>
 80a40b0:	2b10      	cmp	r3, #16
 80a40b2:	d10c      	bne.n	80a40ce <_strtol_l.isra.0+0x4a>
 80a40b4:	2c30      	cmp	r4, #48	; 0x30
 80a40b6:	d10a      	bne.n	80a40ce <_strtol_l.isra.0+0x4a>
 80a40b8:	f89c 0000 	ldrb.w	r0, [ip]
 80a40bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a40c0:	2858      	cmp	r0, #88	; 0x58
 80a40c2:	d14d      	bne.n	80a4160 <_strtol_l.isra.0+0xdc>
 80a40c4:	2310      	movs	r3, #16
 80a40c6:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a40ca:	f10c 0c02 	add.w	ip, ip, #2
 80a40ce:	2600      	movs	r6, #0
 80a40d0:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80a40d4:	3f01      	subs	r7, #1
 80a40d6:	fbb7 f9f3 	udiv	r9, r7, r3
 80a40da:	4630      	mov	r0, r6
 80a40dc:	fb03 7a19 	mls	sl, r3, r9, r7
 80a40e0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80a40e4:	2d09      	cmp	r5, #9
 80a40e6:	d818      	bhi.n	80a411a <_strtol_l.isra.0+0x96>
 80a40e8:	462c      	mov	r4, r5
 80a40ea:	42a3      	cmp	r3, r4
 80a40ec:	dd24      	ble.n	80a4138 <_strtol_l.isra.0+0xb4>
 80a40ee:	1c75      	adds	r5, r6, #1
 80a40f0:	d007      	beq.n	80a4102 <_strtol_l.isra.0+0x7e>
 80a40f2:	4581      	cmp	r9, r0
 80a40f4:	d31d      	bcc.n	80a4132 <_strtol_l.isra.0+0xae>
 80a40f6:	d101      	bne.n	80a40fc <_strtol_l.isra.0+0x78>
 80a40f8:	45a2      	cmp	sl, r4
 80a40fa:	db1a      	blt.n	80a4132 <_strtol_l.isra.0+0xae>
 80a40fc:	2601      	movs	r6, #1
 80a40fe:	fb00 4003 	mla	r0, r0, r3, r4
 80a4102:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a4106:	e7eb      	b.n	80a40e0 <_strtol_l.isra.0+0x5c>
 80a4108:	2c2b      	cmp	r4, #43	; 0x2b
 80a410a:	bf08      	it	eq
 80a410c:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a4110:	46a8      	mov	r8, r5
 80a4112:	bf08      	it	eq
 80a4114:	f100 0c02 	addeq.w	ip, r0, #2
 80a4118:	e7c8      	b.n	80a40ac <_strtol_l.isra.0+0x28>
 80a411a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80a411e:	2d19      	cmp	r5, #25
 80a4120:	d801      	bhi.n	80a4126 <_strtol_l.isra.0+0xa2>
 80a4122:	3c37      	subs	r4, #55	; 0x37
 80a4124:	e7e1      	b.n	80a40ea <_strtol_l.isra.0+0x66>
 80a4126:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80a412a:	2d19      	cmp	r5, #25
 80a412c:	d804      	bhi.n	80a4138 <_strtol_l.isra.0+0xb4>
 80a412e:	3c57      	subs	r4, #87	; 0x57
 80a4130:	e7db      	b.n	80a40ea <_strtol_l.isra.0+0x66>
 80a4132:	f04f 36ff 	mov.w	r6, #4294967295
 80a4136:	e7e4      	b.n	80a4102 <_strtol_l.isra.0+0x7e>
 80a4138:	1c73      	adds	r3, r6, #1
 80a413a:	d106      	bne.n	80a414a <_strtol_l.isra.0+0xc6>
 80a413c:	2322      	movs	r3, #34	; 0x22
 80a413e:	4638      	mov	r0, r7
 80a4140:	f8ce 3000 	str.w	r3, [lr]
 80a4144:	b942      	cbnz	r2, 80a4158 <_strtol_l.isra.0+0xd4>
 80a4146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a414a:	f1b8 0f00 	cmp.w	r8, #0
 80a414e:	d000      	beq.n	80a4152 <_strtol_l.isra.0+0xce>
 80a4150:	4240      	negs	r0, r0
 80a4152:	2a00      	cmp	r2, #0
 80a4154:	d0f7      	beq.n	80a4146 <_strtol_l.isra.0+0xc2>
 80a4156:	b10e      	cbz	r6, 80a415c <_strtol_l.isra.0+0xd8>
 80a4158:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a415c:	6011      	str	r1, [r2, #0]
 80a415e:	e7f2      	b.n	80a4146 <_strtol_l.isra.0+0xc2>
 80a4160:	2430      	movs	r4, #48	; 0x30
 80a4162:	2b00      	cmp	r3, #0
 80a4164:	d1b3      	bne.n	80a40ce <_strtol_l.isra.0+0x4a>
 80a4166:	2308      	movs	r3, #8
 80a4168:	e7b1      	b.n	80a40ce <_strtol_l.isra.0+0x4a>
 80a416a:	2c30      	cmp	r4, #48	; 0x30
 80a416c:	d0a4      	beq.n	80a40b8 <_strtol_l.isra.0+0x34>
 80a416e:	230a      	movs	r3, #10
 80a4170:	e7ad      	b.n	80a40ce <_strtol_l.isra.0+0x4a>
 80a4172:	bf00      	nop
 80a4174:	080a45c6 	.word	0x080a45c6

080a4178 <strtol>:
 80a4178:	4613      	mov	r3, r2
 80a417a:	460a      	mov	r2, r1
 80a417c:	4601      	mov	r1, r0
 80a417e:	4802      	ldr	r0, [pc, #8]	; (80a4188 <strtol+0x10>)
 80a4180:	6800      	ldr	r0, [r0, #0]
 80a4182:	f7ff bf7f 	b.w	80a4084 <_strtol_l.isra.0>
 80a4186:	bf00      	nop
 80a4188:	20000010 	.word	0x20000010

080a418c <dynalib_user>:
 80a418c:	080a001d 080a005d 080a0085 080a0089     ....]...........
 80a419c:	00000000 656e6f63 64617463 2061206f     ....conectado a 
 80a41ac:	6576756e 6d65206d 756c2520 00736d20     nuvem em %lu ms.
 80a41bc:	686c6166 65642061 6e6f6320 6f617865     falha de conexao
 80a41cc:	6e65202c 6e617274 6e206f64 6f6d206f     , entrando no mo
 80a41dc:	53206f64 5045454c 73655000 676b006f     do SLEEP.Peso.kg
 80a41ec:	72615400 61642061 6c616220 61636e61     .Tara da balanca
 80a41fc:	65702000 6e20616c 6d657675 61540021     . pela nuvem!.Ta
 80a420c:	64206172 61622061 636e616c 2e2e2e61     ra da balanca...
 80a421c:	72617400 61635365 0000656c              .tareScale..

080a4228 <_ZTVN5spark10LogHandlerE>:
	...
 80a4238:	080a00a5 080a00c9                       ........

080a4240 <_ZTVN5spark17Serial1LogHandlerE>:
	...
 80a4248:	080a013d 080a0171 080a1f45 080a00cb     =...q...E.......

080a4258 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle6detail10FutureImplIbNS1_13FutureContextEEESaIS4_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a4260:	080a00d3 080a00d5 080a01af 080a0109     ................
 80a4270:	080a00e5                                ....

080a4274 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a427c <_ZTV8HX711ADC>:
	...
 80a4284:	080a061d 080a061f                       ........

080a428c <_ZTV17LiquidCrystal_I2C>:
	...
 80a4294:	080a0789 080a078b 080a0857 080a1161     ........W...a...
 80a42a4:	00000000 00000040 00000014 00000054     ....@.......T...
 80a42b4:	64756162 72655300 006c6169 53425355     baud.Serial.USBS
 80a42c4:	61697265 4a00316c 534e4f53 61657274     erial1.JSONStrea
 80a42d4:	676f4c6d 646e6148 0072656c 00707061     mLogHandler.app.
 80a42e4:	30313025 5d002075 64250020 00202c00     %010u .] .%d., .
 80a42f4:	203a2928 005b2000 65646f63 00203d20     (): . [.code = .
 80a4304:	64006925 69617465 3d20736c 0a0d0020     %i.details = ...
 80a4314:	63006d00 6c006600 6e66006e 63007400     .m.c.f.ln.fn.t.c
 80a4324:	0065646f 61746564 00006c69              ode.detail..

080a4330 <_ZTVN5spark16JSONStreamWriterE>:
	...
 80a4338:	080a1295 080a12bb 080a127b 080a2a13     ........{....*..

080a4348 <_ZTVN5spark16StreamLogHandlerE>:
	...
 80a4350:	080a1771 080a1789 080a1f45 080a00cb     q.......E.......

080a4360 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 80a4368:	080a179d 080a17b1 080a20ed 080a1283     ......... ......

080a4378 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 80a4380:	080a1293 080a12c9 080a1e81 080a1285     ................

080a4390 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 80a4398:	080a1291 080a12d7 080a1699 080a12f3     ................
 80a43a8:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
 80a43b8:	007a2553 74637361 00656d69              S%z.asctime.

080a43c4 <_ZTV9IPAddress>:
	...
 80a43cc:	080a244f 080a243f 080a2441              O$..?$..A$..

080a43d8 <_ZTV9USBSerial>:
	...
 80a43e0:	080a2509 080a256f 080a2547 080a1161     .%..o%..G%..a...
 80a43f0:	080a2539 080a250b 080a251b 080a2569     9%...%...%..i%..
 80a4400:	080a252b 080a2505                       +%...%..

080a4408 <_ZTV11USARTSerial>:
	...
 80a4410:	080a26ad 080a2715 080a26f1 080a1161     .&...'...&..a...
 80a4420:	080a26c1 080a26dd 080a26cf 080a26eb     .&...&...&...&..
 80a4430:	080a26af 080a26b3                       .&...&..

080a4438 <_ZTV7TwoWire>:
	...
 80a4440:	080a27b5 080a27ff 080a27d7 080a27b7     .'...'...'...'..
 80a4450:	080a27df 080a27e7 080a27ef 080a27f7     .'...'...'...'..

080a4460 <_ZTVN5spark9WiFiClassE>:
	...
 80a4468:	080a28f9 080a28ef 080a28e5 080a2863     .(...(...(..c(..
 80a4478:	080a126f 080a28d9 080a28cd 080a28c5     o....(...(...(..
 80a4488:	080a28bb 080a28b1 080a286d              .(...(..m(..

080a4494 <_ZTVN5spark12NetworkClassE>:
	...
 80a449c:	080a2919 080a2923 080a292d 080a2937     .)..#)..-)..7)..
 80a44ac:	080a2941 080a294d 080a2959 080a2965     A)..M)..Y)..e)..
 80a44bc:	080a296d 080a2977 080a2981 75007525     m)..w)...)..%u.u
 80a44cc:	78343025                                 %04x.

080a44d1 <_ZSt7nothrow>:
	...

080a44d2 <_ZTSSt19_Sp_make_shared_tag>:
 80a44d2:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 80a44e2:	5f646572 00676174                        red_tag...

080a44ec <_ZTISt19_Sp_make_shared_tag>:
 80a44ec:	080a452c 080a44d2                       ,E...D..

080a44f4 <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a44f4:	080a458c 080a4500 080a45b0              .E...E...E..

080a4500 <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a4500:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 80a4510:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 80a4520:	00000045                                E...

080a4524 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a4524:	00000000 080a44f4 080a3029 080a303d     .....D..)0..=0..
 80a4534:	080a31d5 080a31d5 080a30a7 080a2fe9     .1...1...0.../..
 80a4544:	080a308f 080a3051 080a301d              .0..Q0...0..

080a4550 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a4550:	080a458c 080a455c 080a44f4              .E..\E...D..

080a455c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a455c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 80a456c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 80a457c:	456f666e 00000000                       nfoE....

080a4584 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a4584:	00000000 080a4550 080a30d1 080a30e5     ....PE...0...0..
 80a4594:	080a31d5 080a31d5 080a30a7 080a2fe9     .1...1...0.../..
 80a45a4:	080a31a9 080a3135 080a30f9              .1..51...0..

080a45b0 <_ZTISt9type_info>:
 80a45b0:	080a452c 080a45b8                       ,E...E..

080a45b8 <_ZTSSt9type_info>:
 80a45b8:	74397453 5f657079 6f666e69               St9type_info.

080a45c5 <_ctype_>:
 80a45c5:	20202000 20202020 28282020 20282828     .         ((((( 
 80a45d5:	20202020 20202020 20202020 20202020                     
 80a45e5:	10108820 10101010 10101010 10101010      ...............
 80a45f5:	04040410 04040404 10040404 10101010     ................
 80a4605:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a4615:	01010101 01010101 01010101 10101010     ................
 80a4625:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a4635:	02020202 02020202 02020202 10101010     ................
 80a4645:	00000020 00000000 00000000 00000000      ...............
	...

080a46c6 <link_const_variable_data_end>:
	...

080a46c8 <link_constructors_location>:
 80a46c8:	080a04d9 	.word	0x080a04d9
 80a46cc:	080a0e6d 	.word	0x080a0e6d
 80a46d0:	080a1f35 	.word	0x080a1f35
 80a46d4:	080a2261 	.word	0x080a2261
 80a46d8:	080a2289 	.word	0x080a2289
 80a46dc:	080a2905 	.word	0x080a2905
 80a46e0:	080a29d1 	.word	0x080a29d1
 80a46e4:	080a2f15 	.word	0x080a2f15

080a46e8 <link_constructors_end>:
	...
